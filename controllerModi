using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Web.Mvc;
using Newtonsoft.Json.Linq;
using System.Linq;

namespace ECloseWebApp.Controllers
{
    class TaskInfo
    {
        public string title { get; set; }
        //value is used for calculate task number
        public int? value { get; set; }
        // task end date

        public string date { get; set; }
        //if any extra param to send
        public string extra { get; set; }
        public string TeamName { get; set; }
        public int TeamId { get; set; }
        public string TaskName { get; set; }
        public int TaskId { get; set; }
        public int DependantTaskId { get; set; }
        //public int Day { get; set; }
        public DateTime EndDate { get; set; }
    }
    public class ReportController : Controller
    {


        public ActionResult TeamTaskDetailsReport()
        {
         

                //var responseTeam = httpClient.GetAsync(string.Format("Team/LocationTeamList?LocationId={0}", locationId)).Result;
                //var resultTeams = responseTeam.Content.ReadAsStringAsync().Result;
                //var teams = JsonConvert.DeserializeObject<List<ECloseBL.Entities.Team>>(resultTeams);

                //foreach (var team in teams)
                //{
                //    vm.Team.Add(new SelectListItem { Text = team.TeamName, Value = team.Id.ToString() });
                //}

                //vm.Team.Insert(0, new SelectListItem { Text = "--All--", Value = "0" });



            return View();

        }
        public JsonResult filterdata()
        {
            //Create sample data
            try
            {
               // var path = Constants.ApiPath + "api/Report/GetTaskTimelineChartReport?LocationId=" + LocationId + "&PeriodText=" + PeriodText;
             
                        List<TaskInfo> _info = new List<TaskInfo>();

                _info.Add(
                 new TaskInfo
                 {
                     title = "Task 1",
                     value = null,
                     EndDate = new DateTime(2017, 04, 23),
                     TaskId=12,
                     DependantTaskId = 13,

                     extra = "",
                     TeamName = "team3"
                 });
                _info.Add(

                new TaskInfo
                {
                    title = "Task 1",
                    value = null,
                    EndDate = new DateTime(2017, 04, 24),
                    TaskId = 13,
                    DependantTaskId = 13,

                    extra = "",
                    TeamName = "team3"
                });
                _info.Add(
                   new TaskInfo
                   {
                       title = "Task 1",
                       value = null,
                       EndDate = new DateTime(2017, 04, 26),
                       extra = "",
                       TaskId = 14,
                       DependantTaskId = 15,

                       TeamName = "team3"

                   });

                _info.Add(
                    new TaskInfo
                    {
                        title = "Task 1",
                        value = null,
                        EndDate = new DateTime(2017, 04, 21),
                        TaskId = 15,
                        DependantTaskId = 16,

                        extra = "",
                        TeamName = "team1"
                    });
                _info.Add(

                new TaskInfo
                {
                    title = "Task 1",
                    value = null,
                    EndDate = new DateTime(2017, 04, 22),
                    extra = "",
                    TaskId = 16,
                    DependantTaskId = 16,

                    TeamName = "team1"
                });
                _info.Add(
                   new TaskInfo
                   {
                       title = "Task 1",
                       value = null,
                       EndDate = new DateTime(2017,04,22),
                       extra = "",
                       TaskId = 17,
                       DependantTaskId = 18,

                       TeamName = "team2"

                   });
                _info.Add(
                   new TaskInfo
                   {
                       title = "Task 2",
                       value = null,
                       EndDate = new DateTime(2017, 04, 22),
                       TaskId = 18,
                       DependantTaskId = 19,

                       extra = "",
                       TeamName = "team2"

                   });
                _info.Add(
                   new TaskInfo
                   {
                       title = "Task 1",
                       value = null,
                       EndDate = new DateTime(2017, 04, 24),
                       extra = "",
                       TaskId = 19,

                       DependantTaskId = 19,

                       TeamName = "team2"

                   });


                // logic for add value of task date wise task number assign ..same date it will 1,2,3,4 etc
                //string teamOldValue = "";
                var teamCollection = (_info.GroupBy(x => x.TeamName)
                                                   .Select(TeamName => new
                                                   {
                                                       TeamName = TeamName.Key
                                                   }));
                        int count = 0;
                        var color = (teamCollection.Select(TeamName => new
                        {
                            value = count++,
                            name = TeamName.TeamName
                        }).ToList());

                        int teamCounter = 0;
                        foreach (var teamGroup in teamCollection)
                        {

                            string teamname = teamGroup.TeamName;

                            int teamDateMaxCount = _info.Where(x => x.TeamName == teamname).GroupBy(x => x.EndDate)
                                                 .Max(g => g.Count());
                            int counter = 1;
                            string oldValue = "";
                            foreach (var item in _info.Where(x => x.TeamName == teamname).OrderBy(x => x.EndDate))
                            {
                                if (oldValue != item.EndDate.ToString())
                                {
                                    counter = 1;
                                }
                                else
                                {
                                    counter++;
                                }
                                oldValue = item.EndDate.ToString("dd/MM/yyyy");
                                item.value = teamCounter + counter;
                                item.extra = color.Where(x => x.name == teamname).First().value.ToString();
                            }
                            teamCounter += teamDateMaxCount;
                        }
                //here customise column name
                var output = from i in _info
                             select new
                             {
                                 TaskTitle = i.TaskName,
                                 TaskNumber = i.value,
                                 TaskDate = i.EndDate.ToString("dd/MM/yyyy"),
                                 TaskName = i.TaskName,
                                 extra = i.extra,
                                 DependantTaskId = i.DependantTaskId,
                                 DependantTaskDate = _info.Where(x => x.TaskId == i.DependantTaskId).FirstOrDefault().EndDate.ToString("dd/MM/yyyy"),
                                 DependantTaskNumber = _info.Where(x => x.TaskId == i.DependantTaskId).FirstOrDefault().value,
                                 color = i.EndDate >= _info.Where(x => x.TaskId == i.DependantTaskId).FirstOrDefault().EndDate ? "green" : "red"

                             };

                        return Json(JsonConvert.SerializeObject(output), JsonRequestBehavior.AllowGet);
                        // return Json(_json, JsonRequestBehavior.AllowGet);
                   
            }
            catch (Exception ex)
            {
                return Json(new { Result = "ERROR", Message = ex.Message });
            }
        }
    }
}
