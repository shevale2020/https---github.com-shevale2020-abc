using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace WebApplication2.Controllers
{

    class TeamTask{
        public int Id { get; set; }
        public int PeriodId { get; set; }
        public int LocationId { get; set; }
        public int TeamId { get; set; }
        public string TeamName { get; set; }
        public string TaskName { get; set; }
        public int TaskId { get; set; }
        public int DependantTaskId { get; set; }
        public int Day { get; set; }
        public DateTime EndDate { get; set; }
    }
    public class HomeController : Controller
    {
        //show chart view

        public ActionResult Index()
        {

             return View();
        }

     
        //get chart data
        public JsonResult Filter( int LocationId=0)
        {
            //create sample data .


            List<TeamTask> taskDetails = new List<TeamTask>();
                     
            taskDetails.Add(new TeamTask
            {
                PeriodId = 83,
                LocationId = 183,
                TeamId = 391,
                TeamName = "Demo1",
                TaskName = "Bank Group",
                TaskId = 1387,
                DependantTaskId = 1387,
                Day = 4,
                EndDate = new DateTime(2017, 09, 04),

            });
            taskDetails.Add(
                new TeamTask
                {
                    PeriodId = 83,
                    LocationId = 185,
                    TeamId = 391,
                    TeamName = "Demo1",
                    TaskName = "Bank Group",
                    TaskId = 1388,
                    DependantTaskId = 1389,
                    Day = 22,
                    EndDate = new DateTime(2017, 9, 22)
                });
            taskDetails.Add(new TeamTask
            {
                PeriodId = 83,
                LocationId = 185,
                TeamId = 391,
                TeamName = "Demo1",
                TaskName = "Close group",
                TaskId = 1389,
                DependantTaskId = 1389,
                Day = 5,
                EndDate = new DateTime(2017, 9, 05)
            });
            taskDetails.Add(new TeamTask
            {
                PeriodId = 83,
                LocationId = 183,
                TeamId = 391,
                TeamName = "Demo1",
                TaskName = "Close group",
                TaskId = 1394,
                DependantTaskId = 1395,
                Day = 22,
                EndDate = new DateTime(2017, 9, 22)
            });
            taskDetails.Add(new TeamTask
            {
                PeriodId = 83,
                LocationId = 183,
                TeamId = 391,
                TeamName = "Demo3",
                TaskName = "Close meets",
                TaskId = 1395,
                DependantTaskId = 1396,
                Day = 22,
                EndDate = new DateTime(2017, 9, 14)
            });
            taskDetails.Add(new TeamTask
            {
                PeriodId = 183,
                LocationId = 186,
                TeamId = 391,
                TeamName = "Demo2",
                TaskName = "Close meets",
                TaskId = 1396,
                DependantTaskId = 1396,
                Day = 22,
                EndDate = new DateTime(2017, 9, 22)
            });

            //filter data
            var filterData = taskDetails.Where(x => x.LocationId == (LocationId == 0 ? x.LocationId : LocationId)).ToList();

            //create data for team color and value.
            int count = 0;
            var color = (               filterData
                                        .GroupBy(u => u.TeamName)
                                        .Select(TeamName => new {
                                            value = count ++,
                                            name = TeamName.Key
                                        })
                                          .ToList());

            //create node format data
            var node =              filterData
                                     .Select(a => new
                                     {
                                         id = a.TaskId,
                                         Day = a.Day,
                                         Team = a.TeamName,
                                         cDay = a.Day,
                                         Task = a.EndDate.ToShortDateString() + a.TaskName ,
                                         color=color.Where(x=>x.name== a.TeamName).First().value
                                     });

            //create link date

            var dependancy =                filterData
                                            .Select(a => new
                                            {
                                              EdgeId = a.TaskId.ToString(),
                                                target = filterData.IndexOf(filterData.Find(x => x.TaskId == a.TaskId)),
                                                source = filterData.IndexOf(filterData.Find(x => x.TaskId == a.DependantTaskId)),
                                                cDay = a.Day
                                            });
            //create json format data
            string _json = "";
            _json = "{\"directed\": false,\"graph\": [[\"node_default\",{}],[\"name\",\"()_with_int_labels\"],[\"edge_default\",{}]],";
            _json += "\"nodes\":" + JsonConvert.SerializeObject(node) +",";
            _json += "\"links\":" + JsonConvert.SerializeObject(dependancy) + ",";
            _json += "\"multigraph\": false,";
            _json += "\"colordata\": "+ JsonConvert.SerializeObject(color) ;
            _json += "}";
           

            return Json(_json, JsonRequestBehavior.AllowGet);
             
        }
        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }
    }
}
