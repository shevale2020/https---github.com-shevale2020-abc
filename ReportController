using ECloseWebApp.BuisnessEntities;
using ECloseWebApp.HelperClasses;
using ECloseWebApp.Models;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Web.Mvc;
using ECloseWebAPI.Models;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Linq;

namespace ECloseWebApp.Controllers
{
    [HandleExceptionsAttribute]
      class TaskInfo
    {
        public string title { get; set; }
        //value is used for calculate task number
        public int? value { get; set; }
        // task end date

        public string date { get; set; }
        //if any extra param to send
        public string extra { get; set; }
        public string TeamName { get; set; }
        public int TeamId { get; set; }
        public string TaskName { get; set; }
        public int TaskId { get; set; }
        public int DependantTaskId { get; set; }
        //public int Day { get; set; }
        public DateTime EndDate { get; set; }
    }
    public class ReportController : Controller
    {


        log4net.ILog logger = log4net.LogManager.GetLogger(typeof(LoginController));  //Declaring Log4Net 
         public ActionResult TeamTaskDetailsReport()
        {
            int locationId = 0;
            var vm = new ViewModelForBusinessUnitDD();
            using (var httpClient = new HttpClient())
            {


                int tenantId = SessionWrapper.TenantId;
                httpClient.BaseAddress = new Uri(Constants.ApiPath);
                httpClient.DefaultRequestHeaders.Clear();
                httpClient.DefaultRequestHeaders.AcceptLanguage.Add(new StringWithQualityHeaderValue("nl-NL"));

                httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                var responseLocation = httpClient.GetAsync(string.Format("Location/GetBusinessUnitLocations?TenantId={0}", tenantId)).Result;
                var resultLocation = responseLocation.Content.ReadAsStringAsync().Result;
                var locations = JsonConvert.DeserializeObject<List<Location>>(resultLocation);

                foreach (var location in locations)
                {
                    vm.Location.Add(new SelectListItem { Text = location.LocationName, Value = location.Id.ToString() });
                }

                if (vm.Location.Count > 0 && vm.Location[0].Value != null)
                {
                    locationId = Convert.ToInt32(vm.Location[0].Value);
                }

                //var responseTeam = httpClient.GetAsync(string.Format("Team/LocationTeamList?LocationId={0}", locationId)).Result;
                //var resultTeams = responseTeam.Content.ReadAsStringAsync().Result;
                //var teams = JsonConvert.DeserializeObject<List<ECloseBL.Entities.Team>>(resultTeams);

                //foreach (var team in teams)
                //{
                //    vm.Team.Add(new SelectListItem { Text = team.TeamName, Value = team.Id.ToString() });
                //}

                //vm.Team.Insert(0, new SelectListItem { Text = "--All--", Value = "0" });



            }
            return View(vm);

        }
        public JsonResult filterdata(int LocationId, string PeriodText)
        {
            //Create sample data
            try
            {
                var path = Constants.ApiPath + "api/Report/GetTaskTimelineChartReport?LocationId=" + LocationId + "&PeriodText=" + PeriodText;
                using (var httpClient = new HttpClient())
                {
                    HttpResponseMessage response = httpClient.GetAsync(path).Result;
                    var responseData = response.Content.ReadAsStringAsync().Result;
                    var task = JsonConvert.DeserializeObject(responseData);
                    List<TaskInfo> taskDetails = new List<TaskInfo>();
                    taskDetails = JsonConvert.DeserializeObject<List<TaskInfo>>(responseData);
                    if (taskDetails != null)
                    {

                        List<TaskInfo> _info = new List<TaskInfo>();
                        _info = taskDetails;
                    

                        // logic for add value of task date wise task number assign ..same date it will 1,2,3,4 etc
                        //string teamOldValue = "";
                        var teamCollection = (_info.GroupBy(x => x.TeamName)
                                                   .Select(TeamName => new
                                                   {
                                                       TeamName = TeamName.Key
                                                   }));
                        int count = 0;
                        var color = (teamCollection.Select(TeamName => new
                        {
                            value = count++,
                            name = TeamName.TeamName
                        }).ToList());

                        int teamCounter = 0;
                        foreach (var teamGroup in teamCollection)
                        {

                            string teamname = teamGroup.TeamName;

                            int teamDateMaxCount = _info.Where(x => x.TeamName == teamname).GroupBy(x => x.EndDate)
                                                 .Max(g => g.Count());
                            int counter = 1;
                            string oldValue = "";
                            foreach (var item in _info.Where(x => x.TeamName == teamname).OrderBy(x => x.EndDate))
                            {
                                if (oldValue != item.EndDate.ToString())
                                {
                                    counter = 1;
                                }
                                else
                                {
                                    counter++;
                                }
                                oldValue = item.EndDate.ToString("dd/MM/yyyy");
                                item.value = teamCounter + counter;
                                item.extra = color.Where(x => x.name == teamname).First().value.ToString();
                            }
                            teamCounter += teamDateMaxCount;
                        }
                        //here customise column name
                        var output = from i in _info
                                     select new
                                     {
                                         TaskTitle = i.TaskName,
                                         TaskNumber = i.value,
                                         TaskDate = i.EndDate.ToString("dd/MM/yyyy"),
                                         TaskName=i.TaskName,
                                         extra = i.extra
                                     };
                     
                        return Json(JsonConvert.SerializeObject(output), JsonRequestBehavior.AllowGet);
                        // return Json(_json, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { Result = "OK", Message = "Record Not Found.", Record = task });
                    }
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex.ToString());
                return Json(new { Result = "ERROR", Message = ex.Message });
            }
        }
        }
}
