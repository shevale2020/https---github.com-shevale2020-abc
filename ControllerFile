using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace WebApplication4.Controllers
{
    public class TaskInfo
    {
        public string TaskName { get; set; }
        //value is used for calculate task number
        public int? value { get; set; }
        //if any extra param to send
        public string extra { get; set; }
        public string TeamName { get; set; }
        // public int? TeamId { get; set; }
        public int? WorkbasketTaskId { get; set; }
        public int? DependsOnWorkbasketTaskId { get; set; }
        public DateTime? EndDateInt { get; set; }
    }
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            eClose_TestingEntities context = new eClose_TestingEntities();

            var result = (from DependetWorkbasketTask in context.DependetWorkbasketTasks
                          join WorkbasketTask in context.WorkbasketTasks
                          on DependetWorkbasketTask.WorkbasketTaskId equals WorkbasketTask.Id
                          join Period in context.Periods
                          on WorkbasketTask.PeriodId equals Period.Id
                          join PeriodDays in context.PeriodDays
                          on Period.Id equals PeriodDays.PeriodId
                          join Team in context.Teams
                          on WorkbasketTask.TeamId equals Team.Id
                          join WorkbasketTaskUsers in context.WorkbasketTaskUsers
                          on DependetWorkbasketTask.DependsOnWorkbasketTaskId equals WorkbasketTaskUsers.Id
                          where (Period.LocationId == 203) && (Period.Id == 110) && (WorkbasketTask.TenantId == 57)
                          group DependetWorkbasketTask by new
                          {
                              WorkbasketTaskUsers.EndDateInt,
                              DependetWorkbasketTask.WorkbasketTaskId,
                              DependetWorkbasketTask.DependsOnWorkbasketTaskId,
                              WorkbasketTask.TaskName,
                              Team.TeamName
                          } into gcs
                          select new TaskInfo
                          {
                              // TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,
                              TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,
                              TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,
                              WorkbasketTaskId = gcs.Key.WorkbasketTaskId,
                              DependsOnWorkbasketTaskId = (gcs.Key.DependsOnWorkbasketTaskId == null) ? gcs.Key.WorkbasketTaskId : gcs.Key.DependsOnWorkbasketTaskId,
                              EndDateInt = gcs.Max(x => (gcs.Key.EndDateInt)),
                              value = 0,
                              extra = ""
                          });
            ;



            //var result2 =  (from WorkbasketTask  in  context.WorkbasketTasks
            //                            join DependetWorkbasketTask in context.DependetWorkbasketTasks
            //                            on WorkbasketTask.Id equals DependetWorkbasketTask.WorkbasketTaskId
            //                            join Period in context.Periods
            //                            on WorkbasketTask.PeriodId equals Period.Id
            //                            join PeriodDays in context.PeriodDays
            //                            on Period.Id equals PeriodDays.PeriodId
            //                            join Team in context.Teams
            //                            on WorkbasketTask.TeamId equals Team.Id
            //                            join WorkbasketTaskUsers in context.WorkbasketTaskUsers
            //                            on WorkbasketTask.Id equals WorkbasketTaskUsers.Id
            //                where WorkbasketTask.Id.Contains(result.Contains.DependsOnWorkbasketTaskId)
            //                group DependetWorkbasketTask by new
            //                            {
            //                                WorkbasketTaskUsers.EndDateInt,
            //                                DependetWorkbasketTask.WorkbasketTaskId,
            //                                DependetWorkbasketTask.DependsOnWorkbasketTaskId,
            //                                WorkbasketTask.TaskName,
            //                                Team.TeamName
            //                            } into gcs
            //                            select new
            //                            {
            //                                // TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,
            //                                TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,
            //                                TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,
            //                                WorkbasketTaskId = (gcs.Key.WorkbasketTaskId == null) ? 0 : gcs.Key.WorkbasketTaskId,
            //                                DependsOnWorkbasketTaskId = (gcs.Key.DependsOnWorkbasketTaskId == null) ? gcs.Key.WorkbasketTaskId : gcs.Key.DependsOnWorkbasketTaskId,
            //                                EndDateInt = gcs.Max(x => (gcs.Key.EndDateInt == null) ? "01/01/2000" : gcs.Key.EndDateInt.ToString()),
            //                                value = "",
            //                                extra = ""
            //                            }).ToList<dynamic>();

            var result2 = (from WorkbasketTask in context.WorkbasketTasks
                           join DependetWorkbasketTask in context.DependetWorkbasketTasks
                           on WorkbasketTask.Id equals DependetWorkbasketTask.WorkbasketTaskId
                           join Period in context.Periods
                           on WorkbasketTask.PeriodId equals Period.Id
                           join PeriodDays in context.PeriodDays
                           on Period.Id equals PeriodDays.PeriodId
                           join Team in context.Teams
                           on WorkbasketTask.TeamId equals Team.Id
                           join WorkbasketTaskUsers in context.WorkbasketTaskUsers
                           on WorkbasketTask.Id equals WorkbasketTaskUsers.Id
                           join list1 in result
                           on WorkbasketTask.Id equals list1.DependsOnWorkbasketTaskId
                           group DependetWorkbasketTask by new
                           {
                               WorkbasketTaskUsers.EndDateInt,
                               DependetWorkbasketTask.WorkbasketTaskId,
                               DependetWorkbasketTask.DependsOnWorkbasketTaskId,
                               WorkbasketTask.TaskName,
                               Team.TeamName
                           } into gcs
                           select new TaskInfo
                           {
                               // TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,
                               TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,
                               TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,
                               WorkbasketTaskId = gcs.Key.WorkbasketTaskId,
                               DependsOnWorkbasketTaskId = (gcs.Key.DependsOnWorkbasketTaskId == null) ? gcs.Key.WorkbasketTaskId : gcs.Key.DependsOnWorkbasketTaskId,
                               EndDateInt = gcs.Max(x => (gcs.Key.EndDateInt )),
                               value = 0,
                               extra = ""
                           });

            result.ToList().AddRange(result2);
            return View(result);
        }

      
    }
}
