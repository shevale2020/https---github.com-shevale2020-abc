@model ECloseWebApp.Models.ViewModelForBusinessUnitDD
@using ECloseWebApp.Models;
@using ECloseWebApp.BuisnessEntities;
@using ECloseBL.Entities;

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    #Edit-DependentTaskId{
        width:auto;
    }
    
</style>


@using (Html.BeginForm("TaskUpload", "TaskTemplate", new { TaskType = "Regular" }, FormMethod.Post, new { enctype = "multipart/form-data" }))

{
    @Html.AntiForgeryToken();
    <div class="panel panel-white">
        <div class="panel-body">
            <div class="row">
                <div class="col-md-3">
                    <div class="form-group  no-m">
                        <label title="" runat="server">
                            @LableConstants.LocationLable :
                        </label>
                        @Html.DropDownListFor(m => m.Location, Model.Location, new { @class = "form-control" })
                    </div>

                </div>
                <div class="col-md-3">
                    <div class="form-group  no-m">
                        <label title="" runat="server">
                            @LableConstants.TeamLable :
                        </label>
                        @Html.DropDownListFor(m => m.Team, Model.Team, new { @class = "form-control" })
                    </div>
                </div>
            </div>
        </div>

        <div class="panel-footer" style="margin-bottom:25px;">
            <button type="button" class="btn btn-primary" Id="btnUploadTasks" data-toggle="modal" data-target="#myModal"><i class="fa fa-upload"></i> Upload Tasks</button>

        </div>
    </div>

    <div class="modal fade " id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" style="display: none;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">Ã—</span></button>
                    <h4 class="modal-title" id="myModalLabel"><i class="fa fa-upload"></i>  Upload Regular Tasks</h4>
                </div>
                <div class="modal-body">
                    <div class="form-group">

                        <input type="file" name="UploadedFile" class="form-control" id="UploadedFile" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
                    </div>
                    <div class="form-group">
                        <i class="fa fa-download text-primary"> </i>
                        <strong> @Html.ActionLink("Download Template", "DownloadTaskTemplate") </strong>
                    </div>
                </div>
                <div class="modal-footer">
                    <input type="submit" class="btn btn-primary" name="Upload" value="Upload" onclick="return ValidateExtension()" />
                </div>
            </div>
        </div>
    </div>
}
   
        <div class="" id="RegularSearchDiv" style="position:absolute;margin-top: -2px;margin-left: 44.3%;z-index: 1;">
            <div class="row">
                TaskTitle: <input type="text" name="TaskName" id="TaskName"style="height:36.4px;padding-top: 0px;margin-right: 2px;" />
                <input type="button" class="btn btn-primary" id="LoadRegularTaskButton" value="@Constants.SearchButtonTitle" style="padding: 7.5px;"/>
                <div class="clearfix"></div>
            </div>
            <div class="row"></div>
        </div>
    
<div class="clearfix"></div>

<div class="panel pos-rel ">
    <div class="pos-abs right-null zindex10" id="divBackBtn">
        <input type="button" class="btn btn-secondary" id="btnBack" value="Back" />
    </div>
</div>
<div id="divFinYear"></div>
<div id="divPeriod">
</div>

<div id="divWeekly">
</div>



<script type="text/javascript">

    function ValidateExtension() {
        
        var ddlLocation = $('#Location :selected').text(); // $('#Region').val();
        var ddlTeam = $('#Team :selected').text(); // $('#Region').val();
        var allowedFiles = [".xlsx"];
        var fileUpload = document.getElementById("UploadedFile");
        var fileSize = @Constants.FileSize;
        fileSize =  fileSize * (1024 * 1024)

        if (ddlLocation == "" || ddlLocation == "--Select--") {
            Command: toastr["info"]("Kindly select location.");
            return false;
        }

        if (ddlTeam == "" || ddlTeam == "--Select--") {
            Command: toastr["info"]("Kindly select team.");
            return false;
        }

        var fileName = $("#UploadedFile").val();
        if (fileName == null || fileName == "") {
            Command: toastr["info"]("Kindly select file for upload.");
            return false;
        }
        //here I CHECK if the FILE SIZE is bigger than 1 MB (numbers below are in bytes)
        if (fileUpload.size > fileSize || fileUpload.size > fileSize) {
            //show an alert to the user
            Command: toastr["info"]("Allowed file size exceeded. (Max. 1 MB)");

            return false;
        }
        var regex = new RegExp("([a-zA-Z0-9\s_\\.\-:()])+(" + allowedFiles.join('|') + ")$");
        if (!regex.test(fileUpload.value.toLowerCase())) {
            // alert("Please upload files having extensions: " + allowedFiles.join(', ') + " only.");
            Command: toastr["error"]("Please upload files having extensions: " + allowedFiles.join(', ') + " only.");
            return false;
        }

        return true;
    }


    function DropDownValidation(field, rules, i, options) {


        if (field.val() == 0 || field.val() == "") {
            return "* This field is required";
        }
    }

    function TimeValidation(field, rules, i, options) {

        if (field.val()) {
            var name = field.val();

            var filter = /^(2[0-3]|[01]?[0-9]):([0-5]?[0-9])$/;

            if (filter.test(name)) {
                return true;

            }
            else
                return "* Invalid format (e.g: HH:MM (24Hrs))";

        }
    }
    function NameValidation(field, rules, i, options) {
        if (field.val()) {
            var name = field.val();
            var filter = @Constants.NameRegex;

            if (filter.test(name)) {
                return true;
            }
            else
                return "* Invalid format";
        }
    }
    function DescriptionValidation(field, rules, i, options) {
        if (field.val()) {
            var name = field.val();
            var length = field.val().length;
            var filter = @Constants.DescriptionRegex;
            if (filter.test(name)) {
                return true;
            }
            else if (length > '@Constants.FifthyMaxLength') {
                return "";
            }
            else
                return '@Constants.InputValidation';
        }
    }

    $('#LoadRecords').click(function () {
        location.reload();
    });



    $('#inputEntity').hide();
    $('#LoadRecords').hide();

    $("#btnBack").click(function () {
        $('#divFinYear').show();
        $('#divPeriod').hide();
        $('#divWeekly').hide();
        $('#divBackBtn').hide();

    });
    $('#Location').change(function () {
        var tokenId = '@Html.AntiForgeryToken()';
        var LocationId = $(this).val();
        $.post('@Url.Action("GetTeamByLocationId", "Rollover")', { LocationId: LocationId ,__RequestVerificationToken: $(tokenId).val() },
    //  $.post('/Rollover/GetTeamByLocationId', { LocationId: LocationId },
             function (results) {
                 $("#Team").empty();
                 $("#Team").append("<option value='0'>--Select--</option>");
                 $.each(results.Options, function (index, value) {
                     $("#Team").append("<option value='" + value.Value + "'>" + value.DisplayText + "</option>");

                 });

             });

        $('#divFinYear').hide();
    });


    $("#Team").change(function () {
        var teamSelectedVal =  $('#Team :selected').val();
        if(teamSelectedVal != 0)
        {
            $("#RegularSearchDiv").show();
            $('#divFinYear').show();
            $("#btnUploadTasks").attr('disabled', false);
        }
        else
        {
            $("#RegularSearchDiv").hide();
            $("#divFinYear").hide();
            $("#btnUploadTasks").attr('disabled', true);
        }
        $("#UploadedFile").val("");
        $(BindEntityList());
    });


    $(document).ready(function () {
        $("#btnUploadTasks").attr('disabled', true);;
        $("#RegularSearchDiv").hide();
        $("#moduleName").text('Regular Tasks');
        $('#divFinYear').hide();
        $('#divPeriod').hide();
        $('#divBackBtn').hide();
        $('#divWeekly').hide();
        $('#divFilter').hide();
        var LocationId = '@ViewBag.LocationId';
        var TeamId = '@ViewBag.TeamId';
        var Error = '@ViewBag.Error';
       


        if (LocationId != "" && TeamId != "") {
            $('#Location').val(LocationId);
            $('#Location').change(function () {
                var tokenId = '@Html.AntiForgeryToken()';
                var LocationId = $(this).val();
                $.post('@Url.Action("GetTeamByLocationId", "Rollover")', { LocationId: LocationId ,__RequestVerificationToken: $(tokenId).val() },
                       function (results) {
                           $("#Team").empty();
                           $("#Team").append("<option value='0'>--Select--</option>");
                           $.each(results.Options, function (index, value) {
                               $("#Team").append("<option value='" + value.Value + "'>" + value.DisplayText + "</option>");

                           });
                           $("#Team").val(TeamId);
                       });
                // $('#Team').val(TeamId);
                $('#divFinYear').hide();
            });
            $('#Location').change();
            $(BindEntityList());
            $('#divFinYear').show();
            $('#divFinYear').jtable('load', { TeamId: TeamId, Locationid: LocationId });
            if (Error != "") {

                //alert(Error);
                Command: toastr["info"](Error);

            }

            else {

                Command: toastr["success"]("Tasks uploaded successfully");

            }

        }

        else {

            $(BindEntityList());
        }
    });


    function BindEntityList() {
        var tokenId = '@Html.AntiForgeryToken()';
        var TaskId= 0;
        var Tasktype = "TaskUser";
        $('#divFinYear').jtable({
            title: 'Regular Tasks',
            paging: true,  //Enables paging
            pageSize: 10, //Actually this is not needed since default value is 10.
            sorting: true, //Enables sorting
            messages: {
                addNewRecord: 'Regular Task',
                editRecord: 'Edit Regular Task'
            },
            actions: {
                //createAction: '@Url.Action("AddTask", "TaskTemplate")',
                createAction: function (postData) {
                    postData = postData.replace(/\+/g,' ');
                    var data = postData.split('&');
                    var model = {
                        TaskName: data[0].split('=', 2)[1],
                        TeamId:data[1].split('=', 2)[1],
                        WorkflowId:data[2].split('=', 2)[1],
                        Frequency:data[3].split('=', 2)[1],
                        PriorityId:data[4].split('=', 2)[1],
                        Description:data[5].split('=', 2)[1],
                        //IntEndDay:data[6].split('=',2)[1],
                        __RequestVerificationToken: $(tokenId).val()
                    };
                    return $.Deferred(function ($dfd) {
                        $.ajax({
                            url: '@Url.Action("AddTask", "TaskTemplate")',
                            type: 'POST',
                            dataType: 'json',
                            data: model ,
                            success: function (data) {
                                    $dfd.resolve(data);
                            },
                            error: function () {
                                $dfd.reject();
                            }
                        });
                    });
                },
                @*listAction: '@Url.Action("GetTask", "TaskTemplate")',*@
                listAction: function (postData, jtParams) {
                    return $.Deferred(function ($dfd) {
                        $.ajax({
                            url: 'TaskTemplate/GetTask?jtStartIndex=' + jtParams.jtStartIndex + '&jtPageSize=' + jtParams.jtPageSize + '&TeamId=' + $('#Team :selected').val() + '&locationId=' + $('#Location :selected').val() + '&TaskName=' + $('#TaskName').val() ,
                            type: 'POST',
                            dataType: 'json',
                            data: {
                                __RequestVerificationToken: $(tokenId).val(),
                            },
                            success: function (data) {
                                $dfd.resolve(data);
                            },
                            error: function () {
                                $dfd.reject();
                            }
                        });
                    });
                },
                //updateAction: '@Url.Action("PutRegularTask", "TaskTemplate")',
                updateAction: function (postData) {
                    postData = postData.replace(/\+/g,' ');
                    var data = postData.split('&');
                    var model = {
                        Id: data[0].split('=', 2)[1],
                        TaskName:data[1].split('=', 2)[1],
                        WorkflowId:data[2].split('=', 2)[1],
                        Frequency:data[3].split('=', 2)[1],
                        PriorityId:data[4].split('=', 2)[1],
                        Description:data[5].split('=', 2)[1],
                        //IntEndDay:data[6].split('=',2)[1],
                        __RequestVerificationToken: $(tokenId).val()
                    };
                    return $.Deferred(function ($dfd) {
                        $.ajax({
                            url: '@Url.Action("PutRegularTask", "TaskTemplate")',
                            type: 'POST',
                            dataType: 'json',
                            data:model ,
                            success: function (data) {
                                $dfd.resolve(data);
                            },
                            error: function () {
                                $dfd.reject();
                            }
                        });
                    });
                },
                //deleteAction: '@Url.Action("DeleteRegularTask", "TaskTemplate")'
                deleteAction: function (postData) {
                    postData.__RequestVerificationToken = $(tokenId).val();
                    return $.Deferred(function ($dfd) {
                        $.ajax({
                            url: '@Url.Action("DeleteRegularTask", "TaskTemplate")',
                            type: 'POST',
                            dataType: 'json',
                            data: postData,
                            success: function (data) {
                                $dfd.resolve(data);
                            },
                            error: function () {
                                $dfd.reject();
                            }
                        });
                    });
                },
            },

            fields: {

                Id: {
                    title: '@LableConstants.TaskId',
                    list: true,
                    create: false
                },

                TaskNumber: {
                    title: 'Task Number',
                    width: '10%',
                    list: false,
                    create: false,
                    edit: false,


                },

                TaskName: {
                    title: '@LableConstants.TaskName',
                    inputClass: 'validate[required,maxSize[100],funcCall[NameValidation[]]]',
                    width: '30%',
                    edit: true
                },

                TeamId: {
                    title: '@LableConstants.TeamLable',
                    width: '15%',
                    sorting: false,
                    inputClass: 'validate[funcCall[DropDownValidation[]]]',
                    create: true,
                    edit: false,
                    options: function (data) {
                        if (data.source == 'list') {
                            return '@Url.Action("GetTeamForTasksByLocationId", "TaskTemplate")' + '?LocationId=' + $('#Location :selected').val() + '$' + '__RequestVerificationToken:' + $(tokenId).val();
                        }
                        if (data.source == 'create') {
                            return '@Url.Action("GetTeamForTasksByLocationId", "TaskTemplate")' + '?LocationId=' + $('#Location :selected').val() + '$' + '__RequestVerificationToken:' + $(tokenId).val();
                        }

                    }
                },

                WorkflowId: {
                    title: 'Workflow',
                    width: '10%',
                    options: '@Url.Action("GetWorkflow", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val(),
                    list: true,
                    inputClass: 'validate[funcCall[DropDownValidation[]]]',
                    edit: true

                },
                Frequency: {
                    title: 'Frequency',
                    width: '10%',
                    options: '@Url.Action("ListFrequency", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val(),
                    edit: true,
                    list: true

                },
                PriorityId: {
                    title: 'Priority',
                    width: '10%',
                    options: '@Url.Action("GetPrioritylist", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val(),
                    inputClass: 'validate[funcCall[DropDownValidation[]]]',
                    edit: true,
                    list: true
                },
                
                Description: {
                    title: 'Description',
                    width: '10%',
                    edit: true,
                    list: false,
                    inputClass: 'validate[maxSize[500], funcCall[DescriptionValidation[]]]',
                    type: 'textarea'
                },
                IntEndDay: {
                    title: 'Earliest Due Day',
                    width: '10%',
                    list: true,
                    create: false,
                    edit: false,
                },
                //CHILD TABLE DEFINITION FOR "Function"
                Others: {
                    title: 'Depends On',
                    sorting: false,
                    edit: false,
                    create: false,
                    display: function (data) {
                        var taskId = data.record.Id;
                        //Create an image that will be used to open child table
                        var $img = $(" <i class='fa fa-list fa-lg'></i>");

                        //Open child table when user clicks the image
                        $img.click(function () {

                            $('#divFinYear').jtable('openChildTable',
                               $img.closest('tr'), //Parent row
                               {
                                   title: 'Depends On',
                                   messages: {
                                       addNewRecord: 'Depends On'
                                   },
                                   actions: {
                                       @*listAction: '@Url.Action("GetdependentTask", "TaskTemplate")' + '?TaskId=' + data.record.Id,*@
                                       listAction: function (postData, jtParams) {
                                           return $.Deferred(function ($dfd) {
                                               $.ajax({
                                                   url: '@Url.Action("GetdependentTask", "TaskTemplate")' + '?TaskId=' + data.record.Id,
                                                   type: 'POST',
                                                   dataType: 'json',
                                                   data: { __RequestVerificationToken: $(tokenId).val() },
                                                   success: function (data) {
                                                       $dfd.resolve(data);
                                                   },
                                                   error: function () {
                                                       $dfd.reject();
                                                   }
                                               });
                                           });
                                       },
                                       //createAction: '@Url.Action("AdddependentTask", "TaskTemplate")' + '?TaskId=' + data.record.Id,
                                       createAction: function (postData) {
                                           postData = postData.replace(/\+/g,' ');
                                           var data = postData.split('&');
                                          
                                           var model = {
                                               LocationId: data[0].split('=', 2)[1],
                                               TeamId:data[1].split('=', 2)[1],
                                               DependentTaskId:data[2].split('=', 2)[1],
                                               __RequestVerificationToken: $(tokenId).val()
                                           };
                                           return $.Deferred(function ($dfd) {
                                               $.ajax({
                                                   url: '@Url.Action("AdddependentTask", "TaskTemplate")' + '?TaskId=' + taskId,
                                                   type: 'POST',
                                                   dataType: 'json',
                                                   data: model,
                                                   success: function (data) {
                                                       $dfd.resolve(data);
                                                   },
                                                   error: function () {
                                                       $dfd.reject();
                                                   }
                                               });
                                           });
                                       },
                                       deleteAction: function (postData) {
                                           postData.__RequestVerificationToken = $(tokenId).val();
                                           return $.Deferred(function ($dfd) {
                                               $.ajax({
                                                   url: '@Url.Action("DeletedependentTask", "TaskTemplate")',
                                                   type: 'POST',
                                                   dataType: 'json',
                                                   data: postData,
                                                   success: function (data) {
                                                       $dfd.resolve(data);
                                                   },
                                                   error: function () {
                                                       $dfd.reject();
                                                   }
                                               });
                                           });
                                       },
                                       //deleteAction: '@Url.Action("DeletedependentTask", "TaskTemplate")'
                                       @*updateAction: '@Url.Action("UpdateUserTeam", "User")' + '?UserId=' + data.record.ID,*@

                                   },

                                   //Initialize validation logic when a form is created
                                   formCreated: function (event, data) { data.form.validationEngine(); },
                                   //Validate form when it is being submitted
                                   formSubmitting: function (event, data) { return data.form.validationEngine('validate'); },
                                   //Dispose validation logic when form is closed
                                   formClosed: function (event, data) { data.form.validationEngine('hide'); data.form.validationEngine('detach'); },
                                   recordsLoaded: function (event1, data1) {

                                   },

                                   fields: {
                                       Id: {
                                           title: 'ID',
                                           key: true,
                                           create: false,
                                           edit: false,
                                           list: false
                                       },
                                       LocationId: {
                                           title: '@LableConstants.LocationLable',
                                           width: '20%',
                                           create: true,
                                           edit: false,
                                           list: false,
                                           options: '@Url.Action("GetLocation", "Period")' + '$' + '__RequestVerificationToken:' + $(tokenId).val(),
                                      },
                                       TeamId: {
                                           title: '@LableConstants.TeamLable',
                                           width: '20%',
                                           create: true,
                                           edit: false,
                                           list: false,
                                           dependsOn: 'LocationId',
                                           options: function (data) {
                                               return '@Url.Action("GetTeamByLocationId", "Rollover")' + '?LocationId=' + data.dependedValues.LocationId + '$' + '__RequestVerificationToken:' + $(tokenId).val();
                                           }
                                       },
                                       Location: {
                                           title: '@LableConstants.LocationLable',
                                           create: false,
                                           edit: false
                                       },
                                       Team: {
                                           title: '@LableConstants.TeamLable',
                                           create: false,
                                           edit: false
                                       },
                                       IntEndDay: {
                                           title: 'Earliest Due Day',
                                           create: false,
                                           edit: false,
                                           list: true
                                       },
                                       DependentTaskId: {
                                           title: 'Task[DueDay]',
                                           list: true,
                                           width: '50%',
                                           dependsOn: 'TeamId',
                                           options: function (childData) {
                                               if (childData.source == 'list') {
                                                   if (typeof(childData.record.TeamId) != "undefined")
                                                   {
                                                       return '@Url.Action("GetTaskforOptions", "TaskTemplate")' + '?TeamId=' + childData.record.TeamId + '$' + '__RequestVerificationToken:' + $(tokenId).val();
                                                   }
                                               }

                                               if (childData.dependedValues.TeamId != null) {
                                                   return '@Url.Action("GetTaskforOptions", "TaskTemplate")' + '?TeamId=' + childData.dependedValues.TeamId + '$' + '__RequestVerificationToken:' + $(tokenId).val();
                                               }
                                               else
                                               {
                                                   return   '@Url.Action("GetTaskforOptions", "TaskTemplate")' + '?TeamId=0' + '$' + '__RequestVerificationToken:' + $(tokenId).val();
                                               }
                                           },
                                           inputClass: 'validate[funcCall[DropDownValidation[]]]'
                                       }


                                   },
                                   recordAdded: function (event, data) {
                                       $img.click();
                                   }

                               }, function (data) { //opened handler
                                   data.childTable.jtable('load');
                               });
                        });
                        //Return image to show on the person row
                        return $img;

                    }
                },

                IsActive: {
                    title: 'IsActive',
                    width: '10%',
                    type: 'checkbox',
                    values: { 'false': 'Yes', 'true': 'No' },
                    list: false,
                    edit: false,
                    create: false,
                },

                MyButton: {
                    title: 'Activate / Deactivate',
                    width: '10%',
                    edit: false,
                    create: false,
                    display: function (data) {

                        if (data.record.IsActive == false) {

                            return '<button type="button" class="btn btn-primary" onclick="MarkOFFWD(' + data.record.Id + ')">Deactivate</button> ';

                        }
                        else {
                            return '<button type="button" class="btn btn-secondary" onclick="MarkOFFWD(' + data.record.Id + ')">Activate</button> ';
                        }
                    }
                }

            },
            //CHILD TABLE DEFINITION FOR "Opco"

            //Initialize validation logic when a form is created
            formCreated: function (event, data) {
                $("#Edit-TeamId").append("<option value='0'>--Select--</option>");
                $('#Edit-TeamId').val($('#Team :selected').val());
                //  $("#Edit-WorkflowId").append("<option value='0'>--Select--</option>");
                //  $('#Edit-WorkflowId').val(0);
                //$("#Edit-PeriodId").append("<option value='0'>--NA--</option>");
                //$('select option:contains("--NA--")').prop('selected', true);
                // $("#Edit-PeriodId").find("option[val='0']").attr("selected", "selected");
            },
            //Validate form when it is being submitted
            formSubmitting: function (event, data) { return data.form.validationEngine('validate'); },
            //Dispose validation logic when form is closed
            formClosed: function (event, data) { data.form.validationEngine('hide'); data.form.validationEngine('detach'); },

            recordUpdated: function (event, data) {
                $('#divFinYear').jtable('reload');
            },
            recordAdded: function (event, data) {

                $('#divFinYear').jtable('reload');
            },
            rowInserted: function (event, data) {

                if (data.record.IsActive == true) {
                    var index = data['row'][0]['rowIndex'] - 1;
                    console.log('decorating row with index: ' + index);
                    $('#divFinYear').find(".jtable tbody tr:eq(" + index + ")").css({ "background": "#bbb" });

                }
            },
            recordsLoaded: function (event, data) {
                $('.jtable-data-row').css('cursor', 'pointer');

                var pagenumber = $('.jtable-goto-page select option:selected').val();
                var pagesize = $('.jtable-page-size-change select option:selected').val();
                var SrNo = pagesize * pagenumber - pagesize;
                //if (data.records) {
                //    $.each(data.records, function (index, record) {
                //        var row = $('#divFinYear').jtable('getRowByKey', record.Id);
                //        SrNo++;
                //        row.find('td:eq(0)').text(SrNo);

                //    });
                //}

                //------for last cell that is for action cell disable row click
                var rowClick = false;
                $('td').click(function () {

                    var child = $(this).context.cellIndex
                    // var a =  $(this).find("TD").eq(3).html();
                    if (child == 6 || child == 7) {
                        rowClick = false;
                    }
                    else { rowClick = true; }
                });



              
                //------End---for last cell that is for action cell disable row click
                $('.jtable-data-row').click(function () {

                   
                    var record = $(this).data('record');
                    var IsActive = record.IsActive;
                    if (IsActive == true) {
                        return;
                    }

                    if (!rowClick) {
                        return;
                    }

                    TaskId= record.Id;

                    $('#divFinYear').hide();
                    //$('#divPeriod').show();
                    //$('#divWeekly').show();
                    // $('#divBackBtn').show();

                    var Freq = record.Frequency;
                    if (Freq == "Weekly") {
                        $('#divPeriod').hide();
                        $('#divWeekly').show();
                        $('#divBackBtn').show();
                        $('#divWeekly').jtable('load', { TaskId: record.Id, Frequency: record.Frequency });
                        $('#divWeekly').find('.jtable-title-text').html('Task : ' + record.TaskName);
                        $('#ui-id-16')[0].innerHTML = 'Set User & Due Day : ' + record.TaskName;
                    }
                    else {
                        $('#divWeekly').hide();
                        $('#divPeriod').show();
                        $('#divBackBtn').show();
                        $('#divPeriod').jtable('load', { TaskId: record.Id, Frequency: record.Frequency });
                        $('#divPeriod').find('.jtable-title-text').html('Task : ' + record.TaskName);
                        $('#ui-id-12')[0].innerHTML = 'Set User & Due Day : ' + record.TaskName;
                    }
                });
            },
            toolbar: {
                items: [{
                    Tooltip: 'Click here to export this table to excel',
                    text: 'Export to Excel',
                    click: function () {
                        window.location = '@Url.Action("ExportToExcelRegularTask", "TaskTemplate")' + '?jtStartIndex=0' + '&jtPageSize=0' + '&TeamId=' + $('#Team :selected').val() + '&LocationId=' + $('#Location :selected').val() + '&TaskName=' + $('#TaskName').val()
                    }
                }]
            },


        });


        $('#divFinYear').jtable('load', { TeamId: $('#Team :selected').val(), Locationid: $('#Location :selected').val() });

        $('#LoadRegularTaskButton').click(function (e) {
            e.preventDefault();
            $('#divFinYear').jtable('load', {
                TaskTitle: $('#TaskName').val()
            });
            //$('#TaskName').val(" ");
        });
        var tokenId = '@Html.AntiForgeryToken()';
      
        //Load and Bind User List to jTable
        $('#divPeriod').jtable({
            title: 'Task Template',
            paging: false,  //Enables paging
            //pageSize: 10, //Actually this is not needed since default value is 10.
            //messages: {
            //    editRecord: 'Set User & Due Day'
            //},
           
            actions: {
                @*listAction: '@Url.Action("GetTaskTemplateuser", "TaskTemplate")',*@
                listAction: function (postData, jtParams) {
                    var TaskId = postData.TaskId;
                    var Frequency = postData.Frequency;
                    return $.Deferred(function ($dfd) {
                        $.ajax({
                            url: 'TaskTemplate/GetTaskTemplateuser?TaskId=' + TaskId + '&Frequency=' + Frequency,
                            type: 'POST',
                            dataType: 'json',
                            data: { __RequestVerificationToken: $(tokenId).val() },
                            success: function (data) {
                                console.log(data.Records);
                                $dfd.resolve(data);
                            },
                            error: function () {
                                $dfd.reject();
                            }
                        });
                    });
                },
                @*updateAction: '@Url.Action("UpdateTaskTemplateuser", "TaskTemplate")',*@
                updateAction: function (postData) {
                    debugger;
                    postData = postData.replace(/\+/g,' ');
                    var data = postData.split('&');
                    console.log(data)
                    var model = {
                        Id: data[0].split('=', 2)[1],
                        Level:data[1].split('=', 2)[1],
                        UserId:data[2].split('=', 2)[1],
                        IntEndDay:data[3].split('=', 2)[1],
                        IntEndTime:unescape(data[4].split('=', 2)[1]),
                        ExtEndDay:data[5].split('=', 2)[1],
                        ExtEndTime:unescape(data[6].split('=', 2)[1]),
                        IntDuration:data[7].split('=', 2)[1],
                        Extduration:data[8].split('=', 2)[1],
                        TaskId: TaskId,
                        __RequestVerificationToken: $(tokenId).val()
                    };
                    return $.Deferred(function ($dfd) {
                        $.ajax({
                            url: '@Url.Action("UpdateTaskTemplateuser", "TaskTemplate")',
                            type: 'POST',
                            dataType: 'json',
                            data: model,
                            success: function (data) {
                                $dfd.resolve(data);
                            },
                            error: function () {
                                $dfd.reject();
                            }
                        });
                    });
                },

            },

            fields: {


                Id: {
                    title: 'ID',
                    key: true,
                    create: false,
                    edit: false,
                    list: false
                },


                SrNo: {
                    title: 'Sr. No.',
                    create: false,
                    edit: false,
                    width: '5%',
                    sorting: false
                },
                TaskId: {
                    title: 'TaskId',
                    create: false,
                    edit: false,
                    list: false
                },

                Level: {
                    title: 'Level',
                    width: '10%',
                    list: false,
                    edit:false
                },
                Level: {
                    title: 'User Level',
                    width: '10%',
                    edit: true,
                    list: true,

                    dependsOn: 'Level',
                    options: function (data) {

                        if (data.source == 'list') {
                            data.clearCache();

                            return '@Url.Action("GetLevelCaption", "TaskTemplate")' + '?TaskId=' + data.record.TaskId + '$' + '__RequestVerificationToken:' + $(tokenId).val();
                        }
                        if (data.source == 'edit') {
                            data.clearCache();

                            return '@Url.Action("GetLevelCaption", "TaskTemplate")' + '?TaskId=' + data.record.TaskId + '$' + '__RequestVerificationToken:' + $(tokenId).val();
                        }

                    }
                },
                UserId: {
                    title: 'User [LoginId]',
                    width: '20%',
                    edit: true,
                    dependsOn: 'TaskId,Level',
                    options: function (data) {
                        if (data.source == 'list') {
                            return '@Url.Action("ListlevelwiseUsers", "TaskTemplate")' + '?TaskId=' + data.record.TaskId + '&level=' + data.record.Level + '&TaskType=' + Tasktype + '$' + '__RequestVerificationToken:' + $(tokenId).val();
                        }
                        if (data.source == 'edit') {
                            return '@Url.Action("ListlevelwiseUsers", "TaskTemplate")' + '?TaskId=' + data.record.TaskId + '&level=' + data.record.Level + '&TaskType=' + Tasktype + '$' + '__RequestVerificationToken:' + $(tokenId).val();
                        }

                    }

                },
                IntEndDay: {
                    title: 'Internal Due Day',
                    width: '10%',
                    @*options: '@Url.Action("ListWorkDays", "TaskTemplate")',*@
                    options: function (data) {

                        if (data.source == 'list') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }
                        if (data.source == 'edit') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")'+ '?Value=' + data.record.IntEndDay  + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }

                    },
                    edit: true
                },
                IntEndTime: {
                    title: 'Internal Due Time',
                    width: '10%',
                    inputClass: 'validate[funcCall[TimeValidation[]]]'
                },
                ExtEndDay: {
                    title: 'External Due Day',
                    width: '10%',
                    @*options: '@Url.Action("ListWorkDays", "TaskTemplate")',*@
                    options: function (data) {


                        if (data.source == 'list') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }
                        if (data.source == 'edit') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }

                    },
                    edit: true
                },
                ExtEndTime: {
                    title: 'External Due Time',
                    width: '10%',
                    inputClass: 'validate[funcCall[TimeValidation[]]]'
                },

                IntDuration: {
                    title: 'Internal Planned Effort (Hrs)',
                    width: '10%',
                    list: false,
                    edit: true,
                    options: '@Url.Action("Listdurationhrs", "TaskTemplate")'+ '$' + '__RequestVerificationToken:' + $(tokenId).val()
                },

                Extduration: {
                    title: 'External Planned Effort (Hrs)',
                    width: '10%',
                    list: false,
                    edit: true,
                    options: '@Url.Action("Listdurationhrs", "TaskTemplate")'+ '$' + '__RequestVerificationToken:' + $(tokenId).val()
                }
                @*PeriodId: {
                        title: 'Period',
                        width: '10%',
                        options: '@Url.Action("GetPeriodByLocationId", "TaskTemplate")',
                        edit: true,
                        list: false

                    }*@

            },
            //CHILD TABLE DEFINITION FOR "Opco"

            //Initialize validation logic when a form is created
            formCreated: function (event, data) {
                // $('#Edit-Level').prop('readonly', true);
                $('#Edit-UserId').focus();
                $("#Edit-PeriodId").append("<option value='0'>--NA--</option>");
                $('select option:contains("--NA--")').prop('selected', true);

                if (data.formType == 'edit') {
                    $('#Edit-Level option:not(:selected)').attr('disabled', true);
                }
            },
            //Validate form when it is being submitted
            formSubmitting: function (event, data) { return data.form.validationEngine('validate'); },
            //Dispose validation logic when form is closed
            formClosed: function (event, data) { data.form.validationEngine('hide'); data.form.validationEngine('detach'); },

            recordUpdated: function (event, data) {

                $('#divPeriod').jtable('reload');
            },
            recordAdded: function (event, data) {

                $('#divPeriod').jtable('reload');
            },
            rowInserted: function (event, data) {

                //if (data.record.WorkDay == '' || data.record.WorkDay == null) {
                //    var index = data['row'][0]['rowIndex'] - 1;
                //    console.log('decorating row with index: ' + index);
                //    $('#divPeriod').find(".jtable tbody tr:eq(" + index + ")").css({ "background": "#bbb" });

                //}
            },
            recordsLoaded: function (event, data) {

                var SrNo = 0;
                if (data.records) {
                    $.each(data.records, function (index, record) {
                        var row = $('#divPeriod').jtable('getRowByKey', record.Id);
                        SrNo++;
                        row.find('td:eq(0)').text(SrNo);

                    });
                }



            }

        }); // end daily monthly jtable

        //Load and Bind User List to jTable for weekly
        $('#divWeekly').jtable({
            title: 'Task Template',
            paging: false,  //Enables paging
            //messages: {
            //    editRecord: 'Set User & Due Day'
            //},
            //pageSize: 10, //Actually this is not needed since default value is 10.
            actions: {
                @*listAction: '@Url.Action("GetTaskTemplateuser", "TaskTemplate")',*@
                listAction: function (postData, jtParams) {
                    var TaskId = postData.TaskId;
                    var Frequency = postData.Frequency;
                    return $.Deferred(function ($dfd) {
                        $.ajax({
                            url: 'TaskTemplate/GetTaskTemplateuser?TaskId=' + TaskId + '&Frequency=' + Frequency,
                            type: 'POST',
                            dataType: 'json',
                            data: { __RequestVerificationToken: $(tokenId).val() },
                            success: function (data) {
                                $dfd.resolve(data);
                            },
                            error: function () {
                                $dfd.reject();
                            }
                        });
                    });
                },
                //updateAction: '@Url.Action("UpdateTaskTemplateuser", "TaskTemplate")',
                updateAction: function (postData) {
                    postData = postData.replace(/\+/g,' ');
                    var data = postData.split('&');
                    var model = {
                        Id: data[0].split('=', 2)[1],
                        Level:data[1].split('=', 2)[1],
                        UserId:data[2].split('=', 2)[1],
                        IntEndDay:data[3].split('=', 2)[1],
                        IntEndTime:data[4].split('=', 2)[1],
                        ExtEndDay:data[5].split('=', 2)[1],
                        ExtEndTime:data[6].split('=', 2)[1],
                        IntDuration:data[7].split('=', 2)[1],
                        Extduration:data[8].split('=', 2)[1],
                        __RequestVerificationToken: $(tokenId).val()
                    };
                    return $.Deferred(function ($dfd) {
                        $.ajax({
                            url: '@Url.Action("UpdateTaskTemplateuser", "TaskTemplate")',
                            type: 'POST',
                            dataType: 'json',
                            data: model,
                            success: function (data) {
                                $dfd.resolve(data);
                            },
                            error: function () {
                                $dfd.reject();
                            }
                        });
                    });
                },

            },

            fields: {


                Id: {
                    title: 'ID',
                    key: true,
                    create: false,
                    edit: false,
                    list: false
                },


                SrNo: {
                    title: 'Sr. No.',
                    create: false,
                    edit: false,
                    width: '5%',
                    sorting: false
                },
                TaskId: {
                    title: 'TaskId',
                    create: false,
                    edit: false,
                    list: false
                },

                Level: {
                    title: 'Level',
                    width: '10%',
                    list: false,
                    edit: false
                },
                Level: {
                    title: 'User Level',
                    width: '10%',
                    edit: true,
                    list: true,

                    dependsOn: 'Level',
                    options: function (data) {

                        if (data.source == 'list') {
                            data.clearCache();

                            return '@Url.Action("GetLevelCaption", "TaskTemplate")' + '?TaskId=' + data.record.TaskId + '$' + '__RequestVerificationToken:' + $(tokenId).val();
                        }
                        if (data.source == 'edit') {
                            data.clearCache();

                            return '@Url.Action("GetLevelCaption", "TaskTemplate")' + '?TaskId=' + data.record.TaskId + '$' + '__RequestVerificationToken:' + $(tokenId).val();
                        }

                    }
                },

                UserId: {
                    title: 'User',
                    width: '10%',
                    edit: true,
                    dependsOn: 'TaskId,Level',
                    options: function (data) {
                        if (data.source == 'list') {
                            return '@Url.Action("ListlevelwiseUsers", "TaskTemplate")' + '?TaskId=' + data.record.TaskId + '&level=' + data.record.Level + '&TaskType=' + Tasktype + '$' + '__RequestVerificationToken:' + $(tokenId).val();
                        }
                        if (data.source == 'edit') {
                            return '@Url.Action("ListlevelwiseUsers", "TaskTemplate")' + '?TaskId=' + data.record.TaskId + '&level=' + data.record.Level + '&TaskType=' + Tasktype + '$' + '__RequestVerificationToken:' + $(tokenId).val();
                        }

                    }

                },
                W1IntEndDay: {
                    title: 'WK1 Int Due Day',
                    width: '10%',
                    @*options: '@Url.Action("ListWorkDays", "TaskTemplate")',*@
                    options: function (data) {

                        if (data.source == 'list') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")'  + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }
                        if (data.source == 'edit') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")'  + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }

                    },
                    edit: true
                },
                W1IntEndTime: {
                    title: ' WK1 Int Due Time',
                    width: '10%',
                    inputClass: 'validate[funcCall[TimeValidation[]]]',
                    list: false
                },
                W2IntEndDay: {
                    title: 'WK2 Int Due Day',
                    width: '10%',
                    @*options: '@Url.Action("ListWorkDays", "TaskTemplate")',*@
                    options: function (data) {

                        if (data.source == 'list') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }
                        if (data.source == 'edit') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }

                    },
                    edit: true
                },
                W2IntEndTime: {
                    title: ' WK2 Int Due Time',
                    width: '10%',
                    inputClass: 'validate[funcCall[TimeValidation[]]]',
                    list: false
                },
                W3IntEndDay: {
                    title: 'WK3 Int Due Day',
                    width: '10%',
                    @*options: '@Url.Action("ListWorkDays", "TaskTemplate")',*@
                    options: function (data) {

                        if (data.source == 'list') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }
                        if (data.source == 'edit') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }

                    },
                    edit: true
                },
                W3IntEndTime: {
                    title: ' WK3 Int Due Time',
                    width: '10%',
                    inputClass: 'validate[funcCall[TimeValidation[]]]',
                    list: false
                },
                W4IntEndDay: {
                    title: 'WK4 Int Due Day',
                    width: '10%',
                    @*options: '@Url.Action("ListWorkDays", "TaskTemplate")',*@
                    options: function (data) {

                        if (data.source == 'list') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }
                        if (data.source == 'edit') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }

                    },
                    edit: true
                },
                W4IntEndTime: {
                    title: 'WK4 Int Due Time',
                    width: '10%',
                    inputClass: 'validate[funcCall[TimeValidation[]]]',
                    list: false
                },
                W1ExtEndDay: {
                    title: ' WK1 Ext Due Day',
                    width: '10%',
                    @*options: '@Url.Action("ListWorkDays", "TaskTemplate")',*@
                    options: function (data) {


                        if (data.source == 'list') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }
                        if (data.source == 'edit') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }

                    },
                    edit: true,
                    list: false
                },
                W1ExtEndTime: {
                    title: 'WK1 Ext Due Time',
                    width: '10%',
                    inputClass: 'validate[funcCall[TimeValidation[]]]',
                    list: false
                },

                W2ExtEndDay: {
                    title: ' WK2 Ext Due Day',
                    width: '10%',
                    @*options: '@Url.Action("ListWorkDays", "TaskTemplate")',*@
                    options: function (data) {

                        if (data.source == 'list') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }
                        if (data.source == 'edit') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }

                    },
                    edit: true,
                    list: false
                },
                W2ExtEndTime: {
                    title: 'WK2 Ext Due Time',
                    width: '10%',
                    inputClass: 'validate[funcCall[TimeValidation[]]]',
                    list: false
                },


                W3ExtEndDay: {
                    title: 'WK3 Ext Due Day',
                    width: '10%',
                    @*options: '@Url.Action("ListWorkDays", "TaskTemplate")',*@
                    options: function (data) {

                        if (data.source == 'list') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }
                        if (data.source == 'edit') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }

                    },
                    edit: true,
                    list: false
                },
                W3ExtEndTime: {
                    title: 'WK3 Ext Due Time',
                    width: '10%',
                    inputClass: 'validate[funcCall[TimeValidation[]]]',
                    list: false
                },



                W4ExtEndDay: {
                    title: ' WK4 Ext Due Day',
                    width: '10%',
                    @*options: '@Url.Action("ListWorkDays", "TaskTemplate")',*@
                    options: function (data) {

                        if (data.source == 'list') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }
                        if (data.source == 'edit') {
                            data.clearCache();
                            return '@Url.Action("ListWorkDays", "TaskTemplate")' + '$' + '__RequestVerificationToken:' + $(tokenId).val()
                        }

                    },
                    edit: true,
                    list: false
                },
                W4ExtEndTime: {
                    title: 'WK4 Ext Due Time',
                    width: '10%',
                    inputClass: 'validate[funcCall[TimeValidation[]]]',
                    list: false
                },

                IntDuration: {
                    title: 'Internal Holding Hours (Hrs)',
                    width: '10%',
                    list: false,
                    edit: true,
                    options: '@Url.Action("Listdurationhrs", "TaskTemplate")'+ '$' + '__RequestVerificationToken:' + $(tokenId).val()
                },
                Extduration: {
                    title: 'External Holding Hours (Hrs)',
                    width: '10%',
                    list: false,
                    edit: true,
                    options: '@Url.Action("Listdurationhrs", "TaskTemplate")'+ '$' + '__RequestVerificationToken:' + $(tokenId).val()
                }
                @*PeriodId: {
                title: 'Period',
                width: '10%',
                options: '@Url.Action("GetPeriodByLocationId", "TaskTemplate")',
                edit: true,
                list: false

                    }*@

            },
            //CHILD TABLE DEFINITION FOR "Opco"

            //Initialize validation logic when a form is created
            formCreated: function (event, data) {
                $('#Edit-Level').prop('readonly', true);
                $('#Edit-UserId').focus();
                $("#Edit-PeriodId").append("<option value='0'>--NA--</option>");
                $('select option:contains("--NA--")').prop('selected', true);
                if (data.formType == 'edit') {
                    $('#Edit-Level option:not(:selected)').attr('disabled', true);
                }
            },
            //Validate form when it is being submitted
            formSubmitting: function (event, data) { return data.form.validationEngine('validate'); },
            //Dispose validation logic when form is closed
            formClosed: function (event, data) { data.form.validationEngine('hide'); data.form.validationEngine('detach'); },

            recordUpdated: function (event, data) {

                $('#divWeekly').jtable('reload');
            },
            recordAdded: function (event, data) {

                $('#divWeekly').jtable('reload');
            },
            rowInserted: function (event, data) {

                //if (data.record.WorkDay == '' || data.record.WorkDay == null) {
                //    var index = data['row'][0]['rowIndex'] - 1;
                //    console.log('decorating row with index: ' + index);
                //    $('#divPeriod').find(".jtable tbody tr:eq(" + index + ")").css({ "background": "#bbb" });

                //}
            },
            recordsLoaded: function (event, data) {

                var SrNo = 0;
                if (data.records) {
                    $.each(data.records, function (index, record) {
                        var row = $('#divWeekly').jtable('getRowByKey', record.Id);
                        SrNo++;
                        row.find('td:eq(0)').text(SrNo);

                    });
                }



            }

        }); // end jtable weekly
    }


    function MarkOFFWD(id) {
        var tokenId = '@Html.AntiForgeryToken()';
        $.ajax({
            url: '@Url.Action("MarkActiveDeactive", "TaskTemplate")',
            type: 'POST',
            cache: false,
            data: {
                Id: id ,
                __RequestVerificationToken : $(tokenId).val()
            },
            success: function (data) {

                // var PeriodID = data.Records;
                $('#divFinYear').jtable('load', { TeamId: $('#Team :selected').val(), Locationid: $('#Location :selected').val() });

            }
        });

    }
</script>
