@model ECloseWebApp.Models.ViewModelForBusinessUnitDD
@using ECloseWebApp.BuisnessEntities;
@using ECloseBL.Entities;
@{
    ViewBag.Title = "TeamTaskDetailsReport";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    path {
        fill: none;
        stroke: black;
    }

    body {
        background: #fff;
    }
</style>
<style>
    table {
        font-family: arial, sans-serif;
        font-size: small;
        border-collapse: collapse;
        width: 100%;
    }

    td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #dddddd;
    }

    .table > tbody > tr > td, .table > tbody > tr > th, .table > tfoot > tr > td, .table > tfoot > tr > th, .table > thead > tr > td, .table > thead > tr > th, .table td {
        padding: 3px !important;
    }
</style>

<link href="~/Content/jquery.dataTables.min.css" rel="stylesheet" />
<script src="~/Scripts/d3.v3.min.js"></script>
<link href="https://cdn.datatables.net/1.10.16/css/jquery.dataTables.min.css" rel="stylesheet" />
<script type="text/javascript" language="javascript" src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.js"></script>
<script src="~/Scripts/jspdf.min.js"></script>
<script src="~/Scripts/d3.v3.min.js"></script>

<script src="~/Scripts/jquery-1.12.4.js"></script>
<script src="~/Scripts/jquery.dataTables.min.js"></script>

@if (Model != null)
{
    <div class="panel panel-white m-t-sm  " id="divDiscard">
        <div class="panel-body row">

            <br />
            <br />
            <div class="col-md-4">
                <div class="form-group no-m">
                    <label>
                        Location :
                    </label>
                    @Html.DropDownListFor(m => m.Location, Model.Location, new { @class = "form-control", placeholder = "Select Location" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group  no-m">
                    <label>
                        Period :
                    </label>
                    @Html.DropDownListFor(m => m.Period, Model.Period, new { @class = "form-control", placeholder = "Select Period" })
                </div>
            </div>
        </div>
        <div class="panel-footer">
            <div class="col-md-6">
                <label class="radio-inline"><input type="radio" value="2" id="TaskType" name="TaskType" checked="checked">All Task</label>
                <label class="radio-inline"><input type="radio" value="0" id="TaskType" name="TaskType">Dependent Task</label>
                <label class="radio-inline"><input type="radio" value="1" id="TaskType" name="TaskType">Independent Task</label>
            </div>
            <button id="btnReport" class="btn btn-primary" onclick="updateDate()">Generate Graph</button>
            <button type="button" id="create_pdf" value="Generate PDF" class="btn btn-primary">Generate PDF</button>


        </div>
        <div class="panel-body row" style="width:auto">

            <table id="tblTaskRecord" class="table table-striped table-bordered dt-responsive nowrap hidden" style="width:100%">
                <thead>
                    <tr>
                        <th>TaskId</th>
                        <th>TaskName</th>
                        <th>TaskDuedate</th>
                        <th>Dependent TaskId</th>
                        <th>Dependent Task Duedate</th>
                        <th>Dependent TaskName</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>

        </div>
        <div class="panel-body row">
            <div id="wrapper" align="center">
            </div>
        </div>
    </div>
}
<script src="~/Scripts/jquery.dataTables.min.js"></script>

<script>

    (function () {
        var
            form = $('#divDiscard');
        cache_width = form.width(),
                a2 = [850, 1200]; // for a4 size paper width and height

        $('#create_pdf').on('click', function () {
            $('body').scrollTop(0);
            createPDF();
        });
        //create pdf
        function createPDF() {
            getCanvas().then(function (canvas) {
                var
                    img = canvas.toDataURL("image/png"),
                        pdf = new jsPDF('p', 'pt', 'A4');
                var options = {
                    pagesplit: true
                };

                var width = pdf.internal.pageSize.width;
                var height = pdf.internal.pageSize.height;
                pdf.addImage(canvas, 'JPEG', 0, 0, width, height);
                pdf.save('test11.pdf');

                form.width(cache_width);
            });
        }

        // create canvas object
        function getCanvas() {
            form.width((a2[0] * 1.33333) - 80).css('max-width', 'none');
            return html2canvas(form, {
                margin: 1,
                filename: 'myfile.pdf',
                image: { type: 'jpeg', quality: 1 },
                html2canvas: { scale: 2, logging: true },
                jsPDF: { unit: 'in', format: 'a4', orientation: 'l' }
            });
        }

    }());
</script>
<script>

    /*
 * jQuery helper plugin for examples and tests
 */
    (function ($) {
        $.fn.html2canvas = function (options) {
            var date = new Date(),
            $message = null,
            timeoutTimer = false,
            timer = date.getTime();
            html2canvas.logging = options && options.logging;
            html2canvas.Preload(this[0], $.extend({
                complete: function (images) {
                    var queue = html2canvas.Parse(this[0], images, options),
                    $canvas = $(html2canvas.Renderer(queue, options)),
                    finishTime = new Date();

                    $canvas.css({ position: 'absolute', left: 0, top: 0 }).appendTo(document.body);
                    $canvas.siblings().toggle();

                    $(window).click(function () {
                        if (!$canvas.is(':visible')) {
                            $canvas.toggle().siblings().toggle();
                            throwMessage("Canvas Render visible");
                        } else {
                            $canvas.siblings().toggle();
                            $canvas.toggle();
                            throwMessage("Canvas Render hidden");
                        }
                    });
                    throwMessage('Screenshot created in ' + ((finishTime.getTime() - timer) / 1000) + " seconds<br />", 4000);
                }
            }, options));

            function throwMessage(msg, duration) {
                window.clearTimeout(timeoutTimer);
                timeoutTimer = window.setTimeout(function () {
                    $message.fadeOut(function () {
                        $message.remove();
                    });
                }, duration || 2000);
                if ($message)
                    $message.remove();
                $message = $('<div ></div>').html(msg).css({
                    margin: 0,
                    padding: 10,
                    background: "#000",
                    opacity: 0.0,
                    position: "fixed",
                    top: 10,
                    right: 10,
                    fontFamily: 'Tahoma',
                    color: '#fff',
                    fontSize: 12,
                    borderRadius: 12,
                    width: 'auto',
                    height: 'auto',
                    textAlign: 'center',
                    textDecoration: 'none'
                }).hide().fadeIn().appendTo('body');
            }
        };
    })(jQuery);

</script>


<script type="text/javascript">
    $('#divFilter').hide();
    $('#Location').change(function () {
        var locationId = $(this).val();
        $.ajax({
            url: '@Url.Action("GetPeriodNTeamByLocationId", "Location")',
            data: { locationId: locationId },
            type: "Get",
            contentType: "application/json",
            success: function (data) {
                $("#Period").empty();
                $.each(data.Records.Period, function (index, value) {
                    $("#Period").append("<option value='" + value.Value + "'>" + value.Text + "</option>");
                });
            }
        });
    });
</script>

<script type="text/javascript">
    function updateDate() {

        var colorData = [];
        //here add a filter
        if ($('#Location').val() != "0" && $('#Period').val() != "0") {
            var Period = $('#Period').val();
            var locationId = $('#Location').val();

            var chart = d3.select("#wrapper");
            chart.selectAll("svg").remove();

            d3.json('Report/Graphdata?LocationId=' + locationId + '&PeriodId=' + Period + '&TaskType=' + $("input[name='TaskType']:checked").val(), function (data) {
                console.log(data);

                if (data != null || data.empty == true) {
                    var Data = JSON.parse(data);

                    console.log(Data);
                    if (Data.length == 0) {
                        Command: toastr["error"]("Record Not Present related Location and Period ");
                        $("#tblTaskRecord").clear();
                        //$("#tblTaskRecord").removeClass("hidden");

                        return false;
                    }
                    else {
                        //lagend TeamNames
                        var TeamNames = [];
                        var TaskEndDates = [];

                        var rows = ""
                        $.each(Data, function (index, value) {
                            if ((value.TaskTitle == value.DependantTaskName && value.TaskId == value.DependsOnWorkbasketTaskId) || TaskType == true) {
                                value.DependantTaskName = "";
                                value.DependsOnWorkbasketTaskId = "";
                                value.DependantTaskDate = "";
                            }

                            if (value.DependsOnWorkbasketTaskId != "") {
                                if (value.DependsOnWorkbasketTaskId == null) {
                                    value.DependantTaskName = "";
                                    value.DependsOnWorkbasketTaskId = "";
                                    value.DependantTaskDate = "";
                                }
                            }
                            if ($.inArray(value.TeamName, TeamNames) == -1) {
                                TeamNames.push(value.TeamName);
                            }

                            if ($.inArray(value.TaskDate, TaskEndDates) == -1) {
                                TaskEndDates.push(value.TaskDate);
                            }
                        });

                        //$.each(Data, function (index, value) {
                        //    if (value.DependsOnWorkbasketTaskId != "") {
                        //        if (value.DependsOnWorkbasketTaskId == null) {
                        //            value.DependantTaskName = "";
                        //            value.DependsOnWorkbasketTaskId = "";
                        //            value.DependantTaskDate = "";
                        //        }

                        //    }
                        //    if ($.inArray(value.TeamName, TeamNames) == -1) {
                        //        TeamNames.push(value.TeamName);
                        //    }

                        //    if ($.inArray(value.TaskDate, TaskEndDates) == -1) {
                        //        TaskEndDates.push(value.TaskDate);
                        //    }

                        //});

                        var table = $('#tblTaskRecord');
                        table.empty;
                        $(function () {
                            table.removeClass("hidden");
                            var GridTable = table.dataTable({
                                destroy: true,
                                searching: true,
                                paging: false,
                                filter: true, // this is for disable filter (search box)
                                orderMulti: true, // for disable multiple column at once
                                pageLength: 1000,
                                bJQueryUI: true,
                                aaData: Data,
                                aoColumns: [
                                        { mData: 'TaskId', autoWidth: true },
                                        { mData: 'TaskTitle', autoWidth: true },
                                        { mData: 'TaskDate', autoWidth: true },
                                        { mData: 'DependsOnWorkbasketTaskId', autoWidth: true },
                                        { mData: 'DependantTaskDate', autoWidth: true },
                                        { mData: 'DependantTaskName', autoWidth: true }
                                ]
                            });
                        });


                        var sorted = TaskEndDates.sort();
                        var minDate = sorted[0];
                        var maxDate = sorted[sorted.length - 1];
                        var format = d3.time.format("%Y-%m-%d");
                        minDate = minDate.split('T')[0];
                        maxDate = maxDate.split('T')[0];

                        console.log(minDate);
                        console.log(maxDate);

                        // x axis scal min and maximum Data ...if you to do this dynamaic send the Data for json assign here

                        var dateMin = new Date();
                        var dateMax = new Date();
                        dateMax = format.parse(maxDate);
                        dateMin = format.parse(minDate);
                        var margin = {
                            top: 20,
                            right: 20,
                            bottom: 30,
                            left: 10
                        },
                            width = 850 - margin.left - margin.right,
                            height = 950 - margin.top - margin.bottom;
                        //add for teamwise color legend  TODO : need to working

                        dateMin.setDate(dateMin.getDate() - 1);
                        var newMinDate = dateMin.toDateString();
                        newMinDate = new Date(Date.parse(newMinDate));


                        dateMax.setDate(dateMax.getDate());
                        var newMaxDate = dateMax.toDateString();
                        newMaxDate = new Date(Date.parse(newMaxDate));


                        ///
                        var xValue = function (d) {
                            return format.parse(d.TaskDate);
                        }, // Data -> value

                            xScale = d3.time.scale().domain([dateMin, dateMax]).range([0, width], 3.5), // value -> display
                            xMap = function (d) {

                                return xScale(xValue(d));
                            }, // Data -> display
                            xAxis = d3.svg.axis().scale(xScale).orient("bottom");
                        var yValue = function (d) {
                            return d.TaskNumber;
                        }, // Data -> value
                            yScale = d3.scale.linear().range([height, 0]), // value -> display
                            yMap = function (d) {
                                return yScale(yValue(d));
                            }, // Data -> display
                            yAxis = d3.svg.axis().scale(yScale).orient("left");
                        // setup fill color
                        var cValue = function (d) {
                            return d.ownership;
                        },
                            color = d3.scale.category10();

                        // add the graph canvas to the body of the webpage
                        var svg = d3.select("#wrapper").append("svg")
                            .attr("width", width + margin.left + margin.right)
                            .attr("height", height + margin.top + margin.bottom)
                            .append("g")
                            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                        svg.append("rect")
                           .attr("width", "100%")
                           .attr("height", "100%")
                           .attr("fill", "#F7F7F7");

                        // add the tooltip area to the webpage
                        var tooltip = d3.select("#wrapper").append("div")
                            .attr("class", "tooltip")
                            .style("opacity", 0);

                        // don't want dots overlapping axis, so add in buffer to Data domain

                        xScale.domain([dateMin, dateMax]);
                        yScale.domain([d3.min(Data, yValue) - 1, d3.max(Data, yValue) + 10]);

                        //x-axis name
                        svg.append("g")
                            .attr("class", "x axis")
                            .attr("transform", "translate(0," + height + ")")
                            .call(xAxis)
                            .append("text")
                            .attr("class", "label")
                            .attr("x", width)
                            .attr("y", -6)
                            .style("text-anchor", "end")
                            .text("Task End Date");

                        // y-axis name
                        svg.append("g")
                            .attr("class", "y axis")
                            .call(yAxis)
                            .append("text")
                            .attr("class", "label")
                            .attr("transform", "rotate(-90)")
                            .attr("y", 6)
                            .attr("dy", ".71em")
                            .style("text-anchor", "end");
                        //.text();

                        // draw dots

                        svg.selectAll(".dot")
                            .data(Data)
                            .enter().append("circle")
                            .attr("class", "dot")
                            .attr("r", 3.5)
                            .attr("cx", xMap)
                            .attr("cy", yMap)
                            .style("fill", function (d) {
                                return color(d.extra);
                            })
                            .append("title")
                            .text(function (d) {
                                var listOfvalueDependsOnWorkbasketTaskId = "";
                                if (d.DependsOnWorkbasketTaskId != "") {
                                    listOfvalueDependsOnWorkbasketTaskId = d.DependsOnWorkbasketTaskId + ", ";
                                }

                                $.each(Data, function (indexCheack, valueCheack) {
                                    if (d.TaskId == valueCheack.TaskId && d.DependsOnWorkbasketTaskId != valueCheack.DependsOnWorkbasketTaskId) {
                                        listOfvalueDependsOnWorkbasketTaskId = listOfvalueDependsOnWorkbasketTaskId + valueCheack.DependsOnWorkbasketTaskId + ", ";
                                    }
                                })

                                if (d.TaskId == d.DependsOnWorkbasketTaskId && d.TaskTitle == d.DependantTaskName) {
                                    d.DependsOnWorkbasketTaskId = "";
                                    d.DependantTaskName = "";
                                }
                                return ("(" + d.TaskId + ") " + d.TaskTitle + "(" + d.TaskDate + ") DependentTaskID:-" + listOfvalueDependsOnWorkbasketTaskId)
                            })
                             .on("mouseout", function (d) {
                                 tooltip.transition()
                                     .duration(500)
                                     .style("opacity", 0);
                             })
                            .attr('data-title', function (e) {
                                return e.TaskTitle;
                            })
                            .attr('data-value', function (e) {
                                return e.TaskNumber;
                            })
                            .attr('data-date', function (e) {
                                return e.TaskDate;
                            })
                            .attr('data-sqft', function (e) {
                                return e.extra;
                            });

                        //draw line
                        for (var item in Data) {


                            if (Data[item]["DependsOnWorkbasketTaskId"] != "") {
                                svg.append("line")
                                    .attr("x1", xScale(format.parse(Data[item]["TaskDate"])))
                                    .attr("y1", yScale(Data[item]["TaskNumber"]))
                                    .attr("x2", xScale(format.parse(Data[item]["DependantTaskDate"])))
                                    .attr("y2", yScale(Data[item]["DependantTaskNumber"]))
                                    .attr("stroke-width", 1)
                                    .attr("stroke", Data[item]["color"]);
                            }
                        }

                        // draw legend
                        var legend = svg.selectAll(".legend")
                            .data(color.domain())
                            .enter().append("g")
                            .attr("class", "legend")
                            .attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });

                        // draw legend colored rectangles
                        legend.append("rect")
                            .attr("x", width - 18)
                            .attr("width", 18)
                            .attr("height", 18)
                            .style("fill", color);

                        // draw legend text
                        legend.append("text")
                            .attr("x", width - 24)
                            .attr("y", 9)
                            .attr("dy", ".35em")
                            .style("text-anchor", "end")
                            .text(function (d) {
                                return (TeamNames[d]);
                            })
                    }
                }
                else {
                    Command: toastr["error"](data.Message);
                    return false;
                }
            })
        }
        else {
            Command: toastr["error"]("Please Select Location and Period");
            return false;
        }
    };
</script>
