{\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red255\green0\blue0;}
{\*\generator Msftedit 5.41.21.2510;}\viewkind4\uc1\pard\sa200\sl276\slmult1\lang9\f0\fs22\par
        public \cf1 IEnumerable<TaskInfo>\cf0  GetTaskTimelineChartReport(int LocationId, int PeriodId, int tenantId, int IndependentTask)\par
        \{\par
            eClose_TestingEntities context = new eClose_TestingEntities();\cf1\par
            IEnumerable<TaskInfo> taskList;\par
            IEnumerable<TaskInfo> dependandantTaskList;\par
            List<TaskInfo> combineList = new List<TaskInfo>();\par
            List<TaskInfo> finalList = new List<TaskInfo>();\cf0\par
\par
            //Check the dependant and Independant task \par
            if (IndependentTask == 1)\par
            \{\par
                \cf1 taskList \cf0 = (from WorkbasketTask in context.WorkbasketTasks\par
                              join DependetWorkbasketTask in context.DependetWorkbasketTasks\par
                              on WorkbasketTask.Id equals DependetWorkbasketTask.WorkbasketTaskId into DependetWorkInfo\par
                              from DependetWorkbasketTask in DependetWorkInfo.DefaultIfEmpty()\par
                              join Period in context.Periods\par
                             on WorkbasketTask.PeriodId equals Period.Id\par
                              join Team in context.Teams\par
                              on WorkbasketTask.TeamId equals Team.Id\par
                              join WorkbasketTaskUsers in context.WorkbasketTaskUsers\par
                              on WorkbasketTask.Id equals WorkbasketTaskUsers.WorkbasketTaskId\par
                              where WorkbasketTask.PeriodId == 94 && DependetWorkbasketTask.DependsOnWorkbasketTaskId == null\par
                               && Period.LocationId == 172\par
                              //106 \par
                              //                              where (Period.LocationId == LocationId) && (Period.Id == PeriodId) && (WorkbasketTask.TenantId == tenantId)\par
                              group WorkbasketTaskUsers by new\par
                              \{\par
                                  //    WorkbasketTaskUsers.EndDateInt,\par
                                  WorkbasketTask.Id,\par
                                  DependetWorkbasketTask.DependsOnWorkbasketTaskId,\par
                                  WorkbasketTask.TaskName,\par
                                  Team.TeamName\par
                              \} into gcs\par
                              let topp = gcs.Max(x => x.WFLevel)\par
                              select new TaskInfo\par
                              \{\par
                                  //TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,\par
                                  TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,\par
                                  TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,\par
                                  WorkbasketTaskId = (gcs.Key.Id == null) ? 0 : gcs.Key.Id,\par
                                  DependsOnWorkbasketTaskId = gcs.Key.DependsOnWorkbasketTaskId,\par
                                  WFLevel = topp,\par
                                  // EndDateInt = gcs.Max(x => (gcs.Key.EndDateInt == null) ? DateTime.Today : gcs.Key.EndDateInt),\par
                                  value = 0,\par
                                  extra = "",\par
                                  IsDependantTask = false\par
                              \}).ToList<TaskInfo>();\par
            \}\par
            else if (IndependentTask == 0)\par
            \{\par
                \cf1 taskList \cf0 = (from WorkbasketTask in context.WorkbasketTasks\par
                              join DependetWorkbasketTask in context.DependetWorkbasketTasks\par
                              on WorkbasketTask.Id equals DependetWorkbasketTask.WorkbasketTaskId into DependetWorkInfo\par
                              from DependetWorkbasketTask in DependetWorkInfo.DefaultIfEmpty()\par
                              join Period in context.Periods\par
                              on WorkbasketTask.PeriodId equals Period.Id\par
                              join Team in context.Teams\par
                              on WorkbasketTask.TeamId equals Team.Id\par
                              join WorkbasketTaskUsers in context.WorkbasketTaskUsers\par
                              on WorkbasketTask.Id equals WorkbasketTaskUsers.WorkbasketTaskId\par
                              where WorkbasketTask.PeriodId == 94 && DependetWorkbasketTask.DependsOnWorkbasketTaskId != null   //106 \par
                               && Period.LocationId == 172  //                              where (Period.LocationId == LocationId) && (Period.Id == PeriodId) && (WorkbasketTask.TenantId == tenantId)\par
                              group WorkbasketTaskUsers by new\par
                              \{\par
                                  //    WorkbasketTaskUsers.EndDateInt,\par
                                  WorkbasketTask.Id,\par
                                  DependetWorkbasketTask.DependsOnWorkbasketTaskId,\par
                                  WorkbasketTask.TaskName,\par
                                  Team.TeamName\par
                              \} into gcs\par
                              let topp = gcs.Max(x => x.WFLevel)\par
                              select new TaskInfo\par
                              \{\par
                                  //TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,\par
                                  TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,\par
                                  TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,\par
                                  WorkbasketTaskId = (gcs.Key.Id == null) ? 0 : gcs.Key.Id,\par
                                  DependsOnWorkbasketTaskId = gcs.Key.DependsOnWorkbasketTaskId,\par
                                  WFLevel = topp,\par
                                  // EndDateInt = gcs.Max(x => (gcs.Key.EndDateInt == null) ? DateTime.Today : gcs.Key.EndDateInt),\par
                                  value = 0,\par
                                  extra = "",\par
                                  IsDependantTask = false\par
                              \}).ToList<TaskInfo>();\par
            \}\par
            else\par
            \{\par
                \cf1 taskList \cf0 = (from WorkbasketTask in context.WorkbasketTasks\par
                              join DependetWorkbasketTask in context.DependetWorkbasketTasks\par
                              on WorkbasketTask.Id equals DependetWorkbasketTask.WorkbasketTaskId into DependetWorkInfo\par
                              from DependetWorkbasketTask in DependetWorkInfo.DefaultIfEmpty()\par
                              join Period in context.Periods\par
                              on WorkbasketTask.PeriodId equals Period.Id\par
                              join Team in context.Teams\par
                              on WorkbasketTask.TeamId equals Team.Id\par
                              join WorkbasketTaskUsers in context.WorkbasketTaskUsers\par
                              on WorkbasketTask.Id equals WorkbasketTaskUsers.WorkbasketTaskId\par
                              where WorkbasketTask.PeriodId == 94  //106 \par
                               && Period.LocationId == 172  //                              where (Period.LocationId == LocationId) && (Period.Id == PeriodId) && (WorkbasketTask.TenantId == tenantId)\par
                              group WorkbasketTaskUsers by new\par
                              \{\par
                                  //    WorkbasketTaskUsers.EndDateInt,\par
                                  WorkbasketTask.Id,\par
                                  DependetWorkbasketTask.DependsOnWorkbasketTaskId,\par
                                  WorkbasketTask.TaskName,\par
                                  Team.TeamName\par
                              \} into gcs\par
                              let topp = gcs.Max(x => x.WFLevel)\par
                              select new TaskInfo\par
                              \{\par
                                  //TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,\par
                                  TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,\par
                                  TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,\par
                                  WorkbasketTaskId = (gcs.Key.Id == null) ? 0 : gcs.Key.Id,\par
                                  DependsOnWorkbasketTaskId = gcs.Key.DependsOnWorkbasketTaskId,\par
                                  WFLevel = topp,\par
                                  // EndDateInt = gcs.Max(x => (gcs.Key.EndDateInt == null) ? DateTime.Today : gcs.Key.EndDateInt),\par
                                  value = 0,\par
                                  extra = "",\par
                                  IsDependantTask = false\par
                              \}).ToList<TaskInfo>();\par
            \}\par
\par
            IEnumerable<int?> WorkbasketTaskIdList = taskList.Select(t => t.WorkbasketTaskId);\par
            IEnumerable<int?> DependsOnWorkbasketTaskIdList = taskList.Where(x => !WorkbasketTaskIdList.Contains(x.DependsOnWorkbasketTaskId)).Select(t => t.DependsOnWorkbasketTaskId);\par
\par
            \cf1 dependandantTaskList \cf0 = (from WorkbasketTask in context.WorkbasketTasks\par
                          join Period in context.Periods\par
                          on WorkbasketTask.PeriodId equals Period.Id into Periodinfo\par
                          join Team in context.Teams\par
                          on WorkbasketTask.TeamId equals Team.Id into Teaminfo\par
                          from Team in Teaminfo.DefaultIfEmpty()\par
                          join WorkbasketTaskUsers in context.WorkbasketTaskUsers\par
                          on WorkbasketTask.Id equals WorkbasketTaskUsers.WorkbasketTaskId into WorkbasketTaskUsersinfo\par
                          from WorkbasketTaskUsers in WorkbasketTaskUsersinfo.DefaultIfEmpty()\par
                          join record in DependsOnWorkbasketTaskIdList\par
                          on WorkbasketTask.Id equals record\par
                          group WorkbasketTaskUsers by new\par
                          \{\par
                              // WorkbasketTaskUsers.EndDateInt,\par
                              WorkbasketTask.Id,\par
                              WorkbasketTask.TaskName,\par
                              Team.TeamName\par
                          \} into gcs\par
                          let topp = gcs.Max(x => x.WFLevel)\par
                          select new TaskInfo\par
                          \{\par
                              //TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,\par
                              TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,\par
                              TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,\par
                              WorkbasketTaskId = (gcs.Key.Id == null) ? 0 : gcs.Key.Id,\par
                              DependsOnWorkbasketTaskId = (gcs.Key.Id == null) ? 0 : gcs.Key.Id,\par
                              //  EndDateInt = gcs.Max(x => (gcs.Key.EndDateInt == null) ? DateTime.Today : gcs.Key.EndDateInt),\par
                              WFLevel = topp,\par
                              value = 0,\par
                              extra = "",\par
                              IsDependantTask = true\par
                          \}).ToList<TaskInfo>();\par
\par
   \cf1          combineList.AddRange(taskList);\par
            finalList.AddRange(dependandantTaskList);\par
\par
\cf0             var userDetaqils = context.WorkbasketTaskUsers;\par
\par
            try\par
            \{\par
                foreach (var task in \cf1 finalList\cf0 )\par
                \{\par
\par
                    var _taskList = context.WorkbasketTaskUsers.Where(x => x.WorkbasketTaskId == task.WorkbasketTaskId && x.WFLevel == task.WFLevel && x.EndDateInt != null);\par
                    DateTime? taskDate = new DateTime();\par
                    int _maxWLevel = 0;\par
                    int _maxWorkDay = 0;\par
                    if (_taskList.Count() == 0)\par
                    \{\par
                        var listForFindMaxLevel = (from u in context.WorkbasketTaskUsers\par
                                                   where\par
                                                        (u.WorkbasketTaskId == task.WorkbasketTaskId\par
                                                         && u.EndDateInt != null)\par
                                                   select new\par
                                                   \{ WFLevel = u.WFLevel == null ? 0 : u.WFLevel \}).ToList();\par
                        //  var _maxWLevel = context.WorkbasketTaskUsers.Where(x => x.WorkbasketTaskId == task.WorkbasketTaskId && task.EndDateInt != null).Max(x => x.WFLevel);\par
\par
                        if (listForFindMaxLevel.Count > 0)\par
                            _maxWLevel = listForFindMaxLevel.Max(x => x.WFLevel);\par
\par
\par
\par
                        if (_maxWLevel != 0)\par
                        \{\par
                            taskDate = context.WorkbasketTaskUsers.Where(x => x.WorkbasketTaskId == task.WorkbasketTaskId && x.WFLevel == _maxWLevel).First().EndDateInt;\par
                        \}\par
                        else\par
                        \{\par
                            var listWorkDay = context.PeriodDays.Where(x => x.Id == PeriodId).Select(x => x.WorkDay).ToList();\par
\par
                            _maxWorkDay = listWorkDay.Count() > 0 ? listWorkDay.Max(x => x.Value) : 0;\par
\par
                            taskDate = context.PeriodDays.Where(x => x.Id == PeriodId && x.WorkDay == _maxWorkDay).FirstOrDefault().CalenderDate;\par
                        \}\par
                    \}\par
                    task.EndDateInt = _taskList.Count() == 0 ? taskDate : _taskList.FirstOrDefault().EndDateInt;\par
            \cf1         finalList.Add(task);\par
\cf0                 \}\par
            \}\par
            catch (Exception ex)\par
            \{\par
\par
            \}\cf1\par
            return (finalList);\cf0\par
\par
\par
        \}\par
\par
}
 