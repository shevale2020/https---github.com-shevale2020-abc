using ECloseBL.Entities;
using ECloseWebApp.BuisnessEntities;
using ECloseWebApp.HelperClasses;
using ECloseWebApp.Models;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Web.Mvc;
using eCloseDataAccessLayer.HelperClasses;

namespace ECloseWebApp.Controllers
{
    /// <summary>
    /// Workbasket controller class for workbasket Operations
    /// </summary>
    [HandleExceptionsAttribute]
    public class WorkbasketController : Controller
    {
        WorkbasketClass cls = new WorkbasketClass();
        log4net.ILog logger = log4net.LogManager.GetLogger(typeof(LoginController));  //Declaring Log4Net 

        [CustomAuthorization(Enums.Role.Reviewer, Enums.Role.Preparer, Enums.Role.Supervisor)]
        [HttpGet]
        public ActionResult Index()
        {
            return View();
        }

        #region "Workbasket"
        /// <summary>
        /// get  trans data which is assigned to logined user 
        /// </summary>
        /// <param name="taskName">Task Name.</param>
        /// <param name="jtStartIndex">Start Index for records</param>
        /// <param name="jtPageSize">No. of records</param>
        /// <param name="jtSorting">sorting field</param>
        /// <returns>json object</returns>

        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.Supervisor, Enums.Role.Preparer, Enums.Role.Reviewer)]
        public JsonResult GetWorkbasketItems(string taskName, int jtStartIndex, int jtPageSize, string jtSorting)
        {
            taskName = "Perform remeasurement for FS presentation purposes (JEV should auto reverse on the first of next ---";
            try
            {
                if (null == SessionWrapper.UserEntity)
                    return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
                UserEntity user = SessionWrapper.UserEntity;
                user.TenantId = SessionWrapper.TenantId;

                var workitemsList = cls.GetWorkitems(user.TenantId, taskName, jtStartIndex, jtPageSize, jtSorting, user.UserID, user.UserRole.RoleName);
                foreach (var w in workitemsList)
                {
                    if (SessionWrapper.TenantDateFormat == Constants.USFormat)
                    {
                        w.FormattedEndDateInt = Convert.ToDateTime(w.EndDateInt != null ? w.EndDateInt.ToString() : null).ToString("MM/dd/yyyy");
                    }
                    else
                        if (SessionWrapper.TenantDateFormat == Constants.UKFormat)
                    {
                        w.FormattedEndDateInt = Convert.ToDateTime(w.EndDateInt != null ? w.EndDateInt.ToString() : null).ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        w.FormattedEndDateInt = Convert.ToDateTime(w.EndDateInt != null ? w.EndDateInt.ToString() : null).ToString("dd-MMM-yyyy");
                    }
                }
                if (jtPageSize == 0)
                {
                    FileHelper helper = new FileHelper();
                    var tasks = workitemsList.Select(a => new { Id = a.Id, Title = a.TaskName, Team = a.TeamName, Period = a.PeriodName, Status = a.Status, Current_Level = a.TaskAtLevelText, Due_By = a.FormattedEndDateInt, Next_Approver = a.NextApprover, Priority = a.Priority }).ToList();
                    helper.ToExcel(Response, tasks, Enums.ReportName.Tasks.ToString());
                    return null;
                }
                else
                    return Json(new { Result = "OK", Records = workitemsList, TotalRecordCount = workitemsList.Count > 0 ? workitemsList[0].TotalRecords : 0 });
            }
            catch (Exception ex) { logger.Error(ex.ToString()); return Json(new { Result = "ERROR", Message = ex.Message }); }
        }
        /// <summary>
        /// Get Workitems By Filters 
        /// </summary>
        /// <param name="jtStartIndex">Start Index for records</param>
        /// <param name="jtPageSize">No. of records</param>
        /// <param name="jtSorting">sorting field</param>
        /// <param name="teamId">teamId</param>
        /// <param name="periodId">periodId</param>
        /// <param name="statusRequired">status Required</param>
        ///  <param name="statusNotRequired">status not Required</param>
        /// <returns>json object</returns>

        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin, Enums.Role.Supervisor)]
        public JsonResult GetWorkitemsByFilters(int jtStartIndex, int jtPageSize, string jtSorting, int teamId = 0, int periodId = 0, string statusRequired = "", string statusNotRequired = "", int levelRequired = -1, int locationId = 0, int priorityId = 0, string TaskName = null)
        {
            try
            {
                if (null == SessionWrapper.UserEntity)
                    return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });

                var workitemsList = cls.GetWorkitemsByFilters(SessionWrapper.TenantId, jtStartIndex, jtPageSize, jtSorting, teamId, periodId, statusRequired, statusNotRequired, levelRequired, locationId, SessionWrapper.UserId, SessionWrapper.UserRole, priorityId, TaskName);

                return Json(new { Result = "OK", Records = workitemsList, TotalRecordCount = workitemsList.Count > 0 ? workitemsList[0].TotalRecords : 0 });
            }
            catch (Exception ex) { logger.Error(ex.ToString()); return Json(new { Result = "ERROR", Message = ex.Message }); }
        }

        /// <summary>
        /// renders view for Geting Tasks To Discard
        /// </summary>
        [CustomAuthorization(Enums.Role.TenantAdmin, Enums.Role.Supervisor)]
        [Route("Discard")]
        public ActionResult GetTasksToDiscard()
        {
            return View();
        }
        #endregion

        #region "Action history for Workbasket"
        /// <summary>
        ///Get Action Log By WorkbasketTask Id
        /// </summary>
        /// <param name="workbasketTaskId">Workbasket TaskId</param>
        /// <param name="jtStartIndex">Start Index for records</param>
        /// <param name="jtPageSize">No. of records</param>
        /// <returns>json object</returns>
        /// 
        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.Reviewer,Enums.Role.TenantAdmin, Enums.Role.Preparer, Enums.Role.Supervisor)]
        public JsonResult GetActionLogByWorkbasketTaskId(int workbasketTaskId, int jtStartIndex=0, int jtPageSize=10)
        {
            workbasketTaskId = 2185;
            try
            {
                var actionLog = cls.GetActionLogByWorkbasketTaskId(workbasketTaskId, jtStartIndex, jtPageSize, SessionWrapper.LoginId);

                foreach (var a in actionLog)
                {
                    if (SessionWrapper.TenantDateFormat == Constants.USFormat)
                    {
                        a.FormattedActionedOn = Convert.ToDateTime(a.ActionedOn != null ? a.ActionedOn.ToString() : null).ToString("MM/dd/yyyy");
                    }
                    else
                        if (SessionWrapper.TenantDateFormat == Constants.UKFormat)
                    {
                        a.FormattedActionedOn = Convert.ToDateTime(a.ActionedOn != null ? a.ActionedOn.ToString() : null).ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        a.FormattedActionedOn = Convert.ToDateTime(a.ActionedOn != null ? a.ActionedOn.ToString() : null).ToString("dd-MMM-yyyy");
                    }
                }
                return Json(new { Result = "OK", Records = actionLog, TotalRecordCount = actionLog.Count > 0 ? actionLog[0].TotalRecords : 0 });
            }
            catch (Exception ex) { logger.Error(ex.ToString()); return Json(new { Result = "ERROR", Message = ex.Message }); }
        }
        #endregion

        #region "User Dashboard"
        //[CustomAuthorization(Enums.Role.Reviewer, Enums.Role.Preparer)]
        //public PartialViewResult GetDashboardData()
        //{
        //    try
        //    {
        //        var path = Constants.ApiPath + "api/Dashboard/WorkloadStatus?userId=" + SessionWrapper.UserId + "&role=" + SessionWrapper.UserRole + "&clientId=" + SessionWrapper.TenantId;
        //        using (var httpClient = new HttpClient())
        //        {
        //            var response = httpClient.GetAsync(path).Result;
        //            var responseData = response.Content.ReadAsStringAsync().Result;
        //            var userDashborad = JsonConvert.DeserializeObject<List<StatusEntity>>(responseData);
        //            return PartialView("_WorkbasketDashboard", userDashborad);
        //        }
        //    }
        //    catch (Exception ex) { logger.Error(ex.ToString()); return null; }
        //}
        #endregion

        #region "Depends on Task"
        /// <summary>
        ///Get DependsOn Task By WorkbasketTaskId
        /// </summary>
        /// <param name="workbasketTaskId">Workbasket TaskId</param>
        /// <returns>json object</returns>

        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.Reviewer,Enums.Role.TenantAdmin, Enums.Role.Preparer, Enums.Role.Supervisor)]
        public JsonResult GetDependsOnTaskByWorkbasketTaskId(int workbasketTaskId)
        {
            workbasketTaskId = 2185;
            try
            {
                var dependsOnWbTask = cls.GetDependsOnTaskByWorkbasketTaskId(workbasketTaskId, SessionWrapper.LoginId);

                if (dependsOnWbTask != null)
                {
                    return Json(new { Result = "OK", Records = dependsOnWbTask, TotalRecordCount = dependsOnWbTask.Count > 0 ? dependsOnWbTask[0].TotalRecords : 0 });
                }
            }
            catch (Exception ex) { logger.Error(ex.ToString()); return Json(new { Result = "ERROR", Message = ex.Message }); }

            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }
        #endregion

        #region "Flowchart"
        /// <summary>
        ///renders Users Level Assignment By WorkbasketTaskId for workflowChart
        /// </summary>
        /// <param name="workbasketTaskId">Workbasket TaskId</param>
        /// <returns>partial view</returns>

        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.Reviewer,Enums.Role.TenantAdmin, Enums.Role.Preparer, Enums.Role.Supervisor)]
        public PartialViewResult GetUsersLevelAssignmentForFlowChart(int workbasketTaskId)
        {
            workbasketTaskId = 2185;
            try
            {
                var userLevel = cls.GetUsersLevelAssignmentByWorkbasketTaskId(workbasketTaskId, SessionWrapper.LoginId);
                //var path = Constants.ApiPath + "api/WorkbasketApi/GetUsersLevelAssignmentByWorkbasketTaskId?workbasketTaskId=" + workbasketTaskId + "&loginId=" + SessionWrapper.LoginId;
                foreach (var w in userLevel)
                {
                    if (SessionWrapper.TenantDateFormat == Constants.USFormat)
                    {
                        w.FormattedEndDate = Convert.ToDateTime(w.EndDate != null ? w.EndDate.ToString() : null).ToString("MM/dd/yyyy");
                        w.FormattedActionedOn = Convert.ToDateTime(w.ActionedOn != null ? w.ActionedOn.ToString() : null).ToString("MM/dd/yyyy");
                    }
                    else
                        if (SessionWrapper.TenantDateFormat == Constants.UKFormat)
                    {
                        w.FormattedEndDate = Convert.ToDateTime(w.EndDate != null ? w.EndDate.ToString() : null).ToString("dd/MM/yyyy");
                        w.FormattedActionedOn = Convert.ToDateTime(w.ActionedOn != null ? w.ActionedOn.ToString() : null).ToString("dd/MM/yyyy");
                    }
                    else
                    {
                        w.FormattedEndDate = Convert.ToDateTime(w.EndDate != null ? w.EndDate.ToString() : null).ToString("dd-MMM-yyyy");
                        w.FormattedActionedOn = Convert.ToDateTime(w.ActionedOn != null ? w.ActionedOn.ToString() : null).ToString("dd-MMM-yyyy");
                    }
                }
                return PartialView("_WorkflowChart", userLevel);
            }
            catch (Exception ex)
            {
                logger.Error(ex.ToString());
                return null;
            }
        }

        [CustomAuthorization(Enums.Role.TenantAdmin, Enums.Role.Supervisor, Enums.Role.Preparer, Enums.Role.Reviewer)]
        public JsonResult GetReasonOptions(string reasonType)

        {
            int tenantId = SessionWrapper.TenantId;
            string loginId = SessionWrapper.LoginId;
            try
            {
                var reasons = cls.GetReasonOptions(tenantId, reasonType, loginId);
                if (reasons != null)
                {
                    return Json(new { Result = "OK", Records = reasons }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }


        [CustomAuthorization(Enums.Role.Reviewer, Enums.Role.Preparer, Enums.Role.Supervisor)]
        public JsonResult SubmitActionForWorkbasket(int workbasketTaskId, string workbasketAction, string comments, int reasonId)
        {
            int userId = SessionWrapper.UserId;
            string loginId = SessionWrapper.LoginId;
            try
            {
                cls.SubmitActionForWorkbasket(loginId, userId, workbasketTaskId, workbasketAction, reasonId, comments);
                return Json(new { Result = "OK" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.Preparer, Enums.Role.Reviewer, Enums.Role.Supervisor)]
        public JsonResult SubmitActionForMultipleTask(List<Workitems> wbTaskWithActions)
        {
            int userId = SessionWrapper.UserId;
            string loginId = SessionWrapper.LoginId;
            try
            {
                cls.SubmitActionForMultipleTask(loginId, userId, wbTaskWithActions);
                return Json(new { Result = "OK" });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [CustomAuthorization(Enums.Role.Reviewer, Enums.Role.Preparer, Enums.Role.Supervisor)]
        public JsonResult AddMiscellaneousNote(int workbasketTaskId, string note)
        {
            int userId = SessionWrapper.UserId;
            string loginId = SessionWrapper.LoginId;
            try
            {
                cls.AddMiscellaneousNote(loginId, userId, workbasketTaskId, note);
                return Json(new { Result = "OK" });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin, Enums.Role.Supervisor)]
        public JsonResult DiscardForMultipleTask(List<Workitems> wbTaskWithActions)
        {
            int userId = SessionWrapper.UserId;
            string loginId = SessionWrapper.LoginId;
            try
            {
                cls.DiscardForMultipleTask(loginId, userId, wbTaskWithActions);
                return Json(new { Result = "OK" });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

    }
}
