using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace WebApplication4.Controllers
{
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Web;
    using System.Web.Mvc;
    using WebApplication1;

    namespace WebApplication2.Controllers
    {
        public class TaskInfo
        {
            public string TaskName { get; set; }
            //value is used for calculate task number
            public int? value { get; set; }
            //if any extra param to send
            public string extra { get; set; }
            public string TeamName { get; set; }
            // public int? TeamId { get; set; }
            public int? WorkbasketTaskId { get; set; }
            public int? DependsOnWorkbasketTaskId { get; set; }
            [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0 dd/MM/yyyy}")]
            public DateTime? EndDateInt { get; set; }
            public bool IsDependantTask { get; set; }

            public int WFLevel
            {get;set;
            }

            public List<TaskInfo> list { get; set; }
        }
        public class HomeController : Controller
        {
            public ActionResult Index()
            {



                return View();
            }


            public List<TaskInfo> GetTaskTimelineChartReport(int LocationId, int PeriodId, int tenantId, bool IndependentTask)
            {             
                eClose_TestingEntities context = new eClose_TestingEntities();
                TaskInfo list1 = new TaskInfo();
                //Check the dependant and Independant task 
                       if(IndependentTask)
                       {
                list1.list = ( from WorkbasketTask in context.WorkbasketTasks
                               join DependetWorkbasketTask in context.DependetWorkbasketTasks
                               on WorkbasketTask.Id equals DependetWorkbasketTask.WorkbasketTaskId into DependetWorkInfo
                               from DependetWorkbasketTask in DependetWorkInfo.DefaultIfEmpty()
                              
                               join Team in context.Teams
                               on WorkbasketTask.TeamId equals Team.Id
                               join WorkbasketTaskUsers in context.WorkbasketTaskUsers
                               on WorkbasketTask.Id equals WorkbasketTaskUsers.WorkbasketTaskId
                               where WorkbasketTask.PeriodId == 94 && DependetWorkbasketTask.DependsOnWorkbasketTaskId ==null  //106 
                               //                              where (Period.LocationId == LocationId) && (Period.Id == PeriodId) && (WorkbasketTask.TenantId == tenantId)
                               group WorkbasketTaskUsers by new
                               {
                                   //    WorkbasketTaskUsers.EndDateInt,
                                   WorkbasketTask.Id,
                                   DependetWorkbasketTask.DependsOnWorkbasketTaskId,
                                   WorkbasketTask.TaskName,
                                   Team.TeamName
                               } into gcs
                               let topp = gcs.Max( x => x.WFLevel )
                               select new TaskInfo
                               {
                                   //TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,
                                   TeamName = ( gcs.Key.TeamName == null ) ? "" : gcs.Key.TeamName,
                                   TaskName = ( gcs.Key.TaskName == null ) ? "" : gcs.Key.TaskName,
                                   WorkbasketTaskId = ( gcs.Key.Id == null ) ? 0 : gcs.Key.Id,
                                   DependsOnWorkbasketTaskId = gcs.Key.DependsOnWorkbasketTaskId,
                                   WFLevel = topp,
                                   // EndDateInt = gcs.Max(x => (gcs.Key.EndDateInt == null) ? DateTime.Today : gcs.Key.EndDateInt),
                                   value = 0,
                                   extra = "",
                                   IsDependantTask = false
                               } ).ToList<TaskInfo>();
                           }
                       else
                       {
                        list1.list = ( from WorkbasketTask in context.WorkbasketTasks
                               join DependetWorkbasketTask in context.DependetWorkbasketTasks
                               on WorkbasketTask.Id equals DependetWorkbasketTask.WorkbasketTaskId into DependetWorkInfo
                               from DependetWorkbasketTask in DependetWorkInfo.DefaultIfEmpty()
                              
                               join Team in context.Teams
                               on WorkbasketTask.TeamId equals Team.Id
                               join WorkbasketTaskUsers in context.WorkbasketTaskUsers
                               on WorkbasketTask.Id equals WorkbasketTaskUsers.WorkbasketTaskId
                               where WorkbasketTask.PeriodId == 94 && DependetWorkbasketTask.DependsOnWorkbasketTaskId != null   //106 
                               //                              where (Period.LocationId == LocationId) && (Period.Id == PeriodId) && (WorkbasketTask.TenantId == tenantId)
                               group WorkbasketTaskUsers by new
                               {
                                   //    WorkbasketTaskUsers.EndDateInt,
                                   WorkbasketTask.Id,
                                   DependetWorkbasketTask.DependsOnWorkbasketTaskId,
                                   WorkbasketTask.TaskName,
                                   Team.TeamName
                               } into gcs
                               let topp = gcs.Max( x => x.WFLevel )
                               select new TaskInfo
                               {
                                   //TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,
                                   TeamName = ( gcs.Key.TeamName == null ) ? "" : gcs.Key.TeamName,
                                   TaskName = ( gcs.Key.TaskName == null ) ? "" : gcs.Key.TaskName,
                                   WorkbasketTaskId = ( gcs.Key.Id == null ) ? 0 : gcs.Key.Id,
                                   DependsOnWorkbasketTaskId = gcs.Key.DependsOnWorkbasketTaskId,
                                   WFLevel = topp,
                                   // EndDateInt = gcs.Max(x => (gcs.Key.EndDateInt == null) ? DateTime.Today : gcs.Key.EndDateInt),
                                   value = 0,
                                   extra = "",
                                   IsDependantTask = false
                               } ).ToList<TaskInfo>();
                       }
                IEnumerable<int?> DependsOnWorkbasketTaskIdList;
                DependsOnWorkbasketTaskIdList = list1.list.Select( t => t.DependsOnWorkbasketTaskId );

                TaskInfo list3 = new TaskInfo();
                list3.list = ( from WorkbasketTask in context.WorkbasketTasks
                               join Period in context.Periods
                               on WorkbasketTask.PeriodId equals Period.Id into Periodinfo
                               join Team in context.Teams
                               on WorkbasketTask.TeamId equals Team.Id into Teaminfo
                               from Team in Teaminfo.DefaultIfEmpty()
                               join WorkbasketTaskUsers in context.WorkbasketTaskUsers
                               on WorkbasketTask.Id equals WorkbasketTaskUsers.WorkbasketTaskId into WorkbasketTaskUsersinfo
                               from WorkbasketTaskUsers in WorkbasketTaskUsersinfo.DefaultIfEmpty()
                               join record in DependsOnWorkbasketTaskIdList
                               on WorkbasketTask.Id equals record
                               group WorkbasketTaskUsers by new
                               {
                                   // WorkbasketTaskUsers.EndDateInt,
                                   WorkbasketTask.Id,
                                   WorkbasketTask.TaskName,
                                   Team.TeamName
                               } into gcs
                               let topp = gcs.Max( x => x.WFLevel )
                               select new TaskInfo
                               {
                                   //TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,
                                   TeamName = ( gcs.Key.TeamName == null ) ? "" : gcs.Key.TeamName,
                                   TaskName = ( gcs.Key.TaskName == null ) ? "" : gcs.Key.TaskName,
                                   WorkbasketTaskId = ( gcs.Key.Id == null ) ? 0 : gcs.Key.Id,
                                   DependsOnWorkbasketTaskId = ( gcs.Key.Id == null ) ? 0 : gcs.Key.Id,
                                   //  EndDateInt = gcs.Max(x => (gcs.Key.EndDateInt == null) ? DateTime.Today : gcs.Key.EndDateInt),
                                   WFLevel = topp,
                                   value = 0,
                                   extra = "",
                                   IsDependantTask = true
                               } ).ToList<TaskInfo>();
                List<TaskInfo> TaskList = new List<TaskInfo>();
                TaskList.AddRange( list1.list.ToList() );
                TaskList.AddRange( list3.list.ToList() );


                var userDetaqils = context.WorkbasketTaskUsers;
                List<TaskInfo> NewTaskList = new List<TaskInfo>();
                try
                {
                    foreach( var task in TaskList )
                    {

                        var _taskList = context.WorkbasketTaskUsers.Where( x => x.WorkbasketTaskId == task.WorkbasketTaskId && x.WFLevel == task.WFLevel );
                        task.EndDateInt = _taskList.Count() == 0 ? DateTime.Now : _taskList.FirstOrDefault().EndDateInt;
                        NewTaskList.Add( task );
                    }
                }
                catch( Exception ex )
                {

                }
                return ( NewTaskList );


            }


            [HttpGet]
            public JsonResult Graphdata(bool IndependentTask = false)
            {
                //Create sample data
                try
                {
                    string result = "ERROR";

                    HomeController _report = new HomeController();
                    var _info = _report.GetTaskTimelineChartReport(0, 0, 0, IndependentTask).Where(x => x.EndDateInt != null);
                    //var task = JsonConvert.DeserializeObject(responseData);

                    if (_info != null)
                    {
                         // logic for add value of task date wise task number assign ..same date it will 1,2,3,4 etc
                        //string teamOldValue = "";
                        var teamCollection = (_info.GroupBy(x => x.TeamName)
                                                           .Select(TeamName => new
                                                           {
                                                               TeamName = TeamName.Key
                                                           }));
                        int count = 0;
                        var color = (teamCollection.Select(TeamName => new
                        {
                            value = count++,
                            name = TeamName.TeamName
                        }).ToList());

                        int teamCounter = 0;
                        List<TaskInfo> _newInfo = new List<TaskInfo>();

                        foreach (var teamGroup in teamCollection)
                        {
                            string teamname = teamGroup.TeamName;

                            int teamDateMaxCount = _info.Where(x => x.TeamName == teamname).GroupBy(x => x.EndDateInt.Value)
                                                 .Max(g => g.Count());
                            int counter = 1;
                            string oldValue = "";
                            var SortedList = _info.Where(x => x.TeamName == teamname).OrderBy(x => x.EndDateInt.Value.Date.Ticks);
                            foreach (var item in SortedList)
                            {
                                if (oldValue != item.EndDateInt.Value.ToShortDateString())
                                {
                                    counter = 1;
                                }
                                else
                                {
                                    counter++;
                                }
                                oldValue = item.EndDateInt.Value.ToShortDateString();
                                item.value = teamCounter + counter;
                                item.extra = color.Where(x => x.name == teamname).First().value.ToString();
                                _newInfo.Add(item);

                            }
                            teamCounter += teamDateMaxCount;
                        }
                        //here customise column name
                        var output = from i in _newInfo
                                     select new
                                     {
                                         TaskTitle = i.TaskName,
                                         TaskNumber = i.value,
                                         TaskDate = i.EndDateInt.Value.ToString("yyyy-MM-dd"),
                                         TaskId = i.WorkbasketTaskId,
                                         extra = i.extra,
                                         DependsOnWorkbasketTaskId = i.DependsOnWorkbasketTaskId,
                                         DependantTaskDate = _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt.Value.ToString("yyyy-MM-dd") : i.EndDateInt.Value.ToString("yyyy-MM-dd"),
                                         DependantTaskNumber = _newInfo.Where( x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId ).Count() > 0 ? _newInfo.Where( x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId ).FirstOrDefault().value : i.value,
                                         DependantTaskName = _newInfo.Where( x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId ).Count() > 0 ? _newInfo.Where( x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId ).FirstOrDefault().TaskName : "",
                                         color = _newInfo.Where( x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId ).Count() > 0 ? ( i.EndDateInt >= _info.Where( x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId ).FirstOrDefault().EndDateInt ? "rgb(44, 160, 44)" : "rgb(214, 39, 40)" ) : "rgb(214, 39, 40)", //green/red color
                                         TeamName = i.TeamName,
                                         IsDependantTask = i.IsDependantTask,
                                     };
                       
                            return Json(JsonConvert.SerializeObject(output), JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        return Json(new { Result = "ERROR", Message = "Database Record Problem", Record = _info }, JsonRequestBehavior.AllowGet);
                    }

                }
                catch (Exception ex)
                {
                    return Json(new { Result = "ERROR", Message = "Database Record Problem" }, JsonRequestBehavior.AllowGet);
                }
                //return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });

            }
        }
    }

}
