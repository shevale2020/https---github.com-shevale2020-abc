using ECloseWebApp.BuisnessEntities;
using ECloseWebApp.HelperClasses;
using ECloseWebApp.Models;
using System;
using System.Web.Mvc;
using eCloseDataAccessLayer.HelperClasses;
using eCloseDataAccessLayer.Models;
using System.Collections.Generic;
using Newtonsoft.Json;
using System.Linq;
using ECloseBL.Entities;

namespace ECloseWebApp.Controllers
{
    [HandleExceptionsAttribute]

    public class ReportController : Controller
    {


        private string pendingStatus = Enums.WorkbasketAction.Pending.ToString();
        ReportClass cls = new ReportClass();
        WorkbasketClass wcls = new WorkbasketClass();
        log4net.ILog logger = log4net.LogManager.GetLogger(typeof(LoginController));  //Declaring Log4Net 
                                                                                      // GET: Report
        [CustomAuthorization(Enums.Role.Supervisor, Enums.Role.TenantAdmin, Enums.Role.Controller)]
        public ActionResult Index()
        {
            if (Request.QueryString["report"].ToString() != null)
            {
                ViewBag.Report = Request.QueryString["report"].ToString();
            }
            int locationId = 0;
            int tenantId = SessionWrapper.TenantId;
            LocationClass locClass = new LocationClass();
            var locations = locClass.List(tenantId);
            var vm = new ViewModelForBusinessUnitDD();

            foreach (var location in locations)
            {
                vm.Location.Add(new SelectListItem { Text = location.LocationName + ' ' + '[' + location.TimeZone + ']', Value = location.Id.ToString() });
            }

            if (vm.Location.Count > 0 && vm.Location[0].Value != null)
            {
                locationId = Convert.ToInt32(vm.Location[0].Value);
            }
            vm.Location.Insert(0, new SelectListItem { Text = "--Select--", Value = "0" });

            TeamClass teamClass = new TeamClass();
            var responseTeam = teamClass.LocationTeams(locationId);
            foreach (var team in responseTeam)
            {
                vm.Team.Add(new SelectListItem { Text = team.TeamName, Value = team.Id.ToString() });
            }

            vm.Team.Insert(0, new SelectListItem { Text = "--All--", Value = "0" });

            PeriodClass periodClass = new PeriodClass();
            var Period = periodClass.GetOpenPeriods(locationId);
            if (Period.Count > 0)
            {
                foreach (var p in Period)
                {
                    vm.Period.Add(new SelectListItem { Text = p.PeriodText, Value = p.Id.ToString() });
                }
            }
            vm.Period.Insert(0, new SelectListItem { Text = "--Select--", Value = "0" });
            return View(vm);
        }

        [CustomAuthorization(Enums.Role.Supervisor, Enums.Role.TenantAdmin, Enums.Role.Controller)]
        [Route("DependencyGraph")]
        public ActionResult TeamTaskDetailsReport()
        {
            int locationId = 0;
            int tenantId = SessionWrapper.TenantId;
            LocationClass locClass = new LocationClass();
            var locations = locClass.List(tenantId);
            var vm = new ViewModelForBusinessUnitDD();

            foreach (var location in locations)
            {
                vm.Location.Add(new SelectListItem { Text = location.LocationName + ' ' + '[' + location.TimeZone + ']', Value = location.Id.ToString() });
            }

            if (vm.Location.Count > 0 && vm.Location[0].Value != null)
            {
                locationId = Convert.ToInt32(vm.Location[0].Value);
            }
            vm.Location.Insert(0, new SelectListItem { Text = "--Select--", Value = "0" });

            return View(vm);

        }


        [HttpGet]
        [CustomAuthorization(Enums.Role.Supervisor, Enums.Role.TenantAdmin, Enums.Role.Controller)]
        public JsonResult Graphdata(int LocationId, int PeriodId, int TaskType = 2)
        {
            //Create sample data
            try
            {
                string result = "ERROR";
                string message = Constants.ErrorSessionExpired;
                int tenantId = SessionWrapper.TenantId;

                ReportClass _report = new ReportClass();
                var _info = _report.GetTaskTimelineChartReport(LocationId, PeriodId, tenantId, TaskType).Where(x => x.EndDateInt != null);
                //var task = JsonConvert.DeserializeObject(responseData);

                if (_info != null)
                {
                    // logic for add value of task date wise task number assign ..same date it will 1,2,3,4 etc
                    //string teamOldValue = "";
                    var teamCollection = (_info.GroupBy(x => x.TeamName)
                                                       .Select(TeamName => new
                                                       {
                                                           TeamName = TeamName.Key
                                                       }));
                    int count = 0;
                    var color = (teamCollection.Select(TeamName => new
                    {
                        value = count++,
                        name = TeamName.TeamName
                    }).ToList());



                    int teamCounter = 0;
                    List<TaskInfo> _newInfo = new List<TaskInfo>();

                    List<TaskInfo> minmaxdate = new List<TaskInfo>();
                    minmaxdate = _report.GetTaskMinMaxDate(PeriodId);//.Where(x => x.EndDateInt != null);

                    foreach (var teamGroup in teamCollection)
                    {
                        string teamname = teamGroup.TeamName;


                        var SortedList = _info.Where(x => x.TeamName == teamname).OrderBy(x => x.EndDateInt.Value.Date.Ticks);
                        foreach (var item in SortedList)
                        {
                            if (_newInfo.Where(x => x.WorkbasketTaskId == item.WorkbasketTaskId).Count() == 0)
                            {
                                ++teamCounter;
                                item.value = teamCounter;
                            }
                            else
                            {
                                item.value = _newInfo.Where(x => x.WorkbasketTaskId == item.WorkbasketTaskId).FirstOrDefault().value;
                            }

                            item.extra = color.Where(x => x.name == teamname).First().value.ToString();
                            foreach (var date in minmaxdate)
                            {
                                item.EndDate = date.EndDate;
                                item.StartDate = date.StartDate;
                            }

                            _newInfo.Add(item);

                        }
                    }
                    //here customise column name
                    var output = from i in _newInfo
                                 select new
                                 {
                                     TaskTitle = i.TaskName,
                                     TaskNumber = i.value,
                                     TaskDate = i.EndDateInt.Value.ToString("yyyy-MM-dd"),
                                     TaskId = i.WorkbasketTaskId,
                                     extra = i.extra,
                                     DependsOnWorkbasketTaskId = i.DependsOnWorkbasketTaskId,
                                     DependantTaskDate = _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt.Value.ToString("yyyy-MM-dd") : i.EndDateInt.Value.ToString("yyyy-MM-dd"),
                                     DependantTaskNumber = _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().value : i.value,
                                     DependantTaskName = _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().TaskName : "",
                                     color = _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? (i.EndDateInt >= _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt ? "rgb(44, 160, 44)" : "rgb(214, 39, 40)") : "rgb(214, 39, 40)", //green/red color
                                     TeamName = i.TeamName,
                                     IsDependantTask = i.IsDependantTask,
                                     EndDate = i.EndDate.Value.ToString("yyyy-MM-dd"),
                                     StartDate = i.StartDate.Value.ToString("yyyy-MM-dd")
                                 };



                    return Json(JsonConvert.SerializeObject(output), JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { Result = "ERROR", Message = "Database Record Problem", Record = _info }, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception ex)
            {
                return Json(new { Result = "ERROR", Message = "Database Record Problem" }, JsonRequestBehavior.AllowGet);
            }
            //return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });

        }


        public ActionResult GetPopUpTaskDetails(int Id = 0)

        {
            return View("_TaskDetails", Id);
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public JsonResult GetWorkitemsFromworkbasketTaskId(int workbasketTaskId)
        {

            try
            {
                if (null == SessionWrapper.UserEntity)
                    return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
                UserEntity user = SessionWrapper.UserEntity;
                user.TenantId = SessionWrapper.TenantId;
                var UserRole = SessionWrapper.UserRole;
                user.UserID = SessionWrapper.UserId;
                ReportClass cls = new ReportClass();

                //GetWorkitemsFromWorkBacketID(tenantId,dedicatedStatud,Workbasketid,....)
                var workitemsDetails = cls.GetWorkitemsFromWorkBacketID(user.TenantId, workbasketTaskId, user.UserID, UserRole).FirstOrDefault();
                return Json(new { Result = "OK", Records = workitemsDetails, TotalRecordCount = 1 });
            }
            catch (Exception ex) { logger.Error(ex.ToString()); return Json(new { Result = "ERROR", Message = ex.Message }); }
        }
    }
}
