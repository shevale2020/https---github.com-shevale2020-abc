@using ECloseBL.Entities;
@using ECloseWebApp.Models;
@using ECloseWebApp.BuisnessEntities;
@model ECloseWebApp.Models.ViewModelForBusinessUnitDD
@{
    Html.RenderPartial("_Report");
}

<div class="panel panel-white no-p" id="OpenPeriodFilter">
    <div class="panel-body form-inline">
        @Html.AntiForgeryToken()
        <div class="pull-right">
            <label>Priority:</label> <select id='priorityFilter' class='form-control'></select> &nbsp;
            <label>Open Period :</label> @Html.DropDownListFor(m => m.OpenPeriods, Model.OpenPeriods, new { @class = "form-control" }) &nbsp;
            <button id="btnOpenPeriod" class="btn btn-primary">@Constants.SearchButtonTitle</button>
        </div>
        <div class="">
        </div>
    </div>
</div>

<div class="row" id="landingSection1">
    <div class="col-lg-4 no-p p-l-sm ">
        <div class="panel info-box panel-danger">
            <div class="bg-danger p-h-xs p-v-xs">
                <h6 class="no-s f-s-14 text-center"><i class="fa fa-hourglass" aria-hidden="true"></i> Due Day Missed</h6>
            </div>
            <div class="panel-body no-s">
                <div class="row">
                    <div class="col-md-6 text-center ">
                        <h5 class="no-m m-t-xs  ">PENDING</h5>
                        <a href="" onclick="ShowReportPopup('itemRedP'); return false;" title="Click here"><h1 class="no-m text-danger m-b-xs " id="redPending"> </h1> </a>
                    </div>
                    <div class="col-md-6 text-center " id="expR">
                        <h5 class="no-m m-t-xs"> ACTIONED </h5>
                        <a href="" onclick="ShowReportPopup('itemRedA'); return false;" title="Click here"><h1 class="no-m text-success m-b-xs " id="redActioned"> </h1> </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-4 no-p p-l-xs">
        <div class="panel info-box  ">
            <div class="bg-success p-h-xs p-v-xs">
                <h6 class="no-s f-s-14 text-center"><i class="fa fa-hourglass-half" aria-hidden="true"></i> Within Due Day</h6>
            </div>
            <div class="panel-body no-s">
                <div class="row">
                    <div class="col-md-6 text-center ">
                        <h5 class="no-m m-t-xs  ">PENDING</h5>
                        <a href="" onclick="ShowReportPopup('itemGreenP'); return false;" title="Click here"><h1 class="no-m text-danger m-b-xs " id="greenPending"> </h1></a>
                    </div>
                    <div class="col-md-6 text-center ">
                        <h5 class="no-m m-t-xs   "> ACTIONED </h5>
                        <a href="" onclick="ShowReportPopup('itemGreenA'); return false;" title="Click here"><h1 class="no-m text-success m-b-xs " id="greenActioned"> </h1></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-lg-4 no-p p-l-xs p-r-sm">
        <div class="panel info-box  ">
            <div class="bg-warning p-h-xs p-v-xs">
                <h6 class="no-s f-s-14 text-center"><i class="fa fa-hourglass-end" aria-hidden="true"></i> Approaching Due Day</h6>
            </div>
            <div class="panel-body no-s">
                <div class="row">
                    <div class="col-md-12 text-center ">
                        <h5 class="no-m m-t-xs  ">PENDING</h5>
                        <a href="" onclick="ShowReportPopup('itemOrangeP'); return false;" title="Click here"><h1 class="no-m m-b-xs   text-danger " id="amberPending"> </h1></a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="" id="landingSection2">
    <div class="row">
        <div class="col-md-6 no-p p-l-sm">
            <div class="panel panel-white ">
                <div class="panel-heading">
                    <h3 class="panel-title">My Current Tasks</h3>
                    <div class="panel-control">
                        &nbsp;&nbsp;&nbsp;
                        <a href="javascript:void(0);" data-toggle="tooltip" data-placement="top" title="" class="panel-collapse" data-original-title="Expand/Collapse"><i class="icon-arrow-down"></i></a>
                    </div>
                    <div class="panel-control">
                        <h3 class="panel-title">Show Future Tasks  </h3> &nbsp;&nbsp;&nbsp;
                        @*<input class="toggle"  id="toggle-event" type="checkbox"  checked  data-toggle="toggle">&nbsp;&nbsp;&nbsp;*@
                        @if (SessionWrapper.IsFutureRef == true)
                        {
                            <input type="checkbox" id="btnIsFutureRef" checked />
                        }

                        @if (SessionWrapper.IsFutureRef == false)
                        {
                            <input type="checkbox" id="btnIsFutureRef" />
                        }
                    </div>
                </div>
                <div class="panel-body no-s">
                    <div class="table-responsive " id="divPendingEntity">
                    </div>
                </div>
                <div class="panel-footer">
                    <button class="btn  btn-default btn-flat" id="workBasket">@Html.ActionLink("View All", "Index", "Workbasket", null, null)</button>
                </div>
            </div>
        </div>
        <div class="col-md-6 no-p p-l-xs p-r-sm">
            <div class="panel panel-white">
                <div class="panel-heading">
                    <h3 class="panel-title">
                        Actioned Tasks
                    </h3>
                    <div class="panel-control">
                        <a href="javascript:void(0);" data-toggle="tooltip" data-placement="top" title="" class="panel-collapse" data-original-title="Expand/Collapse"><i class="icon-arrow-down"></i></a>
                    </div>
                </div>
                <div class="panel-body no-s">
                    <div class="table-responsive  " id="divNonPendingEntity">
                    </div>
                </div>
            </div>
        </div>

    </div><!-- Row -->
</div>

<script src='@Url.Content("~/assets/plugins/jquery/jquery-2.1.4.min.js")'></script>
<script src='@Url.Content("~/Scripts/Template/adminlte/plugins/daterangepicker/moment.js")'></script>
<script src='@Url.Content("~/assets/plugins/3d-bold-navigation/js/modernizr.js")'></script>
<script src='@Url.Content("~/Scripts/jquery.dataTables.min.js")'></script>

<script type="text/javascript">

    $(document).ready(function () {
        $('#MultiWBTaskSubmit').hide();
        BindTATs();
        $(BindEntityList());
        @*var IsFutureRef = '@SessionWrapper.IsFutureRef';
        console.log('IsFutureRef--' + IsFutureRef);
        if (IsFutureRef == 'True') {
            $('#btnIsFutureRef').parent().removeClass('Checked');
        }
        else {
            $('#btnIsFutureRef').parent().addClass('checked');
        }*@

        $.ajax({
            type: "Get",
            url: '@Url.Action("GetPriorityOptions", "Dashboard")',
            data: { loginId: '@SessionWrapper.LoginId' },
            success: function (data) {
                $("#priorityFilter").empty();
                $("#priorityFilter").append($("<option />").val('0').text('--All--'));
                $.each(data.Records, function () {
                    $("#priorityFilter").append($("<option />").val(this.Key).text(this.Value));
                });
            },
        });
    });

    $("#btnOpenPeriod").click(function () {
        BindTATs();
        $('#divPendingEntity').jtable('load', { taskName: '', statusToGet: '@Enums.WorkbasketAction.Pending', userRole: '@Enums.Role.Preparer', priorityId: $("#priorityFilter").find('option:selected').val(), periodId: $("#OpenPeriods").find('option:selected').val() });
        $('#divNonPendingEntity').jtable('load', { taskName: '', statusToGet: '@string.Empty', userRole: '@Enums.Role.Preparer', priorityId: $("#priorityFilter").find('option:selected').val(), periodId: $("#OpenPeriods").find('option:selected').val() });
    });

    function BindTATs() {
        var tokenId = '@Html.AntiForgeryToken()';
        if ($("#OpenPeriods").length > 0) {
            var periodId = $("#OpenPeriods").find('option:selected').val();
        }
        var priorityId = 0;
        if ($("#priorityFilter").length > 0) {
            priorityId = $("#priorityFilter").find('option:selected').val();
        }
        var userRole = '@SessionWrapper.UserRole';

        if (priorityId == null)
            priorityId = 0;

        $.ajax({
            url: '@Url.Action("ListTATStatusUser", "Dashboard")',
            dataType: 'json',
            data: { priorityId: priorityId, __RequestVerificationToken: $(tokenId).val(), periodId: periodId },
            type: "POST",
            success: function (data) {
                $('#redPending').text(data.Records[0].Count);
                $('#redActioned').text(data.Records[1].Count);
                $('#redExpected').text(data.Records[2].Count);
                $('#amberPending').text(data.Records[3].Count);
                $('#amberExpected').text(data.Records[4].Count);
                $('#greenPending').text(data.Records[5].Count);
                $('#greenActioned').text(data.Records[6].Count);
                $('#greenExpected').text(data.Records[7].Count);
            }
        });

    }

    var d = new Date();
    var month = d.getMonth() + 1;
    var day = d.getDate();
    var currentDate = d.getFullYear() + '/' +
    (('' + month).length < 2 ? '0' : '') + month + '/' +
    (('' + day).length < 2 ? '0' : '') + day;

    var flag=null;

    function BindEntityList() {
        var tokenId = '@Html.AntiForgeryToken()';
        var approve = '@Enums.WorkbasketAction.Approve.ToString()';
        var WIP = '@Enums.WorkbasketAction.WIP.ToString()';
        var reject = '@Enums.WorkbasketAction.Reject.ToString()';
        var pending = '@Enums.WorkbasketAction.Pending.ToString()';
        var pendingReject = '@Enums.WorkbasketAction.PendingReject.ToString()';
        var close = '@Enums.WorkbasketAction.Close.ToString()';
        var completed = '@Enums.WorkbasketAction.Completed.ToString()';
        var hold = '@Enums.WorkbasketAction.Hold.ToString()';
        //Load and Bind User List to jTable
        console.log('Firsttime-Load and Bind User List to jTable')
        var IsFutureRef = '@SessionWrapper.IsFutureRef';
        console.log('IsFutureRef-'+IsFutureRef)
        if (IsFutureRef == 'False') {

            currentDate = d.getFullYear() + '/' +
                         (('' + month).length < 2 ? '0' : '') + month + '/' +
                         (('' + day).length < 2 ? '0' : '') + day;
            console.log('currentDate-' + currentDate, 'flag-' + flag, 'Dashboardcondition in-IsFutureref-False');

            $('#divPendingEntity').jtable({
                //title: 'Task',
                paging: true,  //Enables paging
                pageSize: 10, //Actually this is not needed since default value is 10.
                sorting: true, //Enables sorting
                defaultSorting: 'FormattedEndDateInt asc', //Optional. Default sorting on first load.

                actions: {
                    listAction: function (postData, jtParams) {
                        return $.Deferred(function ($dfd) {
                            $.ajax({
                                url: '@Url.Action("GetWorkbasketItems", "Dashboard")',
                                type: 'POST',
                                dataType: 'json',
                                data: { taskName: '', jtStartIndex: jtParams.jtStartIndex, jtPageSize: jtParams.jtPageSize, jtSorting: jtParams.jtSorting, statusToGet: '@Enums.WorkbasketAction.Pending', userRole: '@Enums.Role.Preparer', priorityId: $("#priorityFilter").find('option:selected').val(), periodId: $("#OpenPeriods").find('option:selected').val(), currentDate: currentDate, flag: flag, __RequestVerificationToken: $(tokenId).val() },
                                success: function (data) {
                                    $dfd.resolve(data);
                                },
                                error: function () {
                                    $dfd.reject();
                                }
                            });
                        });
                    }
                },

                fields: {
                    Id: {
                        key: true,
                        create: false,
                        edit: false
                    },

                    Id: {
                        title: '@LableConstants.WorkBasketTaskId',
                        list: true,
                        width: '10%'
                    },

                    TaskName: {
                        title: '@LableConstants.WorkBasketTaskName',
                        width: '45%'
                    },

                    PeriodName: {
                        title: 'Period',
                        width: '15%'
                    },
                    Status: {
                        title: 'Status',
                        width: '15%'
                    }
                    ,
                    FormattedEndDateInt: {
                        title: 'Due By',
                        width: '15%',
                        display: function (data) {
                            if (null != data.record.RAGStatus && data.record.RAGStatus.replace(/ /g, '') == '@Enums.RAGStatus.G.ToString()') {
                                return "<div class='label label-success text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                            if (null != data.record.RAGStatus && data.record.RAGStatus.replace(/ /g, '') == '@Enums.RAGStatus.R.ToString()') {
                                return "<div class='label label-danger text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                            if (null != data.record.RAGStatus && data.record.RAGStatus.replace(/ /g, '') == '@Enums.RAGStatus.A.ToString()') {
                                return "<div class='label label-warning text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                            else {
                                return "<div class='text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                        }
                    }

                },

                recordsLoaded: function (event, data) {


                    RecordsLoadedEvent(event, data);

                }

            });
            $('#divPendingEntity').jtable('load', { taskName: '', statusToGet: '@Enums.WorkbasketAction.Pending', userRole: '@Enums.Role.Preparer', currentDate: currentDate, flag: flag });
        }
        else {
            currentDate = null;
            console.log('currentDate-' + currentDate, 'flag-' + flag, 'Dashboardcondition in-IsFutureref-True');
            $('#divPendingEntity').jtable({
                //title: 'Task',
                paging: true,  //Enables paging
                pageSize: 10, //Actually this is not needed since default value is 10.
                sorting: true, //Enables sorting
                defaultSorting: 'FormattedEndDateInt asc', //Optional. Default sorting on first load.

                actions: {
                    listAction: function (postData, jtParams) {
                        return $.Deferred(function ($dfd) {
                            $.ajax({
                                url: '@Url.Action("GetWorkbasketItems", "Dashboard")',
                                type: 'POST',
                                dataType: 'json',
                                data: { taskName: '', jtStartIndex: jtParams.jtStartIndex, jtPageSize: jtParams.jtPageSize, jtSorting: jtParams.jtSorting, statusToGet: '@Enums.WorkbasketAction.Pending', userRole: '@Enums.Role.Preparer', priorityId: $("#priorityFilter").find('option:selected').val(), periodId: $("#OpenPeriods").find('option:selected').val(), currentDate: currentDate, flag: flag, __RequestVerificationToken: $(tokenId).val() },
                                success: function (data) {
                                    $dfd.resolve(data);
                                },
                                error: function () {
                                    $dfd.reject();
                                }
                            });
                        });
                    }
                },

                fields: {
                    Id: {
                        key: true,
                        create: false,
                        edit: false
                    },

                    Id: {
                        title: '@LableConstants.WorkBasketTaskId',
                        list: true,
                        width: '10%'
                    },

                    TaskName: {
                        title: '@LableConstants.WorkBasketTaskName',
                        width: '45%'
                    },

                    PeriodName: {
                        title: 'Period',
                        width: '15%'
                    },
                    Status: {
                        title: 'Status',
                        width: '15%'
                    }
                    ,
                    FormattedEndDateInt: {
                        title: 'Due By',
                        width: '15%',
                        display: function (data) {
                            if (null != data.record.RAGStatus && data.record.RAGStatus.replace(/ /g, '') == '@Enums.RAGStatus.G.ToString()') {
                                return "<div class='label label-success text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                            if (null != data.record.RAGStatus && data.record.RAGStatus.replace(/ /g, '') == '@Enums.RAGStatus.R.ToString()') {
                                return "<div class='label label-danger text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                            if (null != data.record.RAGStatus && data.record.RAGStatus.replace(/ /g, '') == '@Enums.RAGStatus.A.ToString()') {
                                return "<div class='label label-warning text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                            else {
                                return "<div class='text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                        }
                    }

                },

                recordsLoaded: function (event, data) {


                    RecordsLoadedEvent(event, data);

                }

            });
            $('#divPendingEntity').jtable('load', { taskName: '', statusToGet: '@Enums.WorkbasketAction.Pending', userRole: '@Enums.Role.Preparer', currentDate: currentDate, flag: flag });
        }

        $('#divNonPendingEntity').jtable({
            //  title: 'Task',
            paging: true,  //Enables paging
            pageSize: 10, //Actually this is not needed since default value is 10.
            sorting: true, //Enables sorting
            defaultSorting: 'Id Desc', //Optional. Default sorting on first load.

            actions: {
                listAction: function (postData, jtParams) {
                    return $.Deferred(function ($dfd) {
                        $.ajax({
                            url:'@Url.Action("GetWorkbasketItems", "Dashboard")',
                            type: 'POST',
                            dataType: 'json',
                            data: {taskName:'',jtStartIndex:jtParams.jtStartIndex,jtPageSize:jtParams.jtPageSize,jtSorting:jtParams.jtSorting,statusToGet:'@string.Empty',userRole:'@Enums.Role.Preparer',priorityId:$("#priorityFilter").find('option:selected').val(),periodId:$("#OpenPeriods").find('option:selected').val(), __RequestVerificationToken: $(tokenId).val() },
                            success: function (data) {
                                $dfd.resolve(data);
                            },
                            error: function () {
                                $dfd.reject();
                            }
                        });
                    });
                }
            },

            fields: {
                Id: {
                    key: true,
                    create: false,
                    edit: false,
                    list: false
                },
                Id: {
                    title: '@LableConstants.WorkBasketTaskId',
                    list: true,
                    width: '15%'
                },
                TaskName: {
                    title: '@LableConstants.WorkBasketTaskName',
                    width: '55%'
                },
                PeriodName: {
                    title: 'Period',
                    width: '15%'
                }
                ,
                Status: {
                    title: 'Status',
                    width: '15%'
                }
            },

            recordsLoaded: function (event, data) {
                RecordsLoadedEvent(event, data);
            }
        });
        $('#divNonPendingEntity').jtable('load', { taskName: '', statusToGet: '@string.Empty', userRole: '@Enums.Role.Preparer' });

    }


    $('#btnIsFutureRef').change(function () {
        var tokenId = '@Html.AntiForgeryToken()';
        flag = "IsFutureRef";
        if ($(this).prop('checked') == false) {

            currentDate = d.getFullYear() + '/' +
                         (('' + month).length < 2 ? '0' : '') + month + '/' +
                         (('' + day).length < 2 ? '0' : '') + day;
            console.log('currentDate-' + currentDate, 'flag-' + flag, 'Onchangecondition in-IsFutureref-False');

            $('#divPendingEntity').jtable({
                //title: 'Task',
                paging: true,  //Enables paging
                pageSize: 10, //Actually this is not needed since default value is 10.
                sorting: true, //Enables sorting
                defaultSorting: 'FormattedEndDateInt asc', //Optional. Default sorting on first load.

                actions: {
                    listAction: function (postData, jtParams) {
                        return $.Deferred(function ($dfd) {
                            $.ajax({
                                url: '@Url.Action("GetWorkbasketItems", "Dashboard")',
                                type: 'POST',
                                dataType: 'json',
                                data: { taskName: '', jtStartIndex: jtParams.jtStartIndex, jtPageSize: jtParams.jtPageSize, jtSorting: jtParams.jtSorting, statusToGet: '@Enums.WorkbasketAction.Pending', userRole: '@Enums.Role.Preparer', priorityId: $("#priorityFilter").find('option:selected').val(), periodId: $("#OpenPeriods").find('option:selected').val(), currentDate: currentDate, flag: flag, __RequestVerificationToken: $(tokenId).val() },
                                success: function (data) {
                                    $dfd.resolve(data);
                                },
                                error: function () {
                                    $dfd.reject();
                                }
                            });
                        });
                    }
                },

                fields: {
                    Id: {
                        key: true,
                        create: false,
                        edit: false
                    },

                    Id: {
                        title: '@LableConstants.WorkBasketTaskId',
                        list: true,
                        width: '10%'
                    },

                    TaskName: {
                        title: '@LableConstants.WorkBasketTaskName',
                        width: '45%'
                    },

                    PeriodName: {
                        title: 'Period',
                        width: '15%'
                    },
                    Status: {
                        title: 'Status',
                        width: '15%'
                    }
                    ,
                    FormattedEndDateInt: {
                        title: 'Due By',
                        width: '15%',
                        display: function (data) {
                            if (null != data.record.RAGStatus && data.record.RAGStatus.replace(/ /g, '') == '@Enums.RAGStatus.G.ToString()') {
                                return "<div class='label label-success text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                            if (null != data.record.RAGStatus && data.record.RAGStatus.replace(/ /g, '') == '@Enums.RAGStatus.R.ToString()') {
                                return "<div class='label label-danger text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                            if (null != data.record.RAGStatus && data.record.RAGStatus.replace(/ /g, '') == '@Enums.RAGStatus.A.ToString()') {
                                return "<div class='label label-warning text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                            else {
                                return "<div class='text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                        }
                    }

                },

                recordsLoaded: function (event, data) {


                    RecordsLoadedEvent(event, data);

                }

            });
            $('#divPendingEntity').jtable('load', { taskName: '', statusToGet: '@Enums.WorkbasketAction.Pending', userRole: '@Enums.Role.Preparer', currentDate: currentDate, flag: flag });
        }
        else {

            currentDate = null;
            console.log('currentDate-' + currentDate, 'flag-' + flag, 'Onchangecondition in-IsFutureref-True');
            $('#divPendingEntity').jtable({
                //title: 'Task',
                paging: true,  //Enables paging
                pageSize: 10, //Actually this is not needed since default value is 10.
                sorting: true, //Enables sorting
                defaultSorting: 'FormattedEndDateInt asc', //Optional. Default sorting on first load.

                actions: {
                    listAction: function (postData, jtParams) {
                        return $.Deferred(function ($dfd) {
                            $.ajax({
                                url: '@Url.Action("GetWorkbasketItems", "Dashboard")',
                                type: 'POST',
                                dataType: 'json',
                                data: { taskName: '', jtStartIndex: jtParams.jtStartIndex, jtPageSize: jtParams.jtPageSize, jtSorting: jtParams.jtSorting, statusToGet: '@Enums.WorkbasketAction.Pending', userRole: '@Enums.Role.Preparer', priorityId: $("#priorityFilter").find('option:selected').val(), periodId: $("#OpenPeriods").find('option:selected').val(), currentDate: currentDate, flag: flag, __RequestVerificationToken: $(tokenId).val() },
                                success: function (data) {
                                    $dfd.resolve(data);
                                },
                                error: function () {
                                    $dfd.reject();
                                }
                            });
                        });
                    }
                },

                fields: {
                    Id: {
                        key: true,
                        create: false,
                        edit: false
                    },

                    Id: {
                        title: '@LableConstants.WorkBasketTaskId',
                        list: true,
                        width: '10%'
                    },

                    TaskName: {
                        title: '@LableConstants.WorkBasketTaskName',
                        width: '45%'
                    },

                    PeriodName: {
                        title: 'Period',
                        width: '15%'
                    },
                    Status: {
                        title: 'Status',
                        width: '15%'
                    }
                    ,
                    FormattedEndDateInt: {
                        title: 'Due By',
                        width: '15%',
                        display: function (data) {
                            if (null != data.record.RAGStatus && data.record.RAGStatus.replace(/ /g, '') == '@Enums.RAGStatus.G.ToString()') {
                                return "<div class='label label-success text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                            if (null != data.record.RAGStatus && data.record.RAGStatus.replace(/ /g, '') == '@Enums.RAGStatus.R.ToString()') {
                                return "<div class='label label-danger text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                            if (null != data.record.RAGStatus && data.record.RAGStatus.replace(/ /g, '') == '@Enums.RAGStatus.A.ToString()') {
                                return "<div class='label label-warning text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                            else {
                                return "<div class='text-center'>" + data.record.FormattedEndDateInt + "</div>";
                            }
                        }
                    }

                },

                recordsLoaded: function (event, data) {


                    RecordsLoadedEvent(event, data);

                }

            });
            $('#divPendingEntity').jtable('load', { taskName: '', statusToGet: '@Enums.WorkbasketAction.Pending', userRole: '@Enums.Role.Preparer', currentDate: currentDate, flag: flag });
        }
    });


</script>

@{
    Html.RenderPartial("_RowClickForWorkItems");
}

