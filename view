@model ECloseWebApp.Models.ViewModelForBusinessUnitDD
@using ECloseBL.Entities;
@{
    ViewBag.Title = "TeamTaskDetailsReport";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    path {
        fill: none;
        stroke: black;
    }

    body {
        background: #fff;
    }
</style>
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/d3.v3.min.js"></script>

<script type="text/javascript">
    $('#inputEntity').hide();
    $('#LoadRecords').hide();
    $('#divFilter').hide();

    $(function () {
        $('#datetimepicker').datetimepicker({
            viewMode: 'months',
            format: 'MMM-YYYY',
        });
    });

    $(document).ready(function () {
        $("#datepickermonth").val(function () {
            var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];;
            var date = new Date();
            return months[date.getMonth() - 1] + '-' + date.getFullYear();
        });

        $("#moduleName").text('Reports');
        $('#LoadRecords').click(function () {
            location.reload();
        });

        var report = '@ViewBag.Report';

        jQuery("#repName").text("Generate " + report + " Report");

        $('#btnReport').click(function () {
            debugger;
            var LocationId = $('#Location').val();
            var Location = $("#Location :selected").text();
            var TeamId = $('#Team').val();
            var Team = $("#Team :selected").text();
            var period = $('#datepickermonth').val();

            if (LocationId == null || LocationId == '') {
                // alert('Please select period !!');
                Command: toastr["info"]("Please select location !!");
                return false;
            }

            if (period == null || period == '') {
                // alert('Please select period !!');
                Command: toastr["info"]("Please select period !!");
                return false;
            }
            //document.getElementById("myReport").src = '@System.Configuration.ConfigurationManager.AppSettings["WebbAppUrl"]' + "/Reports/ReportViewer.aspx?Period=" + period + "&LocationId=" + LocationId + "&TeamId=" + TeamId + "&Report=" + report + "&Location=" + Location + "&Team=" + Team;

            $('#autoUpdate').modal('show');
        });

        $('#Location').change(function () {
            debugger;
            var LocationId = $(this).val();

            $.post('@Url.Action("GetTeamsForLocation", "Team")', { LocationId: LocationId },
                   function (results) {
                       $("#Team").empty();
                       $.each(results.Options, function (index, value) {
                           $("#Team").append("<option value='" + value.Value + "'>" + value.DisplayText + "</option>");
                       });
                   });
        })
    });
</script>


<div class="panel panel-white">
    <div class="panel-body">
        <div class="row">
            <div class="col-md-4">
                <div class="form-group  ">
                    <label title="">
                        Location :
                    </label>
                    @Html.DropDownListFor(m => m.Location, Model.Location, new { @class = "form-control" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group  no-m">
                    <label title="">
                        Period:
                    </label>
                    <div class='input-group date' id='datetimepicker'>
                        <input type="text" class="form-control" name="datepicker" id="datepickermonth" onkeydown="return false;" onpaste="return false;" />
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar">
                            </span>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="panel-footer">
        <button id="btnReport" class="btn btn-primary" onclick="updateDate()">Generate Graph</button>
    </div>
    <div class="row">
        <div id="wrapper" align="center">
        </div>
    </div>
</div>
<script type="text/javascript">

    function updateDate() {
        var colorData = [];
        var url = "/Report/filterdata";
        var urlParam = "";


        //here add a filter
        if (document.getElementById('Location').value != "0" && document.getElementById('datepickermonth').value != "0") {
            var Period = document.getElementById('datepickermonth').value;
            console.log(Period);
            url += "?LocationId=" + document.getElementById('Location').value;
            url += "&PeriodText=" + Period;
        }

        console.log(url);
        d3.json(url, function (data) {

            //convert string data into json
            data = JSON.parse(data)
            console.log(data);
            var format = d3.time.format("%d/%m/%Y");

            // x axis scal min and maximum data ...if yoy to do this dynamaic send the data for json assign here
            var dateMin = format.parse("20/03/2017");
            var dateMax = format.parse("01/07/2017");

            var margin = {
                top: 20,
                right: 20,
                bottom: 30,
                left: 120
            },
                width = 860 - margin.left - margin.right,
                height = 450 - margin.top - margin.bottom;

            // add for teamwise color legend  TODO : need to working
            var svg = d3.select("#wrapper").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            svg.append("rect")
                .attr("width", "100%")
                .attr("height", "100%")
                .attr("fill", "#F7F7F7");

           
            ///
            var xValue = function (d) {
                return format.parse(d.TaskDate);
            }, // data -> value
                xScale = d3.time.scale().domain([dateMin, dateMax]).range([0, width]), // value -> display
                xMap = function (d) {
                    console.log(xScale.domain()[1].toISOString());
                    return xScale(xValue(d));
                }, // data -> display
                xAxis = d3.svg.axis().scale(xScale).orient("bottom");
            var yValue = function (d) {
                return d.TaskNumber;
            }, // data -> value
                yScale = d3.scale.linear().range([height, 0]), // value -> display
                yMap = function (d) {
                    return yScale(yValue(d));
                }, // data -> display
                yAxis = d3.svg.axis().scale(yScale).orient("left");
            // setup fill color
            var cValue = function (d) {
                return d.ownership;
            },
                color = d3.scale.category10();

            // add the tooltip area to the webpage
            var tooltip = d3.select("#wrapper").append("div")
                .attr("class", "tooltip")
                .style("opacity", 0);

            // don't want dots overlapping axis, so add in buffer to data domain
            xScale.domain([d3.min(data, xValue), d3.max(data, xValue)]);
            yScale.domain([d3.min(data, yValue) - 1, d3.max(data, yValue) + 10]);

            //x-axis name
            svg.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis)
                .append("text")
                .attr("class", "label")
                .attr("x", width)
                .attr("y", -6)
                .style("text-anchor", "end")
                .text("Task End Date");

            // y-axis name
            svg.append("g")
                .attr("class", "y axis")
                .call(yAxis)
                .append("text")
                .attr("class", "label")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                .text("");

            // draw dots
            svg.selectAll(".dot")
                .data(data)
                .enter().append("circle")
                .attr("class", "dot")
                .attr("r", 3.5)
                .attr("cx", xMap)
                .attr("cy", yMap)
                .style("fill", function (d) {
                    return color(d.extra);
                }).append("title")
                .text(function (d) { return (d.TaskTitle + "(" + xValue(d) + ", " + yValue(d) + ")") })

                .on("mouseout", function (d) {
                    tooltip.transition()
                        .duration(500)
                        .style("opacity", 0);
                })
                .attr('data-title', function (e) {
                    return e.TaskTitle;
                })
                  .attr('data-team', function (e) {
                      return e.TeamName;
                  })
                .attr('data-value', function (e) {
                    return e.TaskNumber;
                })
                .attr('data-date', function (e) {
                    return e.TaskDate;
                })
                .attr('data-sqft', function (e) {
                    return e.extra;
                });
            // draw legend
            var legend = svg.selectAll(".legend")
                .data(color.domain())
              .enter().append("g")
                .attr("class", "legend")

                .attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });

            //var legend = svg.selectAll('.legend')
            //   .data(colorData)
            //   .enter().append('g')
            //   .attr('class', 'legend')
            //   .attr('ID', function (d) { return d.name })
            //   .attr("transform", function (d, i) {
            //       return "translate(" + 60 + "," + (i + 3) * 30 + ")";
            //   });

            // draw legend colored rectangles
            legend.append("rect")
                .attr("x", width - 18)
                .attr("width", 18)
                .attr("height", 18)
                .style("fill", color);

            // draw legend text
            legend.append("text")
                .attr("x", width - 24)
                .attr("y", 9)
                .attr("dy", ".35em")
                .style("text-anchor", "end")
                 .text(function (data) {
                     var newDict1 = {}
                     console.log(data.json);
                     for (var i = 0; i < data.length; i++) {
                         
                         newDict1[data[i]['TeamName']] = data[i]['TeamName'];
                     }
                     console.log(newDict1);
                     alert(newDict1.json);
                     return (Object.valueOf(newDict1));
                 })

            var line = d3.svg.line()
            .x(function (d) { return x(d.x); })
            .y(function (d) { return y(d.y); });

            //divs = jQuery.unique(divs);
           // var res2 = alasql('SELECT INDEX TeamName FROM ? GROUP BY TeamName', [d.TeamName]);
           
            //// Assuming first that you had **_valid json_**
            //myList = [
            //    { "id": "38", "product": "foo" },
            //    { "id": "38", "product": "foo" },
            //    { "id": "38", "product": "foo" },
            //    { "id": "39", "product": "bar" },
            //    { "id": "40", "product": "hello" },
            //    { "id": "40", "product": "hello" }
            //];

            //// What you're essentially attempting to do is turn this **list of objects** into a **dictionary**.
            //var newDict = {}

            //for (var i = 0; i < myList.length; i++) {
            //    newDict[myList[i]['id']] = myList[i]['product'];
            //}

            //// `newDict` is now:
            //console.log(newDict);
        })
    };
</script>

