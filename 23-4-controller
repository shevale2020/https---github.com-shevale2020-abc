using ECloseWebApp.BuisnessEntities;
using ECloseWebApp.HelperClasses;
using ECloseWebApp.Models;
using System;
using System.Web.Mvc;
using eCloseDataAccessLayer.HelperClasses;
using eCloseDataAccessLayer.Models;
using System.Collections.Generic;
using Newtonsoft.Json;
using System.Linq;

namespace ECloseWebApp.Controllers
{
    [HandleExceptionsAttribute]

    //public class TaskInfo
    //{
    //    public string TaskName { get; set; }
    //    //value is used for calculate task number
    //    public int? value { get; set; }
    //    //if any extra param to send
    //    public string extra { get; set; }
    //    public string TeamName { get; set; }
    //    // public int? TeamId { get; set; }
    //    public int? WorkbasketTaskId { get; set; }
    //    public int? DependsOnWorkbasketTaskId { get; set; }
    //    public DateTime EndDateInt { get; set; }

    //}
    public class ReportController : Controller
    {
        ReportClass cls = new ReportClass();
        log4net.ILog logger = log4net.LogManager.GetLogger(typeof(LoginController));  //Declaring Log4Net 
        // GET: Report
        public ActionResult Index()
        {

            if (Request.QueryString["report"].ToString() != null)
            {
                ViewBag.Report = Request.QueryString["report"].ToString();
            }
            int locationId = 0;
            int tenantId = SessionWrapper.TenantId;
            LocationClass locClass = new LocationClass();
            var locations = locClass.List(tenantId);
            var vm = new ViewModelForBusinessUnitDD();

            foreach (var location in locations)
            {
                vm.Location.Add(new SelectListItem { Text = location.LocationName + ' ' + '[' + location.TimeZone + ']', Value = location.Id.ToString() });
            }

            if (vm.Location.Count > 0 && vm.Location[0].Value != null)
            {
                locationId = Convert.ToInt32(vm.Location[0].Value);
            }

            TeamClass teamClass = new TeamClass();
            var responseTeam = teamClass.LocationTeams(locationId);
            foreach (var team in responseTeam)
            {
                vm.Team.Add(new SelectListItem { Text = team.TeamName, Value = team.Id.ToString() });
            }

            vm.Team.Insert(0, new SelectListItem { Text = "--All--", Value = "0" });

            PeriodClass periodClass = new PeriodClass();
            var Period = periodClass.GetOpenPeriods(locationId);
            if (Period.Count > 0)
            {
                foreach (var p in Period)
                {
                    vm.Period.Add(new SelectListItem { Text = p.PeriodText, Value = p.Id.ToString() });
                }
            }
            vm.Period.Insert(0, new SelectListItem { Text = "--Select--", Value = "0" });
            return View(vm);
        }
        public ActionResult TeamTaskDetailsReport()
        {
            int locationId = 0;
            int tenantId = SessionWrapper.TenantId;
            LocationClass locClass = new LocationClass();
            var locations = locClass.List(tenantId);
            var vm = new ViewModelForBusinessUnitDD();
        
            foreach (var location in locations)
            {
                vm.Location.Add(new SelectListItem { Text = location.LocationName + ' ' + '[' + location.TimeZone + ']', Value = location.Id.ToString() });
            }

            if (vm.Location.Count > 0 && vm.Location[0].Value != null)
            {
                locationId = Convert.ToInt32(vm.Location[0].Value);
            }

            return View(vm);

        }

        [HttpGet]
        public JsonResult Graphdata(int LocationId, int PeriodId,bool IndependentTask)
        {
            //Create sample data
            try
            {
                string result = "ERROR";
                string message = Constants.ErrorSessionExpired;
                int tenantId = SessionWrapper.TenantId;

                ReportClass _report = new ReportClass();
                var responseData = _report.GetTaskTimelineChartReport(LocationId, PeriodId, tenantId, IndependentTask);
                //var task = JsonConvert.DeserializeObject(responseData);
                System.Web.Script.Serialization.JavaScriptSerializer jSearializer =
                   new System.Web.Script.Serialization.JavaScriptSerializer();
                List<TaskInfo> taskDetails = new List<TaskInfo>();
                taskDetails = JsonConvert.DeserializeObject<List<TaskInfo>>(jSearializer.Serialize(responseData));
                if (taskDetails != null)
                {
                    List<TaskInfo> _info = new List<TaskInfo>();
                    _info = taskDetails;

                    // logic for add value of task date wise task number assign ..same date it will 1,2,3,4 etc
                    //string teamOldValue = "";
                    var teamCollection = (_info.GroupBy(x => x.TeamName)
                                                       .Select(TeamName => new
                                                       {
                                                           TeamName = TeamName.Key
                                                       }));
                    int count = 0;
                    var color = (teamCollection.Select(TeamName => new
                    {
                        value = count++,
                        name = TeamName.TeamName
                    }).ToList());

                    int teamCounter = 0;
                    foreach (var teamGroup in teamCollection)
                    {
                        string teamname = teamGroup.TeamName;

                        int teamDateMaxCount = _info.Where(x => x.TeamName == teamname).GroupBy(x => x.EndDateInt)
                                             .Max(g => g.Count());
                        int counter = 1;
                        string oldValue = "";
                        foreach (var item in _info.Where(x => x.TeamName == teamname).OrderBy(x => x.EndDateInt))
                        {
                            if (oldValue != item.EndDateInt?.ToString("dd/MM/yyyy"))
                            {
                                counter = 1;
                            }
                            else
                            {
                                counter++;
                            }
                            oldValue = item.EndDateInt?.ToString("dd/MM/yyyy");
                            item.value = teamCounter + counter;
                            item.extra = color.Where(x => x.name == teamname).First().value.ToString();
                        }
                        teamCounter += teamDateMaxCount;
                    }
                    //here customise column name
                    var output = from i in _info
                                 select new
                                 {
                                     TaskTitle = i.TaskName,
                                     TaskNumber = i.value,
                                     TaskDate = i.EndDateInt,
                                     TaskId = i.WorkbasketTaskId,
                                     extra = i.extra,
                                     DependsOnWorkbasketTaskId = i.DependsOnWorkbasketTaskId,
                                     //DependantTaskDate = _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt.ToString("dd/MM/yyyy"),
                                     //DependantTaskNumber = _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().value,
                                     //color = i.EndDateInt >= _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt ? "rgb(44, 160, 44)" : "rgb(214, 39, 40)", //green/red color
                                     DependantTaskDate = _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt?.ToString("dd/MM/yyyy") : i.EndDateInt?.ToString("dd/MM/yyyy"),
                                     DependantTaskNumber = _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().value : i.value,
                                     color = _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? (i.EndDateInt >= _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt ? "rgb(44, 160, 44)" : "rgb(214, 39, 40)") : "rgb(214, 39, 40)", //green/red color
                                     TeamName = i.TeamName
                                 };

                    return Json(JsonConvert.SerializeObject(output), JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { Result = "ERROR", Message = "Database Record Problem", Record = taskDetails }, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception ex)
            {
                return Json(new { Result = "ERROR", Message = "Database Record Problem" }, JsonRequestBehavior.AllowGet);
            }
            //return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });

        }
    }
}
