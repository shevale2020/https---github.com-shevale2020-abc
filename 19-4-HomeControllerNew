using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace WebApplication2.Controllers
{
    public class TaskInfo
    {
        public string TaskName { get; set; }
        //value is used for calculate task number
        public int? value { get; set; }
        //if any extra param to send
        public string extra { get; set; }
        public string TeamName { get; set; }
        // public int? TeamId { get; set; }
        public int? WorkbasketTaskId { get; set; }
        public int? DependsOnWorkbasketTaskId { get; set; }
        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0 dd/MM/yyyy}")]
        public DateTime? EndDateInt { get; set; }
        public List<TaskInfo> list { get; set; }
    }
    public class HomeController : Controller
    {
        public ActionResult Index()
        {


         
            return View();
        }

      
        public List<TaskInfo> GetTaskTimelineChartReport(int LocationId, int PeriodId, int tenantId)
        {
            //var result = (from WorkbasketTask in context.WorkbasketTasks
            //                        join Period in context.Periods
            //                        on WorkbasketTask.PeriodId equals Period.Id
            //                        join PeriodDay in context.PeriodDays
            //                        on Period.Id equals PeriodDay.PeriodId
            //                        join WorkbasketTaskUsers in context.WorkbasketTaskUsers
            //                        on WorkbasketTask.Id equals WorkbasketTaskUsers.WorkbasketTaskId
            //                        join DependentTask in context.DependentTasks
            //                        on WorkbasketTask.TaskId equals DependentTask.TaskId into DependentTaskinfo
            //                        from DependentTask in DependentTaskinfo.DefaultIfEmpty()
            //                        join Team in context.Teams
            //                        on WorkbasketTask.TeamId equals Team.Id into teaminfo
            //                        from Team in teaminfo.DefaultIfEmpty()
            //                        join Task in context.Tasks
            //                        on WorkbasketTask.TaskId equals Task.Id into taskinfo
            //                        from Task in taskinfo.DefaultIfEmpty()
            //                        where (WorkbasketTask.TaskId != null) && (WorkbasketTaskUsers.EndDateInt != null) && (Period.PeriodText == PeriodText) && (Period.LocationId == LocationId) && (WorkbasketTask.TenantId == tenantId)
            //                        group WorkbasketTask by new
            //                        {
            //                            WorkbasketTask.TeamId,
            //                            Team.TeamName,
            //                            Task.TaskName,
            //                            WorkbasketTask.TaskId,
            //                            DependentTask.DependentTaskId,
            //                            WorkbasketTaskUsers.EndDateInt
            //                        } into gcs
            //                        select new
            //                        {
            //                            TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,
            //                            TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,
            //                            TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,
            //                            TaskId = (gcs.Key.TaskId == null) ? 0 : gcs.Key.TaskId,
            //                            DependantTaskId = (gcs.Key.DependentTaskId == null) ? gcs.Key.TaskId : gcs.Key.DependentTaskId,
            //                            EndDate = gcs.Max(x => (gcs.Key.EndDateInt == null) ? "01/01/2000" : gcs.Key.EndDateInt.ToString()),
            //                            value = "",
            //                            extra = ""
            //                        }).ToList<dynamic>();



            TaskInfo list1 = new TaskInfo();
            list1.list = (from DependetWorkbasketTask in context.DependetWorkbasketTasks
                          join WorkbasketTask in context.WorkbasketTasks
                          on DependetWorkbasketTask.WorkbasketTaskId equals WorkbasketTask.Id
                          join Period in context.Periods
                          on WorkbasketTask.PeriodId equals Period.Id
                          join PeriodDays in context.PeriodDays
                          on Period.Id equals PeriodDays.PeriodId
                          join Team in context.Teams
                          on WorkbasketTask.TeamId equals Team.Id
                          join WorkbasketTaskUsers in context.WorkbasketTaskUsers
                          on DependetWorkbasketTask.DependsOnWorkbasketTaskId equals WorkbasketTaskUsers.Id
                          where (Period.LocationId == LocationId) && (Period.Id == PeriodId) && (WorkbasketTask.TenantId == tenantId)
                          group DependetWorkbasketTask by new
                          {
                              WorkbasketTaskUsers.EndDateInt,
                              DependetWorkbasketTask.WorkbasketTaskId,
                              DependetWorkbasketTask.DependsOnWorkbasketTaskId,
                              WorkbasketTask.TaskName,
                              Team.TeamName
                          } into gcs
                          select new TaskInfo
                          {
                              //TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,
                              TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,
                              TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,
                              WorkbasketTaskId = (gcs.Key.WorkbasketTaskId == null) ? 0 : gcs.Key.WorkbasketTaskId,
                              DependsOnWorkbasketTaskId = gcs.Key.DependsOnWorkbasketTaskId,
                              EndDateInt = gcs.Max(x => (gcs.Key.EndDateInt == null) ? DateTime.Today : gcs.Key.EndDateInt),
                              value = 0,
                              extra = ""
                          }).ToList<TaskInfo>();


            IEnumerable<int?> DependsOnWorkbasketTaskIdList;
            DependsOnWorkbasketTaskIdList = list1.list.Select(t => t.DependsOnWorkbasketTaskId);

            TaskInfo list3 = new TaskInfo();
            list3.list = (from WorkbasketTask in context.WorkbasketTasks
                          join DependetWorkbasketTask in context.DependetWorkbasketTasks
                          on WorkbasketTask.Id equals DependetWorkbasketTask.WorkbasketTaskId into DependetWorkbasketTaskinfo
                          from DependetWorkbasketTask in DependetWorkbasketTaskinfo.DefaultIfEmpty()
                          join Period in context.Periods
                          on WorkbasketTask.PeriodId equals Period.Id into Periodinfo
                          from Period in Periodinfo.DefaultIfEmpty()
                          join PeriodDays in context.PeriodDays
                          on Period.Id equals PeriodDays.PeriodId into PeriodDaysinfo
                          from PeriodDays in PeriodDaysinfo.DefaultIfEmpty()
                          join Team in context.Teams
                          on WorkbasketTask.TeamId equals Team.Id into Teaminfo
                          from Team in Teaminfo.DefaultIfEmpty()
                          join WorkbasketTaskUsers in context.WorkbasketTaskUsers
                          on WorkbasketTask.Id equals WorkbasketTaskUsers.Id into WorkbasketTaskUsersinfo
                          from WorkbasketTaskUsers in WorkbasketTaskUsersinfo.DefaultIfEmpty()
                          join record in DependsOnWorkbasketTaskIdList
                          on WorkbasketTask.Id equals record
                          group DependetWorkbasketTask by new
                          {
                              WorkbasketTaskUsers.EndDateInt,
                              WorkbasketTask.Id,
                              DependetWorkbasketTask.DependsOnWorkbasketTaskId,
                              WorkbasketTask.TaskName,
                              Team.TeamName
                          } into gcs
                          select new TaskInfo
                          {
                              //TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,
                              TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,
                              TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,
                              WorkbasketTaskId = (gcs.Key.Id == null) ? 0 : gcs.Key.Id,
                              DependsOnWorkbasketTaskId = (gcs.Key.DependsOnWorkbasketTaskId == null) ? gcs.Key.Id : gcs.Key.DependsOnWorkbasketTaskId,
                              EndDateInt = gcs.Max(x => (gcs.Key.EndDateInt == null) ? DateTime.Today : gcs.Key.EndDateInt),
                              value = 0,
                              extra = ""
                          }).ToList<TaskInfo>();
            List<TaskInfo> TaskList = new List<TaskInfo>();
            TaskList.AddRange(list1.list.ToList());
            TaskList.AddRange(list3.list.ToList());
            return TaskList;
        }


        [HttpGet]
        public JsonResult Graphdata(int LocationId, int PeriodId)
        {
            //Create sample data
            try
            {
                string result = "ERROR";
                string message = Constants.ErrorSessionExpired;
                int tenantId = SessionWrapper.TenantId;

                ReportClass _report = new ReportClass();
                var responseData = _report.GetTaskTimelineChartReport(LocationId, PeriodId, tenantId);
                //var task = JsonConvert.DeserializeObject(responseData);
                System.Web.Script.Serialization.JavaScriptSerializer jSearializer =
                   new System.Web.Script.Serialization.JavaScriptSerializer();
                List<TaskInfo> taskDetails = new List<TaskInfo>();
                taskDetails = JsonConvert.DeserializeObject<List<TaskInfo>>(jSearializer.Serialize(responseData));
                if (taskDetails != null)
                {
                    List<TaskInfo> _info = new List<TaskInfo>();
                    _info = taskDetails;

                    // logic for add value of task date wise task number assign ..same date it will 1,2,3,4 etc
                    //string teamOldValue = "";
                    var teamCollection = (_info.GroupBy(x => x.TeamName)
                                                       .Select(TeamName => new
                                                       {
                                                           TeamName = TeamName.Key
                                                       }));
                    int count = 0;
                    var color = (teamCollection.Select(TeamName => new
                    {
                        value = count++,
                        name = TeamName.TeamName
                    }).ToList());

                    int teamCounter = 0;
                    foreach (var teamGroup in teamCollection)
                    {
                        string teamname = teamGroup.TeamName;

                        int teamDateMaxCount = _info.Where(x => x.TeamName == teamname).GroupBy(x => x.EndDateInt)
                                             .Max(g => g.Count());
                        int counter = 1;
                        string oldValue = "";
                        foreach (var item in _info.Where(x => x.TeamName == teamname).OrderBy(x => x.EndDateInt))
                        {
                            if (oldValue != item.EndDateInt.ToString())
                            {
                                counter = 1;
                            }
                            else
                            {
                                counter++;
                            }
                            oldValue = item.EndDateInt.ToString();
                            item.value = teamCounter + counter;
                            item.extra = color.Where(x => x.name == teamname).First().value.ToString();
                        }
                        teamCounter += teamDateMaxCount;
                    }
                    //here customise column name
                    var output = from i in _info
                                 select new
                                 {
                                     TaskTitle = i.TaskName,
                                     TaskNumber = i.value,
                                     TaskDate = i.EndDateInt,
                                     TaskId = i.WorkbasketTaskId,
                                     extra = i.extra,
                                     DependsOnWorkbasketTaskId = i.DependsOnWorkbasketTaskId,
                                     //DependantTaskDate = _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt.ToString("dd/MM/yyyy"),
                                     //DependantTaskNumber = _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().value,
                                     //color = i.EndDateInt >= _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt ? "rgb(44, 160, 44)" : "rgb(214, 39, 40)", //green/red color
                                     DependantTaskDate = _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt : i.EndDateInt,
                                     DependantTaskNumber = _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().value : i.value,
                                     color = _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? (i.EndDateInt >= _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt ? "rgb(44, 160, 44)" : "rgb(214, 39, 40)") : "rgb(214, 39, 40)", //green/red color
                                     TeamName = i.TeamName
                                 };

                    return Json(JsonConvert.SerializeObject(output), JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { Result = "ERROR", Message = "Database Record Problem", Record = taskDetails }, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception ex)
            {
                return Json(new { Result = "ERROR", Message = "Database Record Problem" }, JsonRequestBehavior.AllowGet);
            }
            //return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });

        }
    }
}
