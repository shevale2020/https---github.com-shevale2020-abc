@model ECloseWebApp.Models.ViewModelForBusinessUnitDD
@using ECloseWebApp.BuisnessEntities;
@using ECloseBL.Entities;
@{
    ViewBag.Title = "TeamTaskDetailsReport";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    path {
        fill: none;
        stroke: black;
    }

    body {
        background: #fff;
    }
</style>
@*<script src="~/Scripts/jquery-1.10.2.min.js"></script>*@
<script src="~/Scripts/d3.v3.min.js"></script>
@if (Model != null)
{
    <div class="panel panel-white m-t-sm  " id="divDiscard">
        <div class="panel-body  row">

            @*<div class="col-md-4">
                <div class="form-group  no-m">
                    <label>
                        Show All Dependent Task :
                    </label>
                    <input type="checkbox" id="DependentTask" name="DependentTask" />
                </div>
            </div>*@
            <div class="col-md-4">
                <div class="form-group  no-m">
                    <label>
                        Show All Independent Task :
                    </label>
                    <input type="checkbox" id="IndependentTask" name="IndependentTask" />
                </div>
            </div>
            @*<div class="col-md-4">
                <div class="form-group  no-m">
                    <label>
                        Show All Task With Dependency :
                    </label>
                    <input type="checkbox" id="TaskWithDependency" name="TaskWithDependency" />
                </div>
            </div>*@
            <br />
            <br />
            <div class="col-md-4">
                <div class="form-group no-m">
                    <label>
                        Location :
                    </label>
                    @Html.DropDownListFor(m => m.Location, Model.Location, new { @class = "form-control", data_placeholder = "Select Location" })
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group  no-m">
                    <label>
                        Period :
                    </label>
                    @Html.DropDownListFor(m => m.Period, Model.Period, new { @class = "form-control", placeholder = "Select Period" })
                </div>
            </div>
        </div>
        <div class="panel-footer">
            <button id="btnReport" class="btn btn-primary" onclick="updateDate()">Generate Dependency Graph</button>
        </div>
        <div class="row">
            <div id="wrapper" align="center">
            </div>
        </div>
    </div>
}
<script type="text/javascript">
    $('#divFilter').hide();
    $('#Location').change(function () {
        var locationId = $(this).val();
        $.ajax({
            @*url: '@Constants.ApiPath' + 'api/' + 'Location/GetPeriodNTeamByLocationId',*@
            url: '@Url.Action("GetPeriodNTeamByLocationId", "Location")',
            data: { locationId: locationId },
            type: "Get",
            contentType: "application/json",
            success: function (data) {
                $("#Period").empty();
                $.each(data.Records.Period, function (index, value) {
                    $("#Period").append("<option value='" + value.Value + "'>" + value.Text + "</option>");
                });
            }
        });
    });
</script>


<script type="text/javascript">
    function updateDate() {
        debugger;
        var colorData = [];
        //here add a filter
        if ($('#Location').val() != "0" && $('#Period').val() != "0") {
            var Period = $('#Period').val();
            var locationId = $('#Location').val();
            var chart = d3.select("#wrapper");
            chart.selectAll("svg").remove();

            d3.json('../Report/Graphdata?LocationId=' + locationId + '&PeriodId=' + Period, function (data) {
                console.log(data);
                if (data != null || data.empty == true) {
                    var Data = JSON.parse(data);

                    if (Data.length == 0) {

                        Command: toastr["error"]("Record Not Present related Location and Period ");
                        return false;
                    }
                    else {

                        //lagend TeamNames
                        var TeamNames = [];
                        var TaskEndDates = [];
                        $.each(Data, function (index, value) {
                            if ($.inArray(value.TeamName, TeamNames) == -1) {
                                TeamNames.push(value.TeamName);
                            }
                            if ($.inArray(value.TaskDate, TaskEndDates) == -1) {
                                TaskEndDates.push(value.TaskDate);
                            }
                        });

                        //function sortDates(a, b) {
                        //    return a.getDate() - b.geteDate();
                        //}

                        var sorted = TaskEndDates.sort();
                        var minDate = sorted[0];
                        var maxDate = sorted[sorted.length - 1];

                        console.log(minDate);
                        console.log(maxDate);

                        var format = d3.time.format("%d/%m/%Y");
                        // x axis scal min and maximum Data ...if yoy to do this dynamaic send the Data for json assign here

                        var dateMin = new Date(format.parse(minDate));
                        var dateMax = new Date(format.parse(maxDate));

                        var margin = {
                            top: 20,
                            right: 20,
                            bottom: 30,
                            left: 120
                        },
                            width = 1200 - margin.left - margin.right,
                            height = 1000 - margin.top - margin.bottom;

                        //add for teamwise color legend  TODO : need to working

                        dateMin.setDate(dateMin.getDate() - 1);
                        var newMinDate = dateMin.toDateString();
                        newMinDate = new Date(Date.parse(newMinDate));

                        dateMax.setDate(dateMax.getDate() + 3);
                        var newMaxDate = dateMax.toDateString();
                        newMaxDate = new Date(Date.parse(newMaxDate));

                        ///
                        var xValue = function (d) {
                            return format.parse(d.TaskDate);
                        }, // Data -> value

                            xScale = d3.time.scale().domain([newMinDate, newMaxDate]).range([0, width], 3.5), // value -> display
                            xMap = function (d) {
                                // console.log(xScale.domain()[1].toISOString());
                                return xScale(xValue(d));
                            }, // Data -> display
                            xAxis = d3.svg.axis().scale(xScale).orient("bottom");
                        var yValue = function (d) {
                            return d.TaskNumber;
                        }, // Data -> value
                            yScale = d3.scale.linear().range([height, 0]), // value -> display
                            yMap = function (d) {
                                return yScale(yValue(d));
                            }, // Data -> display
                            yAxis = d3.svg.axis().scale(yScale).orient("left");
                        // setup fill color
                        var cValue = function (d) {
                            return d.ownership;
                        },
                            color = d3.scale.category10();

                        // add the graph canvas to the body of the webpage
                        var svg = d3.select("#wrapper").append("svg")
                            .attr("width", width + margin.left + margin.right)
                            .attr("height", height + margin.top + margin.bottom)
                            .append("g")
                            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                        svg.append("rect")
                           .attr("width", "100%")
                           .attr("height", "100%")
                           .attr("fill", "#F7F7F7");

                        // add the tooltip area to the webpage
                        var tooltip = d3.select("#wrapper").append("div")
                            .attr("class", "tooltip")
                            .style("opacity", 0);

                        // don't want dots overlapping axis, so add in buffer to Data domain

                        xScale.domain([newMinDate, newMaxDate]);
                        yScale.domain([d3.min(Data, yValue) - 1, d3.max(Data, yValue) + 10]);

                        //x-axis name
                        svg.append("g")
                            .attr("class", "x axis")
                            .attr("transform", "translate(0," + height + ")")
                            .call(xAxis)
                            .append("text")
                            .attr("class", "label")
                            .attr("x", width)
                            .attr("y", -6)
                            .style("text-anchor", "end")
                            .text("Task End Date");

                        // y-axis name
                        svg.append("g")
                            .attr("class", "y axis")
                            .call(yAxis)
                            .append("text")
                            .attr("class", "label")
                            .attr("transform", "rotate(-90)")
                            .attr("y", 6)
                            .attr("dy", ".71em")
                            .style("text-anchor", "end");
                            //.text();

                        // draw dots
                        svg.selectAll(".dot")
                            .data(Data)
                            .enter().append("circle")
                            .attr("class", "dot")
                            .attr("r", 3.5)
                            .attr("cx", xMap)
                            .attr("cy", yMap)
                            .style("fill", function (d) {
                                return color(d.extra);
                            })
                            //.append("title")
                            //.text(function (d) { return (d.TaskTitle + "(" + xValue(d) + ", " + yValue(d) + ")") })
                            .on("mouseover", function (d) {
                                tooltip.transition()
                                    .duration(200)
                                    .style("opacity", 0.9);
                                tooltip.html("<strong>Task No:</strong> " + d.TaskId + "<br/>" + "<strong>Task Name:</strong> " + d.TaskTitle + "<br/> " + "<strong>Duedate: </strong>" + d.TaskDate)
                                .style("left", (d3.event.pageX + 5) + "px")
                                .style("top", (d3.event.pageY - 28) + "px");
                            })
                            .on("mouseout", function (d) {
                                tooltip.transition()
                                    .duration(500)
                                    .style("opacity", 0);
                            })
                            .attr('data-title', function (e) {
                                return e.TaskTitle;
                            })
                            .attr('data-value', function (e) {
                                return e.TaskNumber;
                            })
                            .attr('data-date', function (e) {
                                return e.TaskDate;
                            })
                            .attr('data-sqft', function (e) {
                                return e.extra;
                            });

                        //draw line
                        for (var item in Data) {
                            //console.log(Data[item]["TaskNumber"]);

                            svg.append("line")
                                .attr("x1", xScale(format.parse(Data[item]["TaskDate"])))
                                .attr("y1", yScale(Data[item]["TaskNumber"]))
                                .attr("x2", xScale(format.parse(Data[item]["DependantTaskDate"])))
                                .attr("y2", yScale(Data[item]["DependantTaskNumber"]))
                                .attr("stroke-width", 1)
                                .attr("stroke", Data[item]["color"]);
                        }

                        // draw legend
                        var legend = svg.selectAll(".legend")
                            .data(color.domain())
                            .enter().append("g")
                            .attr("class", "legend")
                            .attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });

                        // draw legend colored rectangles
                        legend.append("rect")
                            .attr("x", width - 18)
                            .attr("width", 18)
                            .attr("height", 18)
                            .style("fill", color);

                        // draw legend text
                        legend.append("text")
                            .attr("x", width - 24)
                            .attr("y", 9)
                            .attr("dy", ".35em")
                            .style("text-anchor", "end")
                            .text(function (d) {
                                return (TeamNames[d]);
                            })
                    }
                }
                else {
                    Command: toastr["error"](data.Message);
                    return false;
                }
            })
        }
        else {
            Command: toastr["error"]("Please Select Location and Period");
            return false;
        }
    };
</script>
