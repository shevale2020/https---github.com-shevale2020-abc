     var result= (from DependetWorkbasketTask in context.DependetWorkbasketTasks
                          join WorkbasketTask in context.WorkbasketTasks
                          on DependetWorkbasketTask.WorkbasketTaskId equals WorkbasketTask.Id
                          join Period in context.Periods
                          on WorkbasketTask.PeriodId equals Period.Id
                          join PeriodDays in context.PeriodDays
                          on Period.Id equals PeriodDays.PeriodId
                          join Team in context.Teams
                          on WorkbasketTask.TeamId equals Team.Id
                          join WorkbasketTaskUsers in context.WorkbasketTaskUsers
                          on DependetWorkbasketTask.DependsOnWorkbasketTaskId equals WorkbasketTaskUsers.Id
                          where (Period.LocationId == 203) && (Period.Id == 110) && (WorkbasketTask.TenantId == 57)
                          group DependetWorkbasketTask by new
                          {
                              WorkbasketTaskUsers.EndDateInt,
                              DependetWorkbasketTask.WorkbasketTaskId,
                              DependetWorkbasketTask.DependsOnWorkbasketTaskId,
                              WorkbasketTask.TaskName,
                              Team.TeamName
                          } into gcs
                          select new
                          {
                              //TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,
                              TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,
                              TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,
                              WorkbasketTaskId = (gcs.Key.WorkbasketTaskId == null) ? 0 : gcs.Key.WorkbasketTaskId,
                              DependsOnWorkbasketTaskId = gcs.Key.DependsOnWorkbasketTaskId,
                              EndDate = gcs.Max(x => (gcs.Key.EndDateInt == null) ? "01/01/2000" : gcs.Key.EndDateInt.ToString()),
                              value = "",
                              extra = ""
                          }).ToList<dynamic>();


            var DependsOnWorkbasketTaskIdList = result.Select(t => t.DependsOnWorkbasketTaskId).ToList();

            var result2 = (from WorkbasketTask in context.WorkbasketTasks
                           join DependetWorkbasketTask in context.DependetWorkbasketTasks
                           on WorkbasketTask.Id equals DependetWorkbasketTask.WorkbasketTaskId into DependetWorkbasketTaskinfo
                           from DependetWorkbasketTask in DependetWorkbasketTaskinfo.DefaultIfEmpty()
                           join Period in context.Periods
                           on WorkbasketTask.PeriodId equals Period.Id into Periodinfo
                           from Period in Periodinfo.DefaultIfEmpty()
                           join PeriodDays in context.PeriodDays
                           on Period.Id equals PeriodDays.PeriodId into PeriodDaysinfo
                           from PeriodDays in PeriodDaysinfo.DefaultIfEmpty()
                           join Team in context.Teams
                           on WorkbasketTask.TeamId equals Team.Id into Teaminfo
                           from Team in Teaminfo.DefaultIfEmpty()
                           join WorkbasketTaskUsers in context.WorkbasketTaskUsers
                           on WorkbasketTask.Id equals WorkbasketTaskUsers.Id into WorkbasketTaskUsersinfo
                           from WorkbasketTaskUsers in WorkbasketTaskUsersinfo.DefaultIfEmpty()
                           where (DependsOnWorkbasketTaskIdList.Contains(WorkbasketTask.Id)) //&& (Period.LocationId == 203) && (Period.Id == 110) && (WorkbasketTask.TenantId == 57)
                           group WorkbasketTask by new
                           {
                               WorkbasketTaskUsers.EndDateInt,
                               WorkbasketTask.Id,
                               DependetWorkbasketTask.DependsOnWorkbasketTaskId,
                               WorkbasketTask.TaskName,
                               Team.TeamName
                           } into gcs
                           select new
                           {
                               TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,
                               TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,
                               WorkbasketTaskId = (gcs.Key.Id == null) ? 0 : gcs.Key.Id,
                               DependsOnWorkbasketTaskId = (gcs.Key.DependsOnWorkbasketTaskId == null) ? gcs.Key.Id : gcs.Key.DependsOnWorkbasketTaskId,
                               EndDate = gcs.Max(x => (gcs.Key.EndDateInt == null) ? "01/01/2000" : gcs.Key.EndDateInt.ToString()),
                               value = "",
                               extra = ""
                           }).ToList<dynamic>();
                           
                           
                           
                           
                           
                           
                           Exception thrown: 'System.NotSupportedException' in EntityFramework.SqlServer.dll

Additional information: Unable to create a constant value of type 'System.Object'. Only primitive types or enumeration types are supported in this context.
