   public JsonResult Graphdata(int LocationId, int PeriodId,int TaskType = 2)
        {
            //Create sample data
            try
            {
                string result = "ERROR";
                string message = Constants.ErrorSessionExpired;
                int tenantId = SessionWrapper.TenantId;

                ReportClass _report = new ReportClass();
                var _info = _report.GetTaskTimelineChartReport(LocationId, PeriodId, tenantId, TaskType).Where(x => x.EndDateInt != null);
                //var task = JsonConvert.DeserializeObject(responseData);

                if (_info != null)
                {
                    // logic for add value of task date wise task number assign ..same date it will 1,2,3,4 etc
                    //string teamOldValue = "";
                    var teamCollection = (_info.GroupBy(x => x.TeamName)
                                                       .Select(TeamName => new
                                                       {
                                                           TeamName = TeamName.Key
                                                       }));
                    int count = 0;
                    var color = (teamCollection.Select(TeamName => new
                    {
                        value = count++,
                        name = TeamName.TeamName
                    }).ToList());

                    //int teamCounter = 0;
                    //List<TaskInfo> _newInfo = new List<TaskInfo>();

                    //foreach (var teamGroup in teamCollection)
                    //{
                    //    string teamname = teamGroup.TeamName;

                    //    int teamDateMaxCount = _info.Where(x => x.TeamName == teamname).GroupBy(x => x.EndDateInt.Value)
                    //                         .Max(g => g.Count());
                    //    int counter = 1;
                    //    string oldValue = "";
                    //    var SortedList = _info.Where(x => x.TeamName == teamname).OrderBy(x => x.EndDateInt.Value.Date.Ticks);
                    //    foreach (var item in SortedList)
                    //    {
                    //        if (oldValue != item.EndDateInt.Value.ToShortDateString())
                    //        {
                    //            counter = 1;
                    //        }
                    //        else
                    //        {
                    //            if (_newInfo.Where(x => x.WorkbasketTaskId == item.WorkbasketTaskId).Count() == 0)
                    //            {
                    //                counter++;
                    //            }
                    //        }
                    //        oldValue = item.EndDateInt.Value.ToShortDateString();
                    //        item.value = teamCounter + counter;
                    //        item.extra = color.Where(x => x.name == teamname).First().value.ToString();
                    //        _newInfo.Add(item);

                    //    }
                    //    teamCounter += teamDateMaxCount;
                    //}

                    int teamCounter = 0;
                    List<TaskInfo> _newInfo = new List<TaskInfo>();

                    foreach (var teamGroup in teamCollection)
                    {
                        string teamname = teamGroup.TeamName;


                        var SortedList = _info.Where(x => x.TeamName == teamname).OrderBy(x => x.EndDateInt.Value.Date.Ticks);
                        foreach (var item in SortedList)
                        {

                            ++teamCounter;

                            item.value = teamCounter;
                            item.extra = color.Where(x => x.name == teamname).First().value.ToString();
                            _newInfo.Add(item);

                        }
                    }
                    //here customise column name
                    var output = from i in _newInfo
                                 select new
                                 {
                                     TaskTitle = i.TaskName,
                                     TaskNumber = i.value,
                                     TaskDate = i.EndDateInt.Value.ToString("yyyy-MM-dd"),
                                     TaskId = i.WorkbasketTaskId,
                                     extra = i.extra,
                                     DependsOnWorkbasketTaskId = i.DependsOnWorkbasketTaskId,
                                     DependantTaskDate = _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt.Value.ToString("yyyy-MM-dd") : i.EndDateInt.Value.ToString("yyyy-MM-dd"),
                                     DependantTaskNumber = _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().value : i.value,
                                     DependantTaskName = _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().TaskName : "",
                                     color = _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? (i.EndDateInt >= _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt ? "rgb(44, 160, 44)" : "rgb(214, 39, 40)") : "rgb(214, 39, 40)", //green/red color
                                     TeamName = i.TeamName,
                                     IsDependantTask = i.IsDependantTask,
                                 };

                    return Json(JsonConvert.SerializeObject(output), JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { Result = "ERROR", Message = "Database Record Problem", Record = _info }, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception ex)
            {
                return Json(new { Result = "ERROR", Message = "Database Record Problem" }, JsonRequestBehavior.AllowGet);
            }
            //return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });

        }
