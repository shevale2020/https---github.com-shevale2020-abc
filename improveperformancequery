  if (currentDate != "null")
                {

                    CurrentDate = Convert.ToDateTime(currentDate);
                    var workitemList = new List<Workitems>();
                    var totalRecords = TotalCountOfWorkitemsForPending(tenantId, taskName, userId, userRole, priorityId, periodId, currentDate);
                    IQueryable<Workitems> workbasketQuery;
                    using (ECloseContext context = new ECloseContext())
                    {
                        if (userRole == preparer)
                        {

                            workbasketQuery = (context.WorkbasketTasks.Where(a => a.IsDeleted == false && a.TenantId == tenantId && a.WorkflowAction.Status != DiscardedStatus && ((periodId != "0") ? a.Period.PeriodText == periodId : true)
                                                                   && a.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false && EntityFunctions.TruncateTime(b.EndDateInt) <= CurrentDate.Date).Any()
                                                                   && (taskName.Length > 0 ? a.TaskName.Contains(taskName) : true)
                                                                   // user level should match with WorkbasketTask workflow level ie 0
                                                                   && (a.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false && EntityFunctions.TruncateTime(b.EndDateInt) <= CurrentDate.Date).Select(b => b.WFLevel).FirstOrDefault() == 0)
                                                                   && (a.WorkflowAction.WorkflowLevel == 0)
                                                                   && (a.WorkflowAction.Status != completedStatus)
                                                                   && (!(a.Period.IsClosed))
                                                                   && ((priorityId > 0) ? a.PriorityId == priorityId : true)
                                                                   )
                                                                    .OrderBy(p => p.Period.PeriodYear).ThenBy(p => p.Period.PeriodMonth)
                                                           .Select(c => new Workitems
                                                           {
                                                               Id = c.Id,
                                                               TeamName = context.Locations.Where(r => r.Id == c.Team.LocationId).Select(r => r.LocationName).FirstOrDefault() + "-" + c.Team.TeamName,
                                                               TaskName = c.TaskName,
                                                               Status = c.WorkflowAction.Status,
                                                               TaskAtLevel = c.WorkflowAction.WorkflowLevel,
                                                               TaskAtLevelText = c.Workflow.WorkflowLevels.Where(lvl => lvl.Level == c.WorkflowAction.WorkflowLevel).Select(lvl => lvl.LevelText).FirstOrDefault(),
                                                               LoginedUserAssignedAtLevel = c.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false && EntityFunctions.TruncateTime(b.EndDateInt) <= CurrentDate.Date).Select(b => b.WFLevel).FirstOrDefault(),
                                                               NextApprover = (c.WorkflowAction.Status == completedStatus || c.WorkflowAction.Status == closeStatus || c.WorkflowAction.Status == approveStatus) ? ""
                                                               : c.WorkbasketTaskUsers.Where(d => d.IsDeleted == false &&
                                                                                                     d.WFLevel == ((c.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false && EntityFunctions.TruncateTime(b.EndDateInt) <= CurrentDate.Date).Select(b => b.WFLevel).FirstOrDefault() != c.WorkflowAction.WorkflowLevel) ? c.WorkflowAction.WorkflowLevel : c.WorkflowAction.WorkflowLevel + 1))//
                                                                                                 .Select(e => e.User.UserName + " " + "[" + e.User.LoginId + "]").FirstOrDefault(),
                                                               TotalRecords = totalRecords,
                                                               ActionsCanBeTakenAgainstWBTaskId =
                                                                c.Workflow.WorkflowActions.Where(a => !(c.DependetWorkbasketTasks1.Where(d => d.CanStart == false).Any()) && c.WorkflowAction.Status != completedStatus && a.IsDeleted == false && a.WorkflowId == c.WorkflowId && a.WorkflowLevel == c.WorkflowAction.WorkflowLevel && a.IsAction == true
                                                                                                && (c.WorkflowAction.WorkflowLevel == c.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false && EntityFunctions.TruncateTime(b.EndDateInt) <= CurrentDate.Date).Select(b => b.WFLevel).FirstOrDefault()))
                                                                                                .Select(a => new SelectListItem { Text = a.Status, Value = a.Status }).ToList(),
                                                               CanStart = !(c.DependetWorkbasketTasks1.Where(d => d.CanStart == false).Any()),// required to decide rendering of action buttons
                                                                                                                                              // period name required for creating directory for file upload
                                                               PeriodName = c.Period.PeriodText,
                                                               TenantName = c.Team.Location.Tenant.Name,
                                                               WorkFlowId = c.WorkflowId,
                                                               WorkflowName = c.Workflow.WorkflowName,
                                                               PeriodMonth = c.Period.PeriodMonth.ToString(),
                                                               PeriodYear = c.Period.PeriodYear.ToString(),
                                                               LastLevelForApproval = c.WorkbasketTaskUsers.Where(d => d.IsDeleted == false && EntityFunctions.TruncateTime(d.EndDateInt) <= CurrentDate.Date).Count() - 1, // needed for client side validation
                                                               RAGStatus = c.WorkbasketTaskUsers.Where(b => b.WFLevel == c.WorkflowAction.WorkflowLevel && b.IsDeleted == false && EntityFunctions.TruncateTime(b.EndDateInt) <= CurrentDate.Date).Select(b => b.RAGStatusInt).FirstOrDefault(),
                                                               EndDateInt = c.WorkbasketTaskUsers.Where(b => b.IsDeleted == false && b.WFLevel == c.WorkflowAction.WorkflowLevel && EntityFunctions.TruncateTime(b.EndDateInt) <= CurrentDate.Date).Select(b => b.EndDateInt).FirstOrDefault(),
                                                               Priority = c.Priority1.PriorityName,
                                                               Description = c.Description,
                                                               IsAttachmentRequired = c.Tenant.IsAttachmentRequired
                                                           }
                                                                  ));
                        }
