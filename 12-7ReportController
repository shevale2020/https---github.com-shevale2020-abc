using ECloseWebApp.BuisnessEntities;
using ECloseWebApp.HelperClasses;
using ECloseWebApp.Models;
using System;
using System.Web.Mvc;
using eCloseDataAccessLayer.HelperClasses;
using eCloseDataAccessLayer.Models;
using System.Collections.Generic;
using Newtonsoft.Json;
using System.Linq;
using ECloseBL.Entities;
using System.IO;
using System.Web;
//using Microsoft.Office.Interop.Excel;

namespace ECloseWebApp.Controllers
{
    [HandleExceptionsAttribute]

    public class ReportController : Controller
    {
        private string pendingStatus = Enums.WorkbasketAction.Pending.ToString();
        ReportClass cls = new ReportClass();
        WorkbasketClass wcls = new WorkbasketClass();
        log4net.ILog logger = log4net.LogManager.GetLogger(typeof(LoginController));  //Declaring Log4Net 
                                                                                      // GET: Report
        [CustomAuthorization(Enums.Role.Supervisor, Enums.Role.TenantAdmin, Enums.Role.Controller)]
        public ActionResult Index()
        {
            if (Request.QueryString["report"].ToString() != null)
            {
                ViewBag.Report = Request.QueryString["report"].ToString();
            }
            int locationId = 0;
            int tenantId = SessionWrapper.TenantId;
            LocationClass locClass = new LocationClass();
            var locations = locClass.List(tenantId);
            var vm = new ViewModelForBusinessUnitDD();

            foreach (var location in locations)
            {
                vm.Location.Add(new SelectListItem { Text = location.LocationName + ' ' + '[' + location.TimeZone + ']', Value = location.Id.ToString() });
            }

            if (vm.Location.Count > 0 && vm.Location[0].Value != null)
            {
                locationId = Convert.ToInt32(vm.Location[0].Value);
            }
            vm.Location.Insert(0, new SelectListItem { Text = "--Select--", Value = "0" });

            TeamClass teamClass = new TeamClass();
            var responseTeam = teamClass.LocationTeams(locationId);
            foreach (var team in responseTeam)
            {
                vm.Team.Add(new SelectListItem { Text = team.TeamName, Value = team.Id.ToString() });
            }

            vm.Team.Insert(0, new SelectListItem { Text = "--Select--", Value = "0" });

            PeriodClass periodClass = new PeriodClass();
            var Period = periodClass.GetOpenPeriods(locationId);
            if (Period.Count > 0)
            {
                foreach (var p in Period)
                {
                    vm.Period.Add(new SelectListItem { Text = p.PeriodText, Value = p.Id.ToString() });
                }
            }
            vm.Period.Insert(0, new SelectListItem { Text = "--Select--", Value = "0" });
            return View(vm);
        }

        [CustomAuthorization(Enums.Role.Supervisor, Enums.Role.TenantAdmin, Enums.Role.Controller)]
        [Route("DependencyGraph")]
        public ActionResult TeamTaskDetailsReport()
        {
            int locationId = 0;
            int tenantId = SessionWrapper.TenantId;
            LocationClass locClass = new LocationClass();
            var locations = locClass.List(tenantId);
            var vm = new ViewModelForBusinessUnitDD();

            foreach (var location in locations)
            {
                vm.Location.Add(new SelectListItem { Text = location.LocationName + ' ' + '[' + location.TimeZone + ']', Value = location.Id.ToString() });
            }

            if (vm.Location.Count > 0 && vm.Location[0].Value != null)
            {
                locationId = Convert.ToInt32(vm.Location[0].Value);
            }
            vm.Location.Insert(0, new SelectListItem { Text = "--Select--", Value = "0" });

            return View(vm);

        }

        [HttpGet]
        [CustomAuthorization(Enums.Role.Supervisor, Enums.Role.TenantAdmin, Enums.Role.Controller)]
        public JsonResult Graphdata(int LocationId, int PeriodId, int TaskType = 2)
        {
            //Create sample data
            try
            {
                string result = "ERROR";
                string message = Constants.ErrorSessionExpired;
                int tenantId = SessionWrapper.TenantId;

                ReportClass _report = new ReportClass();
                var _info = _report.GetTaskTimelineChartReport(LocationId, PeriodId, tenantId, TaskType).Where(x => x.EndDateInt != null);
                //var task = JsonConvert.DeserializeObject(responseData);

                if (_info != null)
                {
                    // logic for add value of task date wise task number assign ..same date it will 1,2,3,4 etc
                    //string teamOldValue = "";
                    var teamCollection = (_info.GroupBy(x => x.TeamName)
                                                       .Select(TeamName => new
                                                       {
                                                           TeamName = TeamName.Key
                                                       }));
                    int count = 0;
                    var color = (teamCollection.Select(TeamName => new
                    {
                        value = count++,
                        name = TeamName.TeamName
                    }).ToList());



                    int teamCounter = 0;
                    List<TaskInfo> _newInfo = new List<TaskInfo>();

                    List<TaskInfo> minmaxdate = new List<TaskInfo>();
                    minmaxdate = _report.GetTaskMinMaxDate(PeriodId);//.Where(x => x.EndDateInt != null);

                    foreach (var teamGroup in teamCollection)
                    {
                        string teamname = teamGroup.TeamName;


                        var SortedList = _info.Where(x => x.TeamName == teamname).OrderBy(x => x.EndDateInt.Value.Date.Ticks);
                        foreach (var item in SortedList)
                        {
                            if (_newInfo.Where(x => x.WorkbasketTaskId == item.WorkbasketTaskId).Count() == 0)
                            {
                                ++teamCounter;
                                item.value = teamCounter;
                            }
                            else
                            {
                                item.value = _newInfo.Where(x => x.WorkbasketTaskId == item.WorkbasketTaskId).FirstOrDefault().value;
                            }

                            item.extra = color.Where(x => x.name == teamname).First().value.ToString();
                            foreach (var date in minmaxdate)
                            {
                                item.EndDate = date.EndDate;
                                item.StartDate = date.StartDate;
                            }

                            _newInfo.Add(item);

                        }
                    }
                    //here customise column name
                    var output = from i in _newInfo
                                 select new
                                 {
                                     TaskTitle = i.TaskName,
                                     TaskNumber = i.value,
                                     TaskDate = i.EndDateInt.Value.ToString("yyyy-MM-dd"),
                                     TaskId = i.WorkbasketTaskId,
                                     extra = i.extra,
                                     DependsOnWorkbasketTaskId = i.DependsOnWorkbasketTaskId,
                                     DependantTaskDate = _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt.Value.ToString("yyyy-MM-dd") : i.EndDateInt.Value.ToString("yyyy-MM-dd"),
                                     DependantTaskNumber = _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().value : i.value,
                                     DependantTaskName = _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().TaskName : "",
                                     color = _newInfo.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).Count() > 0 ? (i.EndDateInt >= _info.Where(x => x.WorkbasketTaskId == i.DependsOnWorkbasketTaskId).FirstOrDefault().EndDateInt ? "rgb(44, 160, 44)" : "rgb(214, 39, 40)") : "rgb(214, 39, 40)", //green/red color
                                     TeamName = i.TeamName,
                                     IsDependantTask = i.IsDependantTask,
                                     EndDate = i.EndDate.Value.ToString("yyyy-MM-dd"),
                                     StartDate = i.StartDate.Value.ToString("yyyy-MM-dd")
                                 };



                    return Json(JsonConvert.SerializeObject(output), JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { Result = "ERROR", Message = "Database Record Problem", Record = _info }, JsonRequestBehavior.AllowGet);
                }

            }
            catch (Exception ex)
            {
                return Json(new { Result = "ERROR", Message = "Database Record Problem" }, JsonRequestBehavior.AllowGet);
            }
            //return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });

        }

        [HttpGet]
        public ActionResult GetPopUpTaskDetails(int Id = 0, string taskName = "")

        {
            TaskInfo newtask = new TaskInfo();
            newtask.WorkbasketTaskId = Id;
            newtask.TaskName = taskName;
            return View("_ReportTaskDetails", newtask);
        }

        [HttpPost]
      
        [ValidateAntiForgeryToken]
        public JsonResult GetWorkbasketItems(int workbasketTaskId, string taskName, int jtStartIndex, int jtPageSize, string jtSorting, string statusToGet, string userRole, int priorityId = 0)//, string periodId = null)
        {
          
            try
            {
                if (null == SessionWrapper.UserEntity)
                    return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
                var TenantId = SessionWrapper.TenantId;
                UserEntity user = SessionWrapper.UserEntity;

                List<Workitems> workitemsList = new List<Workitems>();

                workitemsList = cls.GetWorkitems(TenantId, workbasketTaskId, taskName, user.UserID);//,jtSorting, jtStartIndex, jtPageSize, userRole, priorityId);

                if (workitemsList != null)
                {
                    return Json(new { Records = workitemsList, Result = "OK", TotalRecordCount = workitemsList.Count > 0 ? workitemsList[0].TotalRecords : 0 });
                }
            }
            catch (Exception ex)
            {
                logger.Error(ex.ToString());
                return Json(new { Result = "ERROR", Message = ex.Message });
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [ValidateInput(false)]
        public void ExportChart(string data)
        {
                StringWriter oStringWriter = new StringWriter();
                data = HttpUtility.UrlDecode(data);
                data = System.Uri.UnescapeDataString(data);
                oStringWriter.WriteLine(System.Uri.UnescapeDataString(data));
                Response.ContentType = "text/plain";
                Response.AddHeader("Content-Disposition", String.Format("attachment;filename={0}", ("graph.svg")));
                Response.Clear();
                using (StreamWriter writer = new StreamWriter(Response.OutputStream))
                {
                    data = oStringWriter.ToString();
                    writer.Write(oStringWriter.ToString());
                }
                Response.End();
         }


        #region Report Details Table data 

        [HttpGet]
        [CustomAuthorization(Enums.Role.Supervisor, Enums.Role.TenantAdmin, Enums.Role.Controller)]
        public JsonResult ReportDetailTableData(string PeriodText, int LocationId, int TeamId, string ReportName, string Location, string Team)
        {
            try
            {
                int tenantId, userId;
                string role, userName, currentTime, tenant;
                tenant = SessionWrapper.TenantName;
                tenantId = SessionWrapper.TenantId;
                userId = SessionWrapper.UserId;
                role = SessionWrapper.UserRole;
                userName = SessionWrapper.UserName;
                currentTime = (DateTime.UtcNow).ToString("dd-MMM-yy HH:mm:ss") + " UTC";

                PeriodClass cls = new PeriodClass();
                int periodId = cls.GetPeriodId(LocationId, PeriodText);

                ReportClass reportClass = new ReportClass();

                switch (ReportName)
                {
                    case "Hold":
                        var holdReportData = reportClass.GetHoldData(periodId, tenantId, LocationId, TeamId, userId, role);
                        var holdData = from h in holdReportData
                                       select new
                                       {
                                           Team = h.Team,
                                           TaskId = h.TaskId,
                                           Task = h.Task,
                                           Priority = h.Priority,
                                           HoldAtLevel = h.HoldAtLevel,
                                           HoldBy = h.HoldBy,
                                           ReasonCode = h.ReasonCode,
                                           Comments = h.Comments,
                                           HoldOn = h.HoldOn
                                       };
                        return Json(JsonConvert.SerializeObject(holdData), JsonRequestBehavior.AllowGet);
                        break;

                    case "Reject":
                        var rejectReportData = reportClass.GetRejectData(periodId, tenantId, LocationId, TeamId, userId, role);
                        var rejectData = from r in rejectReportData
                                         select new
                                         {
                                             Team = r.Team,
                                             TaskId = r.TaskId,
                                             Task = r.Task,
                                             Priority = r.Priority,
                                             RejectionLevel = r.RejectionLevel,
                                             RejectedBy = r.RejectedBy,
                                             RejectedOn = r.RejectedOn,
                                             ReasonCode = r.ReasonCode,
                                             Comments = r.Comments
                                         };
                        return Json(JsonConvert.SerializeObject(rejectData), JsonRequestBehavior.AllowGet);
                        break;

                    case "DueDay":
                        var duedayReportData = reportClass.GetTATData(periodId, tenantId, LocationId, TeamId, userId, role);
                        var output = from d in duedayReportData
                                     select new
                                     {
                                         Team = d.Team,
                                         TaskId = d.TaskId,
                                         Task = d.Task,
                                         Priority = d.Priority,
                                         WorkflowLevel = d.WorkflowLevel,
                                         User = d.User,
                                         ActionDate = d.ActionDate,
                                         InternalTATDate = d.InternalTATDate,
                                         ExternalTATDate = d.ExternalTATDate
                                     };
                        return Json(JsonConvert.SerializeObject(output), JsonRequestBehavior.AllowGet);
                        break;

                    case "Status":
                        var statusReportData = reportClass.GetTasksData(periodId, tenantId, LocationId, TeamId, userId, role);
                        var statusData = from x in statusReportData
                                         select new
                                         {
                                             Team = x.Team,
                                             TaskId = x.TaskId,
                                             Task = x.Task,
                                             Priority = x.Priority,
                                             Preparer = x.Preparer,
                                             CurrentLevel = x.CurrentLevel,
                                             Status = x.Status,
                                             IsAdhoc = x.IsAdhoc,
                                             CreatedOn = x.CreatedOn
                                         };
                        return Json(JsonConvert.SerializeObject(statusData), JsonRequestBehavior.AllowGet);
                        break;

                    case "Exception":
                        var ExceptionReportData = reportClass.GetExceptionalTaskReport(LocationId, tenantId, TeamId, PeriodText, userId, role);
                        var exceptionData = from w in ExceptionReportData
                                            select new
                                            {
                                                Id = w.Id,
                                                TeamName = w.TeamName,
                                                TaskName = w.TaskName,
                                                Status = w.Status,
                                                Priority = w.Priority,
                                                TaskAtLevelText = w.TaskAtLevelText,
                                                User = w.User,
                                                PeriodName = w.PeriodName,
                                                IsForcefullyClosed = "yes",
                                            };
                        return Json(JsonConvert.SerializeObject(exceptionData), JsonRequestBehavior.AllowGet);
                        break;
                }
                return Json(new { Result = "ERROR", Message = SessionWrapper.ErrorMsg }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { Result = "ERROR", Message = ex.Message }, JsonRequestBehavior.AllowGet);
            }
        }

        #endregion Report Details Table data 

        [CustomAuthorization(Enums.Role.Supervisor, Enums.Role.TenantAdmin, Enums.Role.Controller)]
        [Route("Summary")]
        public ActionResult SummaryReportView()
        {
            int locationId = 0;
            int tenantId = SessionWrapper.TenantId;
            LocationClass locClass = new LocationClass();
            var locations = locClass.List(tenantId);
            var vm = new ViewModelForBusinessUnitDD();

            foreach (var location in locations)
            {
                vm.Location.Add(new SelectListItem { Text = location.LocationName + ' ' + '[' + location.TimeZone + ']', Value = location.Id.ToString() });
            }

            if (vm.Location.Count > 0 && vm.Location[0].Value != null)
            {
                locationId = Convert.ToInt32(vm.Location[0].Value);
            }
            vm.Location.Insert(0, new SelectListItem { Text = "--All--", Value = "0" });

            TeamClass teamClass = new TeamClass();
            var responseTeam = teamClass.LocationTeams(locationId);
            foreach (var team in responseTeam)
            {
                vm.Team.Add(new SelectListItem { Text = team.TeamName, Value = team.Id.ToString() });
            }

            vm.Team.Insert(0, new SelectListItem { Text = "--All--", Value = "0" });

            PeriodClass periodClass = new PeriodClass();
            var Period = periodClass.GetOpenPeriods(locationId);
            if (Period.Count > 0)
            {
                foreach (var p in Period)
                {
                    vm.Period.Add(new SelectListItem { Text = p.PeriodText, Value = p.Id.ToString() });
                }
            }
            vm.Period.Insert(0, new SelectListItem { Text = "--Select--", Value = "0" });
            return View("SummaryReport" ,vm);
        } 

        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.Supervisor, Enums.Role.TenantAdmin, Enums.Role.Controller)]
        public ActionResult SummaryReportDetails(int jtStartIndex,int jtPageSize,string Date)
        {
            try 
            {
                if (Date != null)
                {
                    Date = "12/07/2018";
                    ReportClass _report = new ReportClass();
                    
                    List<SummaryInfo> workitemsList = new List<SummaryInfo>();
                    var SummarryData= _report.SummaryReportOnDate(Convert.ToDateTime(Date));
                    return Json(new { Result = "OK", Records = SummarryData });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }
    }
 }
