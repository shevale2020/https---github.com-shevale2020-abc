using ECloseWebApp.BuisnessEntities;
using ECloseBL.Entities;
using ECloseWebApp.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Web;
using System.Web.Mvc;
using OfficeOpenXml;
using System.Data;
using System.IO;
using System.Web.UI;
using ECloseWebApp.HelperClasses;
using eCloseDataAccessLayer.HelperClasses;

namespace ECloseWebApp.Controllers
{
    [HandleExceptionsAttribute]
    public class TaskTemplateController : Controller
    {
        TaskTemplateClass cls = new TaskTemplateClass();


        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public ActionResult Index()
        {
            var vm = new ViewModelForBusinessUnitDD();
            try
            {
                int locationId = 0;
                int tenantId = SessionWrapper.TenantId;
                LocationClass locClass = new LocationClass();
                var locations = locClass.List(tenantId);

                foreach (var location in locations)
                {
                    vm.Location.Add(new SelectListItem { Text = location.LocationName + ' ' + '[' + location.TimeZone + ']', Value = location.Id.ToString() });
                }

                if (vm.Location.Count > 0 && vm.Location[0].Value != null)
                {
                    locationId = Convert.ToInt32(vm.Location[0].Value);
                }

                TeamClass teamClass = new TeamClass();
                var responseTeam = teamClass.LocationTeams(locationId);
                foreach (var team in responseTeam)
                {
                    vm.Team.Add(new SelectListItem { Text = team.TeamName, Value = team.Id.ToString() });
                }

                vm.Team.Insert(0, new SelectListItem { Text = "--Select--", Value = "0" });
                ViewBag.LocationId = TempData["LocationId"];
                ViewBag.TeamId = TempData["TeamId"];
                ViewBag.Error = TempData["Error"];
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return View(vm);
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult GetTask(int jtStartIndex, int jtPageSize, int TeamId = 0, int LocationId = 0, string TaskName = null)
        {
            try
            {
                var Task = cls.GetTask(TeamId, jtStartIndex, jtPageSize, TaskName);
                if (Task != null)
                {
                    return Json(new { Result = "OK", Records = Task, TotalRecordCount = Task.Count > 0 ? Task[0].TotalRecords : 0 });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult AddTask(eCloseDataAccessLayer.Models.Task entity)
        {
            string result = "";
            string message = Constants.ErrorSessionExpired;

            try
            {
                entity.CreatedBy = SessionWrapper.LoginId;
                entity.CreatedOn = DateTime.Now;
                entity.TenantId = SessionWrapper.TenantId;

                var task = cls.AddTask(entity);

                if (Convert.ToInt32(task) == 0)
                {
                    result = "SUCCESS";
                    message = Constants.TaskIsExists;
                }
                else
                {
                    result = "Ok";
                    message = Constants.UserAssignedMessage;
                    return Json(new { Result = result, Message = message, Record = entity });
                }

            }
            catch (Exception ex)
            {
                throw ex;
              
            }
            return Json(new { Result = "Info", Message = message });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult GetTaskTemplateuser(int TaskId, string Frequency)
        {

            try
            {
                var Tasktemplate = cls.GetTaskTemplateuser(TaskId);
                Session["Frequency"] = Frequency;
                if (Tasktemplate != null)
                {
                    return Json(new { Result = "OK", Records = Tasktemplate, TotalRecordCount = Tasktemplate.Count() });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        //public JsonResult ListWorkDays()
        //{
        //    string Frequency = Session["Frequency"].ToString();
        //    if (Frequency == "Daily")
        //    {
        //        var result = WorkDays.Daily();
        //        var option = result.Select(c => new { DisplayText = c.Text, Value = c.Value });
        //        return Json(new { Result = "OK", Options = option });
        //    }
        //    else
        //    {
        //        var result = WorkDays.WorkDaysList();
        //        var option = result.Select(c => new { DisplayText = c.Text, Value = c.Value });
        //        return Json(new { Result = "OK", Options = option });
        //    }
        //}
        public JsonResult ListWorkDays(int Value = 0)
        {
            string Frequency = Session["Frequency"].ToString();
            if (Frequency == "Daily")
            {
                var result = WorkDays.Daily();
                if (Value != 0)
                {
                    result = result.Where(x => CheckValue(x.Value, Value) == true).ToList();
                }
                var option = result.Select(c => new { DisplayText = c.Text, Value = c.Value });
                return Json(new { Result = "OK", Options = option });
            }
            else
            {
                var result = WorkDays.WorkDaysList();
                if (Value != 0)
                {
                    result = result.Where(x => CheckValue(x.Value, Value) == true).ToList();
                }
                var option = result.Select(c => new { DisplayText = c.Text, Value = c.Value });
                return Json(new { Result = "OK", Options = option });
            }
        }
        public bool CheckValue(string Value, int value)
        {
            Int32 locID = Convert.ToInt32(Value);
            return value <= locID;
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult ListFrequency()
        {
            try
            {
                var result = WorkDays.Frequency();
                var option = result.Select(c => new { DisplayText = c.Text, Value = c.Value });
                return Json(new { Result = "OK", Options = option });
            }
            catch (Exception ex) { return Json(new { Result = "ERROR", Message = ex.Message }); }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult Listdurationhrs()
        {
            try
            {
                var result = WorkDays.DurationhoursList();
                var option = result.Select(c => new { DisplayText = c.Text, Value = c.Value });
                return Json(new { Result = "OK", Options = option });

            }
            catch (Exception ex) { return Json(new { Result = "ERROR", Message = ex.Message }); }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult ListWorkDaysAdhoc()
        {
            var result = WorkDays.WorkDaysList();
            var option = result.Select(c => new { DisplayText = c.Text, Value = c.Value });
            return Json(new { Result = "OK", Options = option });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult ListlevelwiseUsers(int TaskId, int level, string Tasktype)
        {
            try
            {
                int tenantId = SessionWrapper.TenantId;
                var role = cls.ListlevelwiseUsers(TaskId, level, tenantId, Tasktype);
                if (role != null)
                {
                    var option = role.Select(c => new { DisplayText = c.CombinedUser, Value = c.Id });
                    return Json(new { Result = "OK", Options = option });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult UpdateTaskTemplateuser(eCloseDataAccessLayer.Models.TaskTemplateuser entity)
        {
            try
            {
                entity.CreatedBy = SessionWrapper.LoginId;
                entity.CreatedOn = DateTime.Now;

                var Tasktemplate = cls.UpdateTaskTemplateuser(entity);
                if (Convert.ToInt32(Tasktemplate) == 1)
                {
                    return Json(new { Result = "SUCCESS"/*, Message = Constants.UserExists */});
                }
                else
                {
                    return Json(new { Result = "Error", Message = Constants.WFLevelUserAssignedMessage });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult GetWorkflow()
        {
            try
            {
                int tenantId = SessionWrapper.TenantId;
                WorkflowClass workflowclass = new WorkflowClass();
                var workflow = workflowclass.GetWorkflows(tenantId);
                if (workflow != null)
                {
                    var option = workflow.Select(c => new { DisplayText = c.WorkflowName, Value = c.Id });
                    return Json(new { Result = "OK", Options = option });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult GetTaskforOptions(int TeamId, int jtStartIndex = 0, int jtPageSize = 0)
        {
            try
            {
                var Task = cls.GetTask(TeamId, jtStartIndex, jtPageSize, "");
                if (Task != null)
                {
                    var option = Task.Select(c => new { DisplayText = c.TaskName + "" + "[" + c.IntEndDay + "]", Value = c.Id });
                    return Json(new { Result = "OK", Options = option });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult GetdependentTask(int TaskId)
        {
            try
            {
                var DependentTask = cls.GetdependentTask(TaskId);
                if (DependentTask != null)
                {
                    return Json(new { Result = "OK", Records = DependentTask, TotalRecordCount = DependentTask.Count() });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult AdddependentTask(eCloseDataAccessLayer.Models.DependentTask entity, int TaskId)
        {
            string result = "ERROR";
            string message = Constants.ErrorSessionExpired;
            try
            {
                entity.CreatedBy = SessionWrapper.LoginId;
                entity.CreatedOn = DateTime.Now;
                entity.TenantId = SessionWrapper.TenantId;
                entity.TaskId = TaskId;

                var dependent = cls.AdddependentTask(entity);
                if (Convert.ToInt32(dependent) == 0)
                {
                    result = "SUCCESS";
                    message = Constants.IsExists;
                }
                else
                {
                    return Json(new { Result = "OK", Message = "Record Added.", Record = entity });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = result, Message = message });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult DeletedependentTask(DependentTask entity)
        {
            try
            {
                var DependentTask = cls.DeletedependentTask(entity.Id);

                if (DependentTask != null)
                {
                    return Json(new { Result = "OK", Records = DependentTask });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }


        /// <summary>
        ///  Adhoc task list,update adhoc template
        /// </summary>
        /// <returns></returns>
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        [Route("Tasks")]
        public ActionResult Adhoc()
        {
            var vm = new ViewModelForBusinessUnitDD();
            try
            {
                int tenantId = SessionWrapper.TenantId;
                int locationId = 0;
                LocationClass locClass = new LocationClass();
                var locations = locClass.List(tenantId);

                foreach (var location in locations)
                {
                    vm.Location.Add(new SelectListItem { Text = location.LocationName + ' ' + '[' + location.TimeZone + ']', Value = location.Id.ToString() });
                }

                if (vm.Location.Count > 0 && vm.Location[0].Value != null)
                {
                    locationId = Convert.ToInt32(vm.Location[0].Value);
                }
                TeamClass teamClass = new TeamClass();
                var responseTeam = teamClass.LocationTeams(locationId);
                foreach (var team in responseTeam)
                {
                    vm.Team.Add(new SelectListItem { Text = team.TeamName, Value = team.Id.ToString() });
                }

                vm.Team.Insert(0, new SelectListItem { Text = "--Select--", Value = "0" });
                PeriodClass periodClass = new PeriodClass();
                var Period = periodClass.GetOpenPeriods(locationId);
                if (Period.Count > 0)
                {
                    foreach (var p in Period)
                    {
                        vm.Period.Add(new SelectListItem { Text = p.PeriodText, Value = p.Id.ToString() });
                    }
                }
                vm.Period.Insert(0, new SelectListItem { Text = "--Select--", Value = "0" });

                ViewBag.LocationId = TempData["LocationId"];
                ViewBag.TeamId = TempData["TeamId"];
                ViewBag.PeriodId = TempData["PeriodId"];
                ViewBag.Error = TempData["Error"];
               
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return View(vm);
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult GetAdhocTask(int jtStartIndex, int jtPageSize, int TeamId = 0, int LocationId = 0, string TaskName = null)
        {
            try
            {
                var AdhocTask = cls.GetAdhocTask(TeamId, jtStartIndex, jtPageSize, TaskName);
                if (AdhocTask != null)
                {
                    return Json(new { Result = "OK", Records = AdhocTask, TotalRecordCount = AdhocTask.Count > 0 ? AdhocTask[0].TotalRecords : 0 });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult AddAdhocTask(eCloseDataAccessLayer.Models.WorkbasketTask entity)
        {
            string result = "ERROR";
            string message = Constants.ErrorSessionExpired;
            try
            {
                entity.CreatedBy = SessionWrapper.LoginId;
                entity.CreatedOn = DateTime.Now;
                entity.TenantId = SessionWrapper.TenantId;
                var adhoc = cls.AddAdhocTask(entity);
                if (Convert.ToInt32(adhoc) == 0)
                {
                    result = "SUCCESS";
                    message = Constants.TaskIsExists;
                }
                else
                {
                    return Json(new { Result = "OK", Message = "Record Added.", Record = entity });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = result, Message = message });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult GetAdhocTaskTemplateuser(int WorkbasketTaskId)
        {
            try
            {
                var WorkbasketTaskuser = cls.GetAdhocTaskTemplateuser(WorkbasketTaskId);
                if (WorkbasketTaskuser != null)
                {
                    return Json(new { Result = "OK", Records = WorkbasketTaskuser, TotalRecordCount = WorkbasketTaskuser.Count() });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult UpdateAdhocTaskTemplateuser(eCloseDataAccessLayer.Models.WorkbasketTaskUser entity)
        {
            try
            {
                var Tasktemplate = cls.UpdateAdhocTaskTemplateuser(entity);
                if (Convert.ToInt32(Tasktemplate) == 0)
                {
                    return Json(new { Result = "SUCCESS", Message = Constants.UserExists });
                }
                else
                {
                    return Json(new { Result = "OK" });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult MarkActiveDeactive(int Id)
        {
            try
            {
                var Active = cls.MarkActiveDeactive(Id);
                if (Active != 0)
                {
                    return Json(new { Result = "OK", Records = Active });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }


        // upload functility
        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public ActionResult TaskUpload(FormCollection formCollection, string TaskType)
        {
            try
            {
                var httpClient = new HttpClient();
                //httpClient.BaseAddress = new Uri(Constants.ApiPath);
                //httpClient.DefaultRequestHeaders.Clear();
                //httpClient.DefaultRequestHeaders.AcceptLanguage.Add(new StringWithQualityHeaderValue("nl-NL"));
                //httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                int LocationId = Convert.ToInt32(formCollection["Location"].ToString());
                int TeamId = Convert.ToInt32(formCollection["Team"].ToString());
                var TaskList = new List<Task>();
                var WorkBasketTaskList = new List<WorkbasketTaskentity>();
                int tenantId = SessionWrapper.TenantId;

                if (Request != null)
                {
                    HttpPostedFileBase file = Request.Files["UploadedFile"];

                    if ((file != null) && (file.ContentLength > 0) && !string.IsNullOrEmpty(file.FileName))
                    {

                        string fileName = file.FileName;
                        string fileContentType = file.ContentType;
                        byte[] fileBytes = new byte[file.ContentLength];
                        var data = file.InputStream.Read(fileBytes, 0, Convert.ToInt32(file.ContentLength));

                        ////////////testing

                        ExcelPackage package = new ExcelPackage(file.InputStream);
                        // DataTable dtTempUpload = ToDataTable(package);
                        //nameof  
                        ExcelWorksheet workSheet = package.Workbook.Worksheets.First();
                        DataTable table = new DataTable();
                        foreach (var firstRowCell in workSheet.Cells[1, 1, 1, workSheet.Dimension.End.Column])
                        {
                            table.Columns.Add(firstRowCell.Text);
                        }
                        for (var rowNumber = 2; rowNumber <= workSheet.Dimension.End.Row; rowNumber++)
                        {
                            var row = workSheet.Cells[rowNumber, 1, rowNumber, workSheet.Dimension.End.Column];
                            var newRow = table.NewRow();
                            foreach (var cell in row)
                            {
                                newRow[cell.Start.Column - 1] = cell.Text;
                            }
                            table.Rows.Add(newRow);
                        }

                        WorkflowClass workflowClass = new WorkflowClass();
                        var workflow = workflowClass.GetWorkflows(tenantId);

                        var Priority = cls.GetPrioritylist();


                        if (TaskType == "Regular")
                        {
                            foreach (DataRow dr in table.Rows)
                            {

                                var task = new Task();
                                task.TeamId = TeamId;
                                task.TenantId = SessionWrapper.TenantId;
                                task.TaskName = Convert.ToString(dr[0]);
                                task.Description = Convert.ToString(dr[1]);
                                task.Frequency = Convert.ToString(dr[2]);
                                task.Workflow = Convert.ToString(dr[3]);
                                task.WorkflowId = workflow.Where(c => c.WorkflowName == Convert.ToString(dr[3])).Select(a => a.Id).FirstOrDefault();
                                task.Priority = Convert.ToString(dr[4]);
                                task.PriorityId = Priority.Where(c => c.PriorityName == Convert.ToString(dr[4])).Select(a => a.Id).FirstOrDefault();
                                task.CreatedBy = SessionWrapper.LoginId;
                                task.CreatedOn = DateTime.UtcNow;
                                TaskList.Add(task);
                            }
                        }

                        if (TaskType == "Adhoc")
                        {
                            int PeriodId = Convert.ToInt32(formCollection["Period"].ToString());
                            Session["PeriodId"] = PeriodId;
                            foreach (DataRow dr in table.Rows)
                            {

                                var WorkbasketTask = new WorkbasketTaskentity();

                                WorkbasketTask.TeamId = TeamId;
                                WorkbasketTask.PeriodId = PeriodId;
                                WorkbasketTask.TenantId = SessionWrapper.TenantId;
                                WorkbasketTask.TaskName = Convert.ToString(dr[0]);
                                WorkbasketTask.Description = Convert.ToString(dr[1]);
                                WorkbasketTask.Workflow = Convert.ToString(dr[2]);
                                WorkbasketTask.WorkflowId = workflow.Where(c => c.WorkflowName == Convert.ToString(dr[2])).Select(a => a.Id).FirstOrDefault();
                                WorkbasketTask.Priority = Convert.ToString(dr[3]);
                                WorkbasketTask.PriorityId = Priority.Where(c => c.PriorityName == Convert.ToString(dr[3])).Select(a => a.Id).FirstOrDefault();
                                WorkbasketTask.CreatedBy = SessionWrapper.LoginId;
                                WorkbasketTask.CreatedOn = DateTime.UtcNow;
                                WorkBasketTaskList.Add(WorkbasketTask);
                            }
                        }



                    } // file check end



                    if (TaskType == "Regular")
                    {
                        if (TaskList.Count > 0)
                        {
                            {
                                var response = cls.UploadTask(TaskList);

                                if (response.Count > 0)
                                {
                                    var Discrepancydata = response.Select(a => new { a.TaskName, a.Description, a.Frequency, a.Workflow, a.Priority, a.Exception }).ToList();
                                    if (Discrepancydata.Count > 0)
                                    {
                                        ToExcel(Discrepancydata);
                                        TempData["LocationId"] = LocationId;
                                        TempData["TeamId"] = TeamId;
                                        //return Redirect(HttpContext.Request.UrlReferrer.AbsoluteUri);
                                        return RedirectToAction("Index");
                                    }
                                    else
                                    {
                                        TempData["LocationId"] = LocationId;
                                        TempData["TeamId"] = TeamId;
                                        return RedirectToAction("Index");
                                    }
                                }

                            }
                            return RedirectToAction("Index");
                        }

                        else
                        {
                            TempData["LocationId"] = LocationId;
                            TempData["TeamId"] = TeamId;
                            TempData["Error"] = "Task upload list can not be empty";
                            return RedirectToAction("Index");
                        }
                    }

                    if (TaskType == "Adhoc")
                    {
                        if (WorkBasketTaskList.Count > 0)
                        {
                            {
                                var response = cls.UploadAdhocTask(WorkBasketTaskList);
                                if (response.Count > 0)
                                {
                                    var Discrepancydata = response.Select(a => new { a.TaskName, a.Description, a.Workflow, a.Priority, a.Exception }).ToList();
                                    if (Discrepancydata.Count > 0)
                                    {
                                        ToExcel(Discrepancydata);
                                        TempData["LocationId"] = LocationId;
                                        TempData["TeamId"] = TeamId;
                                        TempData["PeriodId"] = Session["PeriodId"];
                                        return RedirectToAction("Adhoc");
                                    }
                                    else
                                    {
                                        TempData["LocationId"] = LocationId;
                                        TempData["TeamId"] = TeamId;
                                        TempData["PeriodId"] = Session["PeriodId"];
                                        return RedirectToAction("Adhoc");
                                    }
                                }

                            }
                            return RedirectToAction("Adhoc");
                        }
                        else
                        {
                            TempData["LocationId"] = LocationId;
                            TempData["TeamId"] = TeamId;
                            TempData["PeriodId"] = Session["PeriodId"];
                            TempData["Error"] = "Task upload list can not be empty";
                            return RedirectToAction("Adhoc");
                        }
                    }

                }
                return Json(new { Result = "OK", Message = "Record Added." });
            }
            catch (Exception ex)
            {
                return Json(new { Result = "OK", Message = ex.Message });

            }
        }


        [HttpPost]
        public void ToExcel(object TaskList)
        {
            var gv = new System.Web.UI.WebControls.GridView();
            gv.DataSource = TaskList;
            gv.DataBind();
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=ExceptionTask.xls");
            Response.ContentType = "application/ms-excel";
            Response.Charset = "";
            StringWriter objStringWriter = new StringWriter();
            HtmlTextWriter objHtmlTextWriter = new HtmlTextWriter(objStringWriter);
            gv.RenderControl(objHtmlTextWriter);
            //Open a memory stream that you can use to write back to the response
            Response.Output.Write(objStringWriter.ToString());
            Response.Flush();
            Response.End();
            gv.DataBind();
        }



        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public ActionResult DownloadTaskTemplate()
        {
            string PathToExcelFile = Server.MapPath("~/Template/TaskuploadTemplate.xlsx");
            FileInfo file = new FileInfo(PathToExcelFile);
            if (file.Exists)
            {
                Response.Clear();
                Response.ClearHeaders();
                Response.ClearContent();
                Response.AddHeader("content-disposition", "attachment; filename=TaskuploadTemplate.xlsx");
                Response.AddHeader("Content-Type", "application/Excel");
                Response.ContentType = "application/vnd.xls";
                Response.AddHeader("Content-Length", file.Length.ToString());
                Response.WriteFile(file.FullName);
                Response.End();

            }
            else
            {
                Response.Write("This file does not exist.");
            }

            return RedirectToAction("Index");
        }


        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public ActionResult DownloadAdhocTaskTemplate()
        {
            string PathToExcelFile = Server.MapPath("~/Template/AdhocTaskuploadTemplate.xlsx");
            FileInfo file = new FileInfo(PathToExcelFile);
            if (file.Exists)
            {
                Response.Clear();
                Response.ClearHeaders();
                Response.ClearContent();
                Response.AddHeader("content-disposition", "attachment; filename=AdhocTaskuploadTemplate.xlsx");
                Response.AddHeader("Content-Type", "application/Excel");
                Response.ContentType = "application/vnd.xls";
                Response.AddHeader("Content-Length", file.Length.ToString());
                Response.WriteFile(file.FullName);
                Response.End();

            }
            else
            {
                Response.Write("This file does not exist.");
            }

            return RedirectToAction("Index");
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult GetPrioritylist()
        {
            try
            {
                var priority = cls.GetPrioritylist();
                if (priority != null)
                {
                    var option = priority.Select(c => new { DisplayText = c.PriorityName, Value = c.Id });
                    return Json(new { Result = "OK", Options = option });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult PutRegularTask(eCloseDataAccessLayer.Models.Task entity)
        {
            try
            {
                entity.UpdatedOn = DateTime.UtcNow.ToString();
                entity.UpdatedBy = SessionWrapper.LoginId;
                entity.TenantId = SessionWrapper.TenantId;
                var Tasklist = cls.PutRegularTask(entity);

                if (Tasklist != null)
                {
                    return Json(new { Result = "OK", Records = Tasklist });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = "Error" });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult DeleteRegularTask(Task entity)
        {
            string result = "ERROR";
            string message = Constants.ErrorSessionExpired;
            try
            {
                var DeletedBy = SessionWrapper.LoginId;
                var response = cls.DeleteRegularTask(entity.Id, DeletedBy);
                if (response != 1)
                {
                    result = "OK";
                    message = "";
                }
                else
                {
                    result = "ERROR";
                    message = "Please delete depansentTask(s) of this regular task !!";
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = result, Message = message });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult GetLevelCaption(int TaskId)
        {
            try
            {
                var lst = cls.GetLevelCaption(TaskId);
                if (lst != null)
                {
                    var option = lst.Select(c => new { DisplayText = c.Text, Value = c.Value });
                    return Json(new { Result = "OK", Options = option });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult GetLevelCaptionAdhoc(int WorkbasketTaskId)
        {
            try
            {
                var lst = cls.GetLevelCaptionAdhoc(WorkbasketTaskId);
                if (lst != null)
                {
                    var option = lst.Select(c => new { DisplayText = c.Text, Value = c.Value });
                    return Json(new { Result = "OK", Options = option });
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public ActionResult GetPeriodForTasksByLocationId(int LocationId = 0)
        {
            try
            {
                PeriodClass periodClass = new PeriodClass();
                var Period = periodClass.GetOpenPeriods(LocationId);
                if (Period.Count > 0)
                {
                    foreach (var p in Period)
                    {
                        var option = Period.Select(c => new { DisplayText = c.PeriodText, Value = c.Id.ToString() });
                        return Json(new { Result = "OK", Options = option });
                    }
                }

                return Json(new { Result = "SUCCESS", Message = "There is no any period for given location ." });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public ActionResult GetTeamForTasksByLocationId(int LocationId = 0)
        {
            try
            {
                TeamClass teamClass = new TeamClass();
                var responseTeam = teamClass.LocationTeams(LocationId);
                if (responseTeam != null)
                {
                    foreach (var team in responseTeam)
                    {
                        var option = responseTeam.Select(c => new { DisplayText = c.TeamName, Value = c.Id.ToString() });
                        return Json(new { Result = "OK", Options = option });
                    }
                }
                return Json(new { Result = "ERROR", Message = Constants.ErrorSessionExpired });
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        [HttpGet]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult ExportToExcelAdhocTask(int jtStartIndex, int jtPageSize, int TeamId = 0, int LocationId = 0, string TaskName = null)
        {
            try
            {
                var AdhocTask = cls.ExportAdhocTask(TeamId, jtStartIndex, jtPageSize, TaskName);
                if (AdhocTask != null)
                {
                    FileHelper helper = new FileHelper();
                    var Tasks = AdhocTask.Select(a => new { AdhocTask = a.TaskName, Team = a.TeamName , Period = a.PeriodText ,WorkFlow = a.Workflow ,priority = a.Priority}).ToList();
                    helper.ToExcel(Response, Tasks, Enums.ReportName.AdhocTask.ToString());
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "OK" }, JsonRequestBehavior.AllowGet);
        }

        [HttpGet]
        [CustomAuthorization(Enums.Role.TenantAdmin)]
        public JsonResult ExportToExcelRegularTask(int jtStartIndex, int jtPageSize, int TeamId = 0, int LocationId = 0, string TaskName = null)
        {
            try
            {
                var RegularTask = cls.ExportRegularTask(TeamId, jtStartIndex, jtPageSize, TaskName); 
                if (RegularTask != null)
                {
                    FileHelper helper = new FileHelper();
                    var Tasks = RegularTask.Select(a => new { RegularTask = a.TaskName, Team = a.TeamName, Frequency = a.Frequency, WorkFlow = a.Workflow, priority = a.Priority }).ToList();
                    helper.ToExcel(Response, Tasks, Enums.ReportName.RegularTask.ToString());
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return Json(new { Result = "OK" }, JsonRequestBehavior.AllowGet);
        }
    }


}
