using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ECloseBL.Entities;
using eCloseDataAccessLayer.Models;
using eCloseDataAccessLayer.Entities;
using eCloseDataAccessLayer.Utility;
using System.Web.Mvc;

namespace eCloseDataAccessLayer.HelperClasses
{
    public class WorkbasketClass
    {

        ECloseContext context = new ECloseContext();
        private string pendingStatus = Enums.WorkbasketAction.Pending.ToString();
        private string closeStatus = Enums.WorkbasketAction.Close.ToString();
        private string rejectStatus = Enums.WorkbasketAction.Reject.ToString();
        private string approveStatus = Enums.WorkbasketAction.Approve.ToString();
        private string completedStatus = Enums.WorkbasketAction.Completed.ToString();
        private string discardedStatus = Enums.WorkbasketAction.Discarded.ToString();
        private string discard = Enums.WorkbasketAction.Discard.ToString();
        private string holdStatus = Enums.WorkbasketAction.Hold.ToString();
        private string reviewer = Enums.Role.Reviewer.ToString();
        private string preparer = Enums.Role.Preparer.ToString();
        private string supervisor = Enums.Role.Supervisor.ToString();

        #region "Workbasket"
        public List<Workitems> GetWorkitems(int tenantId, string taskName, int jtStartIndex, int jtPageSize, string jtSorting, int userId, string userRole)
        {
            try
            {
                var workitemList = new List<Workitems>();
                var totalRecords = GetTotalCountOfRecords(tenantId, taskName, userId, userRole);
                if (jtPageSize == 0)
                    jtPageSize = totalRecords;
                IQueryable<Workitems> workbasketQuery;
                using (ECloseContext context = new ECloseContext())
                {
                    workbasketQuery = (context.WorkbasketTasks.Where(a => a.IsDeleted == false && a.TenantId == tenantId && a.WorkflowAction.Status != discardedStatus
                                                               && a.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false).Any()
                                                               && (taskName.Length > 0 ? a.TaskName.Contains(taskName) : true)
                                                               // user level should match with WorkbasketTask workflow level but if status is closed then level wont match or if user is of level 0 he can see his task pending  at other levels
                                                               && ((a.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false).Select(b => b.WFLevel).FirstOrDefault() == 0) ?
                                                               // else show record only if users level matches current level that is reviewrs task 
                                                               true : (a.WorkflowAction.WorkflowLevel == a.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false).Select(b => b.WFLevel).FirstOrDefault() && a.WorkflowAction.Status != approveStatus))
                                                               )
                                                       .Select(c => new Workitems
                                                       {
                                                           Id = c.Id,
                                                           TeamName = c.Team.TeamName,
                                                           TaskName = c.TaskName,
                                                           Status = c.WorkflowAction.Status,
                                                           TaskAtLevel = c.WorkflowAction.WorkflowLevel,
                                                           TaskAtLevelText = c.Workflow.WorkflowLevels.Where(lvl => lvl.Level == c.WorkflowAction.WorkflowLevel).Select(lvl => lvl.LevelText).FirstOrDefault(),
                                                           LoginedUserAssignedAtLevel = c.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false).Select(b => b.WFLevel).FirstOrDefault(),
                                                           // next approver will be blank on approve/Close status
                                                           NextApprover = (c.WorkflowAction.Status == completedStatus || c.WorkflowAction.Status == closeStatus || c.WorkflowAction.Status == approveStatus) ? ""
                                                           : c.WorkbasketTaskUsers.Where(d => d.IsDeleted == false &&
                                                                                                 //if logined user lvl not matches task lvl (mostly in case of preparer then show current approver else show next lvl approver)
                                                                                                 d.WFLevel == ((c.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false).Select(b => b.WFLevel).FirstOrDefault() != c.WorkflowAction.WorkflowLevel) ? c.WorkflowAction.WorkflowLevel : c.WorkflowAction.WorkflowLevel + 1))//
                                                                                             .Select(e => e.User.UserName).FirstOrDefault(),
                                                           TotalRecords = totalRecords,
                                                           //if (TaskAtLevel != LoginedUserAssignedAtLevel) then no action should be displayed. If status is complted then no actions will be there
                                                           ActionsCanBeTakenAgainstWBTaskId =
                                                            c.Workflow.WorkflowActions.Where(a => !(c.DependetWorkbasketTasks1.Where(d => d.CanStart == false).Any()) && c.WorkflowAction.Status != completedStatus && a.IsDeleted == false && a.WorkflowId == c.WorkflowId && a.WorkflowLevel == c.WorkflowAction.WorkflowLevel && a.IsAction == true
                                                                                            && (c.WorkflowAction.WorkflowLevel == c.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false).Select(b => b.WFLevel).FirstOrDefault()))
                                                                                            .Select(a => new SelectListItem { Text = a.Status, Value = a.Status }).ToList(),
                                                           CanStart = !(c.DependetWorkbasketTasks1.Where(d => d.CanStart == false).Any()),// required to decide rendering of action buttons
                                                                                                                                          // period name required for creating directory for file upload
                                                           PeriodName = c.Period.PeriodText,
                                                           TenantName = c.Team.Location.Tenant.Name,
                                                           WorkFlowId = c.WorkflowId,
                                                           WorkflowName = c.Workflow.WorkflowName,
                                                           PeriodMonth = c.Period.PeriodMonth.ToString(),
                                                           PeriodYear = c.Period.PeriodYear.ToString(),
                                                           LastLevelForApproval = c.WorkbasketTaskUsers.Where(d => d.IsDeleted == false).Count() - 1, // needed for client side validation
                                                           RAGStatus = c.WorkbasketTaskUsers.Where(b => b.WFLevel == c.WorkflowAction.WorkflowLevel && b.IsDeleted == false).Select(b => b.RAGStatusInt).FirstOrDefault(),
                                                           EndDateInt = c.WorkbasketTaskUsers.Where(b => b.IsDeleted == false && b.WFLevel == c.WorkflowAction.WorkflowLevel).Select(b => b.EndDateInt).FirstOrDefault(),
                                                           Priority = c.Priority1.PriorityName,
                                                           PriorityCode = c.PriorityId,
                                                           Description = c.Description,
                                                           IsAttachmentRequired = c.Tenant.IsAttachmentRequired
                                                       }
                                                              ));


                    switch (jtSorting.ToLower())
                    {
                        case "taskname desc":
                            workitemList = workbasketQuery.OrderByDescending(rec => rec.TaskName).Skip(jtStartIndex).Take(jtPageSize).ToList();
                            break;
                        case "taskname asc":
                            workitemList = workbasketQuery.OrderBy(rec => rec.TaskName).Skip(jtStartIndex).Take(jtPageSize).ToList();
                            break;
                        case "status desc":
                            workitemList = workbasketQuery.OrderByDescending(rec => rec.Status).Skip(jtStartIndex).Take(jtPageSize).ToList();
                            break;
                        case "status asc":
                            workitemList = workbasketQuery.OrderBy(rec => rec.Status).Skip(jtStartIndex).Take(jtPageSize).ToList();
                            break;
                        case "id desc":
                            workitemList = workbasketQuery.OrderByDescending(rec => rec.Id).Skip(jtStartIndex).Take(jtPageSize).ToList();
                            break;
                        case "id asc":
                            workitemList = workbasketQuery.OrderBy(rec => rec.Id).Skip(jtStartIndex).Take(jtPageSize).ToList();
                            break;
                        case "priority desc":
                            workitemList = workbasketQuery.OrderByDescending(rec => rec.PriorityCode).Skip(jtStartIndex).Take(jtPageSize).ToList();
                            break;
                        case "priority asc":
                            workitemList = workbasketQuery.OrderBy(rec => rec.PriorityCode).Skip(jtStartIndex).Take(jtPageSize).ToList();
                            break;
                        case "formattedenddateint desc":
                            workitemList = workbasketQuery.OrderByDescending(rec => rec.EndDateInt).Skip(jtStartIndex).Take(jtPageSize).ToList();
                            break;
                        default:
                            workitemList = workbasketQuery.OrderBy(rec => rec.EndDateInt).Skip(jtStartIndex).Take(jtPageSize).ToList();
                            break;
                    }
                    return workitemList;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public int GetTotalCountOfRecords(int tenantId, string taskName, int userId, string userRole)
        {
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    return context.WorkbasketTasks.Where(a => a.IsDeleted == false && a.TenantId == tenantId && a.WorkflowAction.Status != discardedStatus
                                                               && a.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false).Any()
                                                               && (taskName.Length > 0 ? a.TaskName.Contains(taskName) : true)
                                                               && ((a.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false).Select(b => b.WFLevel).FirstOrDefault() == 0) ?
                                                               true : (a.WorkflowAction.WorkflowLevel == a.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false).Select(b => b.WFLevel).FirstOrDefault() && a.WorkflowAction.Status != approveStatus))
                                                               ).Count();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<Workitems> GetWorkbasketTaskById(int id, int userId)
        {
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    var workitems = context.WorkbasketTasks.Include("WorkbasketTaskUsers")
                                                        .Include("WorkFlowAction")
                                                        .Include("Period")
                                                        .Include("Task")
                                                        .Where(a => a.Id == id)
                                                        .Select(c => new Workitems
                                                        {
                                                            Id = c.Id,
                                                            FileName = c.DocPath,
                                                            TeamName = c.Team.TeamName,
                                                            TaskName = c.TaskName,
                                                            Status = c.WorkflowAction.Status,
                                                            TaskAtLevel = c.WorkflowAction.WorkflowLevel,
                                                            LoginedUserAssignedAtLevel = c.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false).Select(b => b.WFLevel).FirstOrDefault(),
                                                            // next approver will be blank on approve/Close status
                                                            NextApprover = (c.WorkflowAction.Status == completedStatus || c.WorkflowAction.Status == approveStatus) ? ""
                                                           : c.WorkbasketTaskUsers.Where(d => d.IsDeleted == false &&
                                                                                                //if logined user lvl not matches task lvl (mostly in case of preparer then show current approver else show next lvl approver)
                                                                                                d.WFLevel == ((c.WorkbasketTaskUsers.Where(b => b.UserId == userId && b.IsDeleted == false).Select(b => b.WFLevel).FirstOrDefault() != c.WorkflowAction.WorkflowLevel) ? c.WorkflowAction.WorkflowLevel : c.WorkflowAction.WorkflowLevel + 1))//
                                                                                             .Select(e => e.User.UserName).FirstOrDefault(),
                                                            LastLevelForApproval = c.WorkbasketTaskUsers.Where(d => d.IsDeleted == false).Count() - 1, // needed for tenant side validation
                                                            // period name required for creating directory for file upload
                                                            PeriodName = c.Period.PeriodText,
                                                            TenantName = c.Team.Location.Tenant.Name,
                                                            WorkFlowId = c.WorkflowId,
                                                            PeriodMonth = c.Period.PeriodMonth.ToString(),
                                                            PeriodYear = c.Period.PeriodYear.ToString()
                                                        }
                                                               ).ToList();
                    return workitems;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public List<Workitems> GetWorkitemsByFilters(int tenantId, int jtStartIndex, int jtPageSize, string jtSorting, int teamId = 0, int periodId = 0, string statusRequired = "", string statusNotRequired = "", int levelRequired = -1, int locationId = 0, int userId = 0, string userRole = "", int priorityId = 0)
        {
            try
            {
                var workitemList = new List<Workitems>();
                var totalRecords = GetCountByFilter(tenantId, teamId, periodId, statusRequired, statusNotRequired, levelRequired, locationId, userId, userRole, priorityId);
                IQueryable<Workitems> workbasketQuery;
                using (ECloseContext context = new ECloseContext())
                {
                    workbasketQuery = (context.WorkbasketTasks.Where(a => a.TenantId == tenantId && a.IsDeleted == false && a.WorkflowAction.Status != discardedStatus
                                                               && (teamId > 0 ? a.TeamId == teamId : true)
                                                                && (periodId > 0 ? a.PeriodId == periodId : true)
                                                                 && (statusRequired.Length > 0 ? a.WorkflowAction.Status == statusRequired : true)
                                                                  && (statusNotRequired.Length > 0 ? a.WorkflowAction.Status != statusNotRequired : true)
                                                                  && (levelRequired > -1 ? a.WorkflowAction.WorkflowLevel == levelRequired : true)
                                                                  && (locationId > 0 ? a.Team.LocationId == locationId : true)
                                                                  && (userRole == supervisor ? a.WorkbasketTaskUsers.Where(b => b.User.SupervisorId == userId && b.User.TenantId == tenantId).Any() : true)
                                                                   && (priorityId > 0 ? a.PriorityId == priorityId : true)
                                                               )
                                                       .Select(c => new Workitems
                                                       {
                                                           Id = c.Id,
                                                           TeamName = c.Team.TeamName,
                                                           TaskName = c.TaskName,
                                                           Status = c.WorkflowAction.Status,
                                                           TaskAtLevelText = c.Workflow.WorkflowLevels.Where(lvl => lvl.Level == c.WorkflowAction.WorkflowLevel).Select(lvl => lvl.LevelText).FirstOrDefault(),
                                                           NextApprover = (c.WorkflowAction.Status == completedStatus || c.WorkflowAction.Status == closeStatus || c.WorkflowAction.Status == approveStatus) ? ""
                                                           : c.WorkbasketTaskUsers.Where(d => d.IsDeleted == false && d.WFLevel == c.WorkflowAction.WorkflowLevel)
                                                                                             .Select(e => e.User.UserName).FirstOrDefault(),
                                                           PeriodName = c.Period.PeriodText,
                                                           Priority = c.Priority1.PriorityName,
                                                           PriorityCode = c.PriorityId,
                                                           TotalRecords = totalRecords
                                                       }
                                                              ));


                    switch (jtSorting.ToLower())
                    {
                        case "priority desc":
                            workitemList = workbasketQuery.OrderByDescending(rec => rec.PriorityCode).Skip(jtStartIndex).Take(jtPageSize).ToList();
                            break;
                        case "priority asc":
                            workitemList = workbasketQuery.OrderBy(rec => rec.PriorityCode).Skip(jtStartIndex).Take(jtPageSize).ToList();
                            break;
                        case "id desc":
                            workitemList = workbasketQuery.OrderByDescending(rec => rec.Id).Skip(jtStartIndex).Take(jtPageSize).ToList();
                            break;
                        default:
                            workitemList = workbasketQuery.OrderBy(rec => rec.Id).Skip(jtStartIndex).Take(jtPageSize).ToList();
                            break;
                    }
                    return workitemList;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public int GetCountByFilter(int tenantId, int teamId = 0, int periodId = 0, string statusRequired = "", string statusNotRequired = "", int levelRequired = -1, int locationId = 0, int userId = 0, string userRole = "", int priorityId = 0)
        {
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    return context.WorkbasketTasks.Where(a => a.TenantId == tenantId && a.IsDeleted == false && a.WorkflowAction.Status != discardedStatus
                                                               && (teamId > 0 ? a.TeamId == teamId : true)
                                                                && (periodId > 0 ? a.PeriodId == periodId : true)
                                                                 && (statusRequired.Length > 0 ? a.WorkflowAction.Status == statusRequired : true)
                                                                  && (statusNotRequired.Length > 0 ? a.WorkflowAction.Status != statusNotRequired : true)
                                                                  && (levelRequired > -1 ? a.WorkflowAction.WorkflowLevel == levelRequired : true)
                                                                  && (locationId > 0 ? a.Team.LocationId == locationId : true)
                                                                  && (userRole == supervisor ? a.WorkbasketTaskUsers.Where(b => b.User.SupervisorId == userId && b.User.TenantId == tenantId).Any() : true)
                                                                && (priorityId > 0 ? a.PriorityId == priorityId : true)
                                                                  ).Count();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion
        #region "Action Log"
        public List<ActionLogForWorkbasket> GetActionLogByWorkbasketTaskId(int workbasketTaskId, int jtStartIndex, int jtPageSize, string loginId)
        {
            try
            {
                var totalRecords = CountOfActionLogByWorkbasketTaskId(workbasketTaskId);
                using (ECloseContext context = new ECloseContext())
                {
                    var actionHistory = context.ActionLogs.OrderByDescending(a => a.Id)
                                                               .Where(a => a.WorkbasketTaskId == workbasketTaskId)
                                                                .Skip(jtStartIndex).Take(jtPageSize)
                                                               .Select(a => new ActionLogForWorkbasket
                                                               {
                                                                   Action = a.Action,
                                                                   ActionedOn = a.ActionedOn,
                                                                   Cycle = a.Attempt,
                                                                   WorkbasketTaskId = a.WorkbasketTaskId,
                                                                   WorkflowLevel = a.WFLevel,
                                                                   WorkflowLevelName = a.WorkbasketTask.Workflow.WorkflowLevels.Where(lvl => lvl.Level == a.WFLevel).Select(lvl => lvl.LevelText).FirstOrDefault(),
                                                                   UserName = a.User.UserName,
                                                                   Id = a.Id,
                                                                   TotalRecords = totalRecords,
                                                                   Comments = a.Comments,//a.ReasonsLookUp.RejectedTasks.Where(b=>b.IsDeleted==false && b.Level==a.WFLevel && b.WorkbasketTask.Attempt== a.Attempt).Select(b=>b.Comments).FirstOrDefault(),
                                                                   Reason = a.ReasonsLookUp.ReasonCode

                                                               }).ToList();
                    return actionHistory;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        public int CountOfActionLogByWorkbasketTaskId(int workbasketTaskId)
        {
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    return context.ActionLogs.OrderBy(a => a.ActionedOn).Where(a => a.WorkbasketTaskId == workbasketTaskId).Count();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public void AddMiscellaneousNote(string loginId, int userId, int workbasketTaskId, string note)
        {
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    context.Configuration.LazyLoadingEnabled = true;
                    DateTime currentTime;
                    WorkbasketTask wt = context.WorkbasketTasks.First(i => i.Id == workbasketTaskId);
                    string timeZone = wt.TimeZone;
                    if (wt.TimeZone.Equals(string.Empty) || wt.TimeZone == null)//If Time not set
                        timeZone = Enums.TimeZone.UTC.ToString();
                    currentTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById(timeZone));
                    ActionLog obj = new ActionLog();
                    obj.CreatedBy = loginId;
                    obj.CreatedOn = DateTime.UtcNow;
                    obj.WorkbasketTaskId = workbasketTaskId;
                    obj.UserId = userId;
                    obj.Attempt = wt.Attempt;
                    obj.ActionedOn = currentTime;
                    obj.Action = Enums.WorkbasketAction.Miscellaneous.ToString();
                    obj.ReasonId = null;
                    obj.Comments = (null != note && note.Trim().Length > 0) ? note : null;
                    obj.WFLevel = wt.WorkflowAction.WorkflowLevel;
                    obj.TenantId = wt.TenantId;
                    context.ActionLogs.Add(obj);
                    context.SaveChanges();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
        #region "Submit Action For Workbasket"
        public void SubmitActionForWorkbasket(string loginId, int userId, int workbasketTaskId, string action, int reasonId, string comments)
        {
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    context.Configuration.LazyLoadingEnabled = true;
                    action = action.Trim();
                    WorkbasketTask wt = context.WorkbasketTasks.First(i => i.Id == workbasketTaskId);

                    //Added By Rizwan to update actual end date & Update TAT Flag - 18 Jan 2017

                    string timeZone = wt.TimeZone;
                    DateTime currentTime;

                    if (wt.TimeZone.Equals(string.Empty) || wt.TimeZone == null)//If Time not set
                        timeZone = "UTC";

                    currentTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById(timeZone));//Get current time as per time zone

                    //Add action in action history
                    var levelNCycle = context.WorkbasketTaskUsers.Where(a => a.WorkbasketTaskId == workbasketTaskId && a.UserId == userId && a.IsDeleted == false)
                                                                      .Select(b => new { Level = b.WFLevel, Attempt = b.WorkbasketTask.Attempt, Id = b.Id }).FirstOrDefault();
                    ActionLog obj = new ActionLog();
                    obj.CreatedBy = loginId;
                    obj.CreatedOn = DateTime.UtcNow;
                    obj.WorkbasketTaskId = workbasketTaskId;
                    obj.UserId = userId;
                    obj.Attempt = levelNCycle.Attempt;
                    obj.ActionedOn = currentTime;
                    obj.Action = action;
                    obj.ReasonId = (reasonId > 0) ? (int?)reasonId : null;
                    obj.Comments = (null != comments && comments.Trim().Length > 0) ? comments : null;
                    obj.WFLevel = levelNCycle.Level;
                    obj.TenantId = wt.TenantId;
                    context.ActionLogs.Add(obj);

                    //get all workflowActions related to workitem's workflowId
                    var wfActions = wt.Workflow.WorkflowActions.ToList();
                    //get nextlevel and next action ofSubmitedAction
                    var nextLvlNnextAction = wfActions.Where(a => a.IsDeleted == false && a.WorkflowId == wt.WorkflowAction.WorkflowId
                                                            && a.Status == action && a.WorkflowLevel == levelNCycle.Level)
                                                            .Select(a => new { NxtLvl = a.NextLevel, NxtAction = a.NextAction }).FirstOrDefault();

                    // update WorkbasketTask WfActionId as per next action and  next level

                    if (nextLvlNnextAction != null)
                    {
                        wt.StatusId = wfActions.Where(a => ((null == nextLvlNnextAction.NxtLvl) ? a.WorkflowLevel == levelNCycle.Level : a.WorkflowLevel == nextLvlNnextAction.NxtLvl) && ((null == nextLvlNnextAction.NxtAction) ? a.Status == action : a.Status == nextLvlNnextAction.NxtAction)
                                                                    && a.IsDeleted == false && a.WorkflowId == wt.WorkflowAction.WorkflowId)
                                                                         .Select(a => a.Id).FirstOrDefault();
                    }

                    wt.UpdatedBy = loginId;
                    wt.UpdatedOn = DateTime.UtcNow;
                    if (action == Enums.WorkbasketAction.Reject.ToString())
                        wt.Attempt = wt.Attempt + 1;
                    //-----------------------------------------------------------------

                    //---  add hold reason to OnHoldtask/rejectTask table
                    AddReasonsForAction(wt.TenantId, loginId, currentTime, wt, userId, levelNCycle.Level, reasonId, comments, action, context);
                    //--- If Current WbTask geting complted then set canstart= true for all its dependent Task
                    if (nextLvlNnextAction != null)
                    {
                        if (nextLvlNnextAction.NxtAction == completedStatus)
                        {
                            var dependantWBTask = context.DependetWorkbasketTasks.Where(a => a.IsDeleted == false && a.DependsOnWorkbasketTaskId == wt.Id).ToList();
                            foreach (var task in dependantWBTask)
                            {
                                task.CanStart = true;
                                task.UpdatedBy = loginId;
                                task.UpdatedOn = DateTime.UtcNow;
                            }
                        }
                    }
                    int workbasketUserId = levelNCycle.Id;
                    if (
                        (levelNCycle.Level == 0 && action.Equals(Enums.WorkbasketAction.Submit.ToString()))
                        ||
                        (levelNCycle.Level > 0 && action.Equals(Enums.WorkbasketAction.Approve.ToString()))
                         ||
                        (levelNCycle.Level == 0 && action.Equals(Enums.WorkbasketAction.Close.ToString()))
                        )
                    {
                        WorkbasketTaskUser wtUser = context.WorkbasketTaskUsers.First(i => i.Id == levelNCycle.Id);
                        SetRAGStatus(wtUser, wt, userId, currentTime, loginId, levelNCycle.Level, context);
                    }

                    //Reset TATs after Reject
                    if (action.Equals(Enums.WorkbasketAction.Reject.ToString()))
                    {
                        ResetTATForWorkbasketTask(loginId, wt.Id, currentTime, context);

                    }
                    context.SaveChanges();
                    // ---send email
                    if (nextLvlNnextAction != null)
                    {
                        if (null != nextLvlNnextAction.NxtLvl)
                        {
                            // if last approval then bring email type of 'close'
                            var emailContentsForAction = (levelNCycle.Level == wt.WorkbasketTaskUsers.Where(d => d.IsDeleted == false).Count() - 1 && action == approveStatus) ? completedStatus : action;
                            var emailContents = context.EmailContents.Where(em => em.TenantId == wt.TenantId && em.Action == emailContentsForAction).Select(em => new { EmailBody = em.EmailBody, SendMailFlag = em.SendMailFlag, EmailSubject = em.EmailSubject }).FirstOrDefault();
                            if (null != emailContents && emailContents.SendMailFlag)
                            {
                                SendMail(wt, emailContents.EmailSubject, emailContents.EmailBody, action, userId, comments, currentTime, reasonId, context);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void SendMail(WorkbasketTask wt, string subject, string emailBody, string action, int userId, string comments, DateTime currentTime, int reasonId, ECloseContext context)
        {
            try
            {
                List<string> recepientEmails = new List<string>();
                EmailData ed = new EmailData();
                var preparerDetails = wt.WorkbasketTaskUsers.Where(usr => usr.IsDeleted == false && usr.WFLevel == 0).Select(usr => new { Email = usr.User.Email, Name = usr.User.UserName }).FirstOrDefault();
                var recepientDetails = wt.WorkbasketTaskUsers.Where(usr => usr.IsDeleted == false && usr.WFLevel == wt.WorkflowAction.WorkflowLevel).Select(usr => new { Email = usr.User.Email, Name = usr.User.UserName, DueDate = usr.EndDateInt }).FirstOrDefault();
                ed.Subject = subject;
                ed.TaskId = wt.Id.ToString();
                ed.Team = wt.Team.TeamName;
                ed.TaskName = wt.TaskName;
                ed.Workflow = wt.Workflow.WorkflowName;
                ed.Period = wt.Period.PeriodText;
                ed.Body = emailBody;
                ed.Action = action;
                ed.DueDate = recepientDetails.DueDate;
                ed.LoginedUserName = wt.WorkbasketTaskUsers.Where(usr => usr.UserId == userId).Select(usr => usr.User.UserName).FirstOrDefault();
                ed.Comment = comments;
                ed.currentTime = currentTime;
                ed.Preparer = preparerDetails.Name;
                ed.Priority = wt.Priority1.PriorityName;
                if (reasonId > 0)
                    ed.ReasonCode = context.ReasonsLookUps.Where(rsn => rsn.Id == reasonId).Select(rsn => rsn.ReasonCode).FirstOrDefault();
                if (preparerDetails.Email != recepientDetails.Email && action != Enums.WorkbasketAction.Submit.ToString())
                {
                    ed.CCEmail = new List<string>();
                    ed.CCEmail.Add(preparerDetails.Email);
                }
                recepientEmails.Add(recepientDetails.Email);
                // get Email Id from TenantEmailTable rather than of actual user
                var email = context.TenantEmails.Where(te => te.TenantId == wt.TenantId && te.IsActive == true).Select(te => te.EmailId).FirstOrDefault();
                var emailList = Email.Extract_Emails(email);
                if (null != emailList && emailList.Count() > 0)
                {
                    recepientEmails.Clear();
                    if (null != ed.CCEmail)
                        ed.CCEmail.Clear();

                    foreach (var eml in emailList)
                        recepientEmails.Add(eml);
                }
                Email.SendEmail(recepientEmails.ToArray(), recepientDetails.Name, ed);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private static List<string> GetTenantEmail(List<string> recepientEmails, int tenantId, ECloseContext context)
        {
            try
            {
                var email = context.TenantEmails.Where(te => te.TenantId == tenantId && te.IsActive == true).Select(te => te.EmailId).FirstOrDefault();
                var emailList = Email.Extract_Emails(email);
                if (null != emailList && emailList.Count() > 0)
                {
                    recepientEmails.Clear();
                    foreach (var eml in emailList)
                        recepientEmails.Add(eml);
                }
                return recepientEmails;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void SubmitActionForMultipleTask(string loginId, int userId, List<Workitems> wbTaskWithActions)
        {
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    context.Configuration.LazyLoadingEnabled = true;
                    var tenantId = 0;
                    var wbTaskIdList = wbTaskWithActions.Select(x => x.Id);
                    var workbasketTaskUsers = context.WorkbasketTaskUsers.Where(a => wbTaskIdList.Contains(a.WorkbasketTaskId) && a.UserId == userId && a.IsDeleted == false && a.WorkbasketTask.IsDeleted == false).ToList();
                    var levelNCycleWithWorkbasketTaskId = workbasketTaskUsers
                                                                     .Select(b => new { WBTaskId = b.WorkbasketTaskId, Level = b.WFLevel, Attempt = b.WorkbasketTask.Attempt, Action = wbTaskWithActions.Where(c => c.Id == b.WorkbasketTaskId).Select(c => c.ActionSubmittedAgainstWBTaskId).FirstOrDefault() }).ToList();
                    List<WorkbasketTask> wtList = workbasketTaskUsers.Select(a => a.WorkbasketTask).ToList();
                    // tenantId needed for mail contents
                    tenantId = wtList[0].TenantId;
                    foreach (var wt in wtList)
                    {
                        //Added By Rizwan to update actual end date & Update TAT Flag - 18 Jan 2017

                        string timeZone = wt.TimeZone;
                        DateTime currentTime;

                        if (wt.TimeZone.Equals(string.Empty) || wt.TimeZone == null)//If Time not set
                            timeZone = "UTC";

                        currentTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById(timeZone));//Get current time as per time zone

                        var actionSubmitedAtLvl = levelNCycleWithWorkbasketTaskId.Where(b => b.WBTaskId == wt.Id)
                                            .Select(b => new { ActionSubmitted = b.Action, LvlAtWhichActionSubmited = b.Level }).FirstOrDefault();
                        var reasonIdNComments = wbTaskWithActions.Where(a => a.Id == wt.Id).Select(a => new { ReasonId = a.ReasonId, Comments = a.Comments }).FirstOrDefault();
                        //Add action in action history
                        ActionLog obj = new ActionLog();
                        obj.CreatedBy = loginId;
                        obj.CreatedOn = DateTime.UtcNow;
                        obj.WorkbasketTaskId = wt.Id;
                        obj.UserId = userId;
                        obj.Attempt = wt.Attempt;
                        obj.ReasonId = (reasonIdNComments.ReasonId > 0) ? (int?)reasonIdNComments.ReasonId : null;
                        obj.Comments = (null != reasonIdNComments.Comments && reasonIdNComments.Comments.Trim().Length > 0) ? reasonIdNComments.Comments : null;
                        obj.ActionedOn = currentTime;
                        obj.Action = actionSubmitedAtLvl.ActionSubmitted;
                        obj.WFLevel = actionSubmitedAtLvl.LvlAtWhichActionSubmited;
                        obj.TenantId = tenantId;
                        context.ActionLogs.Add(obj);

                        //get all workflowActions related to workitem's workflowId-------------
                        var wfActions = wt.Workflow.WorkflowActions.ToList();
                        //get nextlevel and next action ofSubmitedAction
                        var nextLvlNnextAction = wfActions.Where(a => a.IsDeleted == false && a.WorkflowId == wt.WorkflowAction.WorkflowId
                                                                && a.Status == actionSubmitedAtLvl.ActionSubmitted && a.WorkflowLevel == actionSubmitedAtLvl.LvlAtWhichActionSubmited)
                                                                .Select(a => new { NxtLvl = a.NextLevel, NxtAction = a.NextAction }).FirstOrDefault();
                        // update WorkbasketTask WfActionId as per next action and  next level
                        wt.StatusId = wfActions.Where(a => ((null == nextLvlNnextAction.NxtLvl) ? a.WorkflowLevel == actionSubmitedAtLvl.LvlAtWhichActionSubmited : a.WorkflowLevel == nextLvlNnextAction.NxtLvl) && ((null == nextLvlNnextAction.NxtAction) ? a.Status == actionSubmitedAtLvl.ActionSubmitted : a.Status == nextLvlNnextAction.NxtAction)
                                                             && a.IsDeleted == false && a.WorkflowId == wt.WorkflowAction.WorkflowId)
                                                                  .Select(a => a.Id).FirstOrDefault();
                        wt.UpdatedBy = loginId;
                        wt.UpdatedOn = DateTime.UtcNow;
                        if (actionSubmitedAtLvl.ActionSubmitted == Enums.WorkbasketAction.Reject.ToString())
                            wt.Attempt = wt.Attempt + 1;
                        //--------------------------------------------------------------------

                        //---  add hold reason to OnHoldtask/rejectedTAsk table
                        AddReasonsForAction(tenantId, loginId, currentTime, wt, userId, actionSubmitedAtLvl.LvlAtWhichActionSubmited, reasonIdNComments.ReasonId, reasonIdNComments.Comments, actionSubmitedAtLvl.ActionSubmitted, context);
                        //--- If Current WbTask geting complted then set canstart= true for all its dependent Task
                        if (nextLvlNnextAction.NxtAction == completedStatus)
                        {
                            var dependantWBTask = context.DependetWorkbasketTasks.Where(a => a.IsDeleted == false && a.DependsOnWorkbasketTaskId == wt.Id).ToList();
                            foreach (var task in dependantWBTask)
                            {
                                task.CanStart = true;
                                task.UpdatedBy = loginId;
                                task.UpdatedOn = DateTime.UtcNow;
                            }
                        }
                        if (
          (actionSubmitedAtLvl.LvlAtWhichActionSubmited == 0 && actionSubmitedAtLvl.ActionSubmitted.Equals(Enums.WorkbasketAction.Submit.ToString()))
          ||
          (actionSubmitedAtLvl.LvlAtWhichActionSubmited > 0 && actionSubmitedAtLvl.ActionSubmitted.Equals(Enums.WorkbasketAction.Approve.ToString()))
          ||
                      (actionSubmitedAtLvl.LvlAtWhichActionSubmited == 0 && actionSubmitedAtLvl.ActionSubmitted.Equals(Enums.WorkbasketAction.Close.ToString()))
                        )
                        {
                            WorkbasketTaskUser wtUser = workbasketTaskUsers.Where(a => a.WorkbasketTaskId == wt.Id && a.UserId == userId && a.IsDeleted == false).FirstOrDefault();
                            SetRAGStatus(wtUser, wt, userId, currentTime, loginId, actionSubmitedAtLvl.LvlAtWhichActionSubmited, context);
                        }
                        //Reset TATs after Reject
                        if (actionSubmitedAtLvl.ActionSubmitted.Equals(Enums.WorkbasketAction.Reject.ToString()))
                        {
                            ResetTATForWorkbasketTask(loginId, wt.Id, currentTime, context);

                        }
                    }
                    context.SaveChanges();
                    //send mail  hold for now 
                    //SendMailOnMultipleSubmission(tenantId, userId, wtList, wbTaskWithActions, workbasketTaskUsers);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void SendMailOnMultipleSubmission(int tenantId, int userId, List<WorkbasketTask> wtList, List<Workitems> wbTaskWithActions, List<WorkbasketTaskUser> workbasketTaskUsers)
        {
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    var email = context.TenantEmails.Where(te => te.TenantId == tenantId && te.IsActive == true).Select(te => te.EmailId).FirstOrDefault();
                    var emailList = Email.Extract_Emails(email);
                    var levelNCycleWithWorkbasketTaskId = workbasketTaskUsers
                                                                     .Select(b => new { WBTaskId = b.WorkbasketTaskId, Level = b.WFLevel, Attempt = b.WorkbasketTask.Attempt, Action = wbTaskWithActions.Where(c => c.Id == b.WorkbasketTaskId).Select(c => c.ActionSubmittedAgainstWBTaskId).FirstOrDefault() }).ToList();
                    // get Mail contents from db for each action for selected TenantId
                    var contentsForAction = context.EmailContents.Where(em => em.TenantId == tenantId).Select(em => new { Action = em.Action, Body = em.EmailBody, SendMailFlag = em.SendMailFlag, EmailSubject = em.EmailSubject });

                    //send mail 
                    foreach (var wt in wtList)
                    {
                        var reasonIdNComments = wbTaskWithActions.Where(a => a.Id == wt.Id).Select(a => new { ReasonId = a.ReasonId, Comments = a.Comments }).FirstOrDefault();
                        var actionSubmitedAtLvl = levelNCycleWithWorkbasketTaskId.Where(b => b.WBTaskId == wt.Id)
                                            .Select(b => new { ActionSubmitted = b.Action, LvlAtWhichActionSubmited = b.Level }).FirstOrDefault();
                        var sendMailFlag = contentsForAction.Where(c => c.Action == actionSubmitedAtLvl.ActionSubmitted).Select(c => c.SendMailFlag).FirstOrDefault();
                        if (sendMailFlag)
                        {
                            List<string> recepientEmails = new List<string>();
                            // if last approval then bring email type of 'close'
                            var emailContentsForAction = (actionSubmitedAtLvl.LvlAtWhichActionSubmited == wt.WorkbasketTaskUsers.Where(d => d.IsDeleted == false).Count() - 1 && actionSubmitedAtLvl.ActionSubmitted == approveStatus) ? completedStatus : actionSubmitedAtLvl.ActionSubmitted;
                            string timeZone = wt.TimeZone;
                            DateTime currentTime;
                            if (wt.TimeZone.Equals(string.Empty) || wt.TimeZone == null)//If Time not set
                                timeZone = "UTC";
                            currentTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById(timeZone));//Get current time as per time zone

                            EmailData ed = new EmailData();
                            var preparerDetails = wt.WorkbasketTaskUsers.Where(usr => usr.IsDeleted == false && usr.WFLevel == 0).Select(usr => new { Email = usr.User.Email, Name = usr.User.UserName }).FirstOrDefault();
                            var recepientDetails = wt.WorkbasketTaskUsers.Where(usr => usr.IsDeleted == false && usr.WFLevel == wt.WorkflowAction.WorkflowLevel).Select(usr => new { Email = usr.User.Email, Name = usr.User.UserName, DueDate = usr.EndDateInt }).FirstOrDefault();
                            ed.Subject = contentsForAction.Where(c => c.Action == emailContentsForAction).Select(c => c.EmailSubject).FirstOrDefault();
                            ed.TaskId = wt.Id.ToString();
                            ed.Team = wt.Team.TeamName;
                            ed.TaskName = wt.TaskName;
                            ed.Workflow = wt.Workflow.WorkflowName;
                            ed.Period = wt.Period.PeriodText;
                            ed.Body = contentsForAction.Where(c => c.Action == emailContentsForAction).Select(c => c.Body).FirstOrDefault();
                            ed.DueDate = recepientDetails.DueDate;
                            ed.LoginedUserName = wt.WorkbasketTaskUsers.Where(usr => usr.UserId == userId).Select(usr => usr.User.UserName).FirstOrDefault();
                            ed.Comment = reasonIdNComments.Comments;
                            ed.currentTime = currentTime;
                            ed.Preparer = preparerDetails.Name;
                            ed.Action = actionSubmitedAtLvl.ActionSubmitted;
                            ed.Priority = wt.Priority1.PriorityName;
                            if (reasonIdNComments.ReasonId > 0)
                                ed.ReasonCode = context.ReasonsLookUps.Where(rsn => rsn.Id == reasonIdNComments.ReasonId).Select(rsn => rsn.ReasonCode).FirstOrDefault();

                            if (preparerDetails.Email != recepientDetails.Email && actionSubmitedAtLvl.ActionSubmitted != Enums.WorkbasketAction.Submit.ToString())
                            {
                                ed.CCEmail.Add(preparerDetails.Email);
                            }
                            recepientEmails.Add(recepientDetails.Email);
                            if (null != emailList && emailList.Count() > 0)
                            {
                                recepientEmails.Clear();
                                if (null != ed.CCEmail)
                                    ed.CCEmail.Clear();

                                foreach (var eml in emailList)
                                    recepientEmails.Add(eml);
                            }
                            Email.SendEmail(recepientEmails.ToArray(), recepientDetails.Name, ed);
                        }

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        private void SetRAGStatus(WorkbasketTaskUser wtUser, WorkbasketTask wt, int userId, DateTime currentTime, string loginId, short lvlAtWhichActionSubmited, ECloseContext context)
        {
            try
            {
                if (currentTime > wtUser.EndDateInt)//If current action tiem is greater than the set TAT Time then its Red else green for internal TAT
                    wtUser.RAGStatusInt = "R";
                else
                    wtUser.RAGStatusInt = "G";

                if (currentTime > wtUser.EndDateExt)//If current action tiem is greater than the set TAT Time then its Red else green for ext. TAT
                    wtUser.RAGStatusExt = "R";
                else
                    wtUser.RAGStatusExt = "G";

                wtUser.ActualEndDate = currentTime;
                wtUser.UpdatedBy = loginId;
                wtUser.UpdatedOn = DateTime.UtcNow;
                if (wtUser.RAGStatusInt == Enums.RAGStatus.R.ToString())
                {
                    DelayedTask delayedTask = new DelayedTask();
                    delayedTask.CreatedBy = loginId;
                    delayedTask.CreatedOn = DateTime.UtcNow;
                    delayedTask.WorkbasketTaskId = wt.Id;
                    delayedTask.UserId = userId;
                    delayedTask.Attempt = wt.Attempt;
                    delayedTask.IsOnshoreUser = wtUser.User.IsOnshoreUser;
                    delayedTask.PeriodId = wt.PeriodId;
                    delayedTask.WFLevel = lvlAtWhichActionSubmited;
                    context.DelayedTasks.Add(delayedTask);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void AddReasonsForAction(int tenantId, string loginId, DateTime currentTime, WorkbasketTask wt, int userId, short lvlAtWhichActionSubmited, int reasonId, string comments, string actionSubmitted, ECloseContext context)
        {
            try
            {
                //--- If action =Hold then add hold reason to OnHoldtask table
                if (actionSubmitted == Enums.WorkbasketAction.Hold.ToString())
                {
                    OnHoldTask onHold = new OnHoldTask();
                    onHold.CreatedBy = loginId;
                    onHold.CreatedOn = currentTime;
                    onHold.WorkbasketTaskId = wt.Id;
                    onHold.UserId = userId;
                    onHold.Level = lvlAtWhichActionSubmited;
                    onHold.HoldReasonId = reasonId;
                    onHold.Comments = (null != comments && comments.Trim().Length > 0) ? comments : null;
                    onHold.TenantId = tenantId;
                    context.OnHoldTasks.Add(onHold);
                }
                //--- If action =reject then add  reason to rejectedTAsk table
                if (actionSubmitted == Enums.WorkbasketAction.Reject.ToString())
                {
                    var preparerId = wt.WorkbasketTaskUsers.Where(a => a.WFLevel == 0).Select(a => a.UserId).FirstOrDefault();
                    RejectedTask rejTask = new RejectedTask();
                    rejTask.CreatedBy = loginId;
                    rejTask.CreatedOn = DateTime.UtcNow;
                    rejTask.RejectedOn = currentTime;
                    rejTask.WorkbasketTaskId = wt.Id;
                    rejTask.ReviewerId = userId;
                    rejTask.PreparerId = Convert.ToInt32(preparerId);
                    rejTask.Level = lvlAtWhichActionSubmited;
                    rejTask.ReasonId = (reasonId > 0) ? (int?)reasonId : null;
                    rejTask.Comments = (null != comments && comments.Trim().Length > 0) ? comments : null;
                    rejTask.TenantId = tenantId;
                    context.RejectedTasks.Add(rejTask);
                }
                //--- If action =Discard then add  reason to exceptionalTask table
                if (actionSubmitted == Enums.WorkbasketAction.Discard.ToString())
                {
                    ExceptionalTask eTask = new ExceptionalTask();
                    eTask.CreatedBy = loginId;
                    eTask.CreatedOn = currentTime;
                    eTask.WorkbasketTaskId = wt.Id;
                    eTask.UserId = userId;
                    eTask.Level = lvlAtWhichActionSubmited;
                    eTask.ReasonId = reasonId;
                    eTask.Comments = (null != comments && comments.Trim().Length > 0) ? comments : null;
                    eTask.TenantId = tenantId;
                    context.ExceptionalTasks.Add(eTask);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public void DiscardForMultipleTask(string loginId, int userId, List<Workitems> wbTaskWithActions)
        {
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    context.Configuration.LazyLoadingEnabled = true;
                    var tenantId = 0;
                    //////var taskIdList = wbTaskWithActions.Select(x => x.Id);

                    ////////--- discard with all its dependent Task
                    //////var dependantWBTask = context.DependetWorkbasketTasks.Where(a => a.IsDeleted == false && taskIdList.Contains(a.DependsOnWorkbasketTaskId)).ToList();
                    //////foreach (var task in dependantWBTask)
                    //////{
                    //////    var rsnIdNComments = wbTaskWithActions.Where(wt => wt.Id == task.DependsOnWorkbasketTaskId).Select(wt => new { rsn = wt.ReasonId, comments = wt.Comments }).FirstOrDefault();
                    //////    wbTaskWithActions.Add(new Workitems { Id = task.WorkbasketTaskId, ReasonId = rsnIdNComments.rsn, Comments = rsnIdNComments.comments });
                    //////}
                    var modifiedWBTaskWithActions = GetAllDependantTasks(wbTaskWithActions);
                    var wbTaskIdList = modifiedWBTaskWithActions.Select(x => x.Id);
                    List<WorkbasketTask> wtList = context.WorkbasketTasks.Where(wt => wt.IsDeleted == false && wbTaskIdList.Contains(wt.Id)).ToList();
                    // tenantId needed for mail contents
                    tenantId = wtList[0].TenantId;
                    foreach (var wt in wtList)
                    {
                        //Added By Rizwan to update actual end date & Update TAT Flag - 18 Jan 2017

                        string timeZone = wt.TimeZone;
                        DateTime currentTime;

                        if (wt.TimeZone.Equals(string.Empty) || wt.TimeZone == null)//If Time not set
                            timeZone = "UTC";

                        currentTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById(timeZone));//Get current time as per time zone
                        var reasonIdNComments = modifiedWBTaskWithActions.Where(a => a.Id == wt.Id).Select(a => new { ReasonId = a.ReasonId, Comments = a.Comments }).FirstOrDefault();
                        //Add action in action history
                        ActionLog obj = new ActionLog();
                        obj.CreatedBy = loginId;
                        obj.CreatedOn = DateTime.UtcNow;
                        obj.WorkbasketTaskId = wt.Id;
                        obj.UserId = userId;
                        obj.Attempt = wt.Attempt;
                        obj.ReasonId = (reasonIdNComments.ReasonId > 0) ? (int?)reasonIdNComments.ReasonId : null;
                        obj.Comments = (null != reasonIdNComments.Comments && reasonIdNComments.Comments.Trim().Length > 0) ? reasonIdNComments.Comments : null;
                        obj.ActionedOn = currentTime;
                        obj.Action = discard;
                        obj.WFLevel = wt.WorkflowAction.WorkflowLevel;
                        obj.TenantId = tenantId;
                        context.ActionLogs.Add(obj);

                        //get all workflowActions related to workitem's workflowId-------------
                        var wfActions = wt.Workflow.WorkflowActions.ToList();
                        //get nextlevel and next action ofSubmitedAction
                        var nextLvlNnextAction = wfActions.Where(a => a.IsDeleted == false && a.WorkflowId == wt.WorkflowAction.WorkflowId
                                                                && a.Status == discard && a.WorkflowLevel == wt.WorkflowAction.WorkflowLevel)
                                                                .Select(a => new { NxtLvl = a.NextLevel, NxtAction = a.NextAction }).FirstOrDefault();
                        // update WorkbasketTask WfActionId as per next action and  next level
                        wt.StatusId = wfActions.Where(a => ((null == nextLvlNnextAction.NxtLvl) ? a.WorkflowLevel == wt.WorkflowAction.WorkflowLevel : a.WorkflowLevel == nextLvlNnextAction.NxtLvl) && ((null == nextLvlNnextAction.NxtAction) ? a.Status == discard : a.Status == nextLvlNnextAction.NxtAction)
                                                             && a.IsDeleted == false && a.WorkflowId == wt.WorkflowAction.WorkflowId)
                                                                  .Select(a => a.Id).FirstOrDefault();
                        wt.UpdatedBy = loginId;
                        wt.UpdatedOn = DateTime.UtcNow;
                        //--------------------------------------------------------------------

                        //---add  reason to exceptionworkbasketTask table
                        AddReasonsForAction(tenantId, loginId, currentTime, wt, userId, wt.WorkflowAction.WorkflowLevel, reasonIdNComments.ReasonId, reasonIdNComments.Comments, discard, context);
                    }
                    context.SaveChanges();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private static List<Workitems> GetAllDependantTasks(List<Workitems> wbTaskWithActions)
        {
            var taskIdList = wbTaskWithActions.Select(x => x.Id).ToList();
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    CheckForCascadeDiscard:
                    var dependantWBTask = context.DependetWorkbasketTasks.Where(a => a.IsDeleted == false && taskIdList.Contains(a.DependsOnWorkbasketTaskId)).Select(a => new { WorkbasketTaskId = a.WorkbasketTaskId, DependsOnWorkbasketTaskId = a.DependsOnWorkbasketTaskId }).ToList();
                    taskIdList.Clear();
                    if (dependantWBTask.Count > 0)
                    {
                        foreach (var task in dependantWBTask)
                        {
                            var rsnIdNComments = wbTaskWithActions.Where(wt => wt.Id == task.DependsOnWorkbasketTaskId).Select(wt => new { rsn = wt.ReasonId, comments = wt.Comments }).FirstOrDefault();
                            wbTaskWithActions.Add(new Workitems { Id = task.WorkbasketTaskId, ReasonId = rsnIdNComments.rsn, Comments = rsnIdNComments.comments });
                            taskIdList.Add(task.WorkbasketTaskId);
                        }
                        goto CheckForCascadeDiscard;
                    }
                    return wbTaskWithActions;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public List<ActionLogForWorkbasket> GetUsersLevelAssignmentByWorkbasketTaskId(int workbasketTaskId, string loginId)
        {
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    var userLevelsForWorkbasketTask = context.WorkbasketTaskUsers.OrderBy(a => a.WFLevel)
                                                               .Where(a => a.WorkbasketTaskId == workbasketTaskId)
                                                               .Select(a => new ActionLogForWorkbasket
                                                               {
                                                                   UserName = a.User.UserName,
                                                                   WorkflowLevel = a.WFLevel,
                                                                   ActionedOn = a.ActualEndDate,
                                                                   Id = a.Id,
                                                                   LevelText = a.WorkbasketTask.Workflow.WorkflowLevels.Where(lvl => lvl.Level == a.WFLevel).Select(lvl => lvl.LevelText).FirstOrDefault(),
                                                                   EndDate = a.EndDateInt,
                                                                   RAGStatus = a.RAGStatusInt
                                                               }).ToList();
                    return userLevelsForWorkbasketTask;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        #endregion
        #region "Get options for dropdown"

        public object GetReasonOptions(int tenantId, string reasonType, string loginId)
        {
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    var reasons = context.ReasonsLookUps.Where(a => a.TenantId == tenantId && a.ReasonType == reasonType && a.IsDeleted == false).Select(a => new { Key = a.Id, Value = a.ReasonCode }).ToList();
                    return reasons;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        public object GetPriorityOptions(string loginId)
        {
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    var reasons = context.Priorities.Select(a => new { Key = a.Id, Value = a.PriorityName }).ToList();
                    return reasons;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        #endregion
        #region "Depends on Tasks"

        public List<Workitems> GetDependsOnTaskByWorkbasketTaskId(int workbasketTaskId, string loginId)
        {
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    var dependsOnTasks = context.WorkbasketTasks.Where(a => a.DependetWorkbasketTasks.Where(b => b.WorkbasketTaskId == workbasketTaskId && b.IsDeleted == false).Any() && a.IsDeleted == false)
                                                               .Select(a => new Workitems
                                                               {
                                                                   Id = a.Id,
                                                                   TeamName = a.Team.TeamName,
                                                                   Location = a.Team.Location.LocationName,
                                                                   TaskName = a.TaskName,
                                                                   Status = a.WorkflowAction.Status,
                                                                   TaskAtLevel = a.WorkflowAction.WorkflowLevel,
                                                                   // next approver will be blank on approve/Close status
                                                                   NextApprover = (a.WorkflowAction.Status == completedStatus) ? ""
                                                           : a.WorkbasketTaskUsers.Where(d => d.IsDeleted == false &&
                                                                                                 //if logined user lvl not matches task lvl (mostly in case of preparer then show current approver else show next lvl approver)
                                                                                                 d.WFLevel == a.WorkflowAction.WorkflowLevel)//
                                                                                             .Select(e => e.User.UserName).FirstOrDefault(),

                                                               }).ToList();
                    return dependsOnTasks;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }
        public void ResetTATForWorkbasketTask(string loginId, int workbasketTaskId, DateTime currentTime, ECloseContext context)
        {
            //  using (ECloseContext context = new ECloseContext())
            //  {


            var wbUsers = context.WorkbasketTaskUsers.Where(a => a.WorkbasketTaskId == workbasketTaskId).ToList();
            foreach (var usr in wbUsers)
            {
                usr.ActualEndDate = null;
                usr.UpdatedBy = loginId;
                usr.UpdatedOn = DateTime.UtcNow;
            }

            var tsks = (from wbusr in context.WorkbasketTaskUsers
                        join wb in context.WorkbasketTasks on wbusr.WorkbasketTaskId equals wb.Id
                        where wb.Id == workbasketTaskId


                        select new
                        {
                            Id = wbusr.Id,
                            EnDateInt = wbusr.EndDateInt,
                            EndExt = wbusr.EndDateExt,
                            IntimationDateInt = wbusr.IntimationDateInt,
                            IntimationDateIntExt = wbusr.IntimationDateInt,


                        }
                         ).ToList();

            foreach (var tsk in tsks)
            {
                var wb = context.WorkbasketTaskUsers.Find(tsk.Id);


                if (tsk.EnDateInt > currentTime && currentTime < tsk.IntimationDateInt)
                    wb.RAGStatusInt = "G";
                else if (tsk.EnDateInt > currentTime && currentTime > tsk.IntimationDateInt)
                    wb.RAGStatusInt = "A";

                else if (tsk.EnDateInt < currentTime)
                    wb.RAGStatusInt = "R";

                if (tsk.EndExt > currentTime && currentTime < tsk.IntimationDateIntExt)
                    wb.RAGStatusExt = "G";
                else if (tsk.EndExt > currentTime && currentTime > tsk.EndExt)
                    wb.RAGStatusExt = "A";

                else if (tsk.EndExt < currentTime)
                    wb.RAGStatusExt = "R";

                wb.UpdatedBy = loginId;
                wb.UpdatedOn = DateTime.UtcNow;
            }
            // context.SaveChanges();
            // }


        }
        #endregion
        #region "Workbasket file attachments"

        public void AddFileDetails(string loginId, int tenantId, int workbasketTaskId, string fileName, string actionOnFile)
        {
            try
            {
                using (ECloseContext context = new ECloseContext())
                {
                    var wtFile = context.WrokBasketTaskFiles.Where(file => file.WorkbasketTaskId == workbasketTaskId && file.FileName == fileName && file.IsDeleted == false).FirstOrDefault();
                    if (null != wtFile)
                    {
                        if (actionOnFile == Enums.ActionForFile.DeleteFileByFileName.ToString())
                        {
                            wtFile.IsDeleted = true;
                            wtFile.DeletedBy = loginId;
                            wtFile.DeletedOn = DateTime.UtcNow;
                        }
                        else
                        {
                            wtFile.UpdatedBy = loginId;
                            wtFile.UpdatedOn = DateTime.UtcNow;
                        }
                    }
                    else
                    {
                        WrokBasketTaskFile filedetails = new WrokBasketTaskFile();
                        filedetails.CreatedBy = loginId;
                        filedetails.CreatedOn = DateTime.UtcNow;
                        filedetails.WorkbasketTaskId = workbasketTaskId;
                        filedetails.FileName = fileName;
                        filedetails.TenantId = tenantId;
                        context.WrokBasketTaskFiles.Add(filedetails);
                    }
                    context.SaveChanges();
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion
    }
}
