  public List<dynamic> GetTaskTimelineChartReport(int LocationId, string PeriodText, int tenantId)
        {
            //var result = (from WorkbasketTask in context.WorkbasketTasks
            //                        join Period in context.Periods
            //                        on WorkbasketTask.PeriodId equals Period.Id
            //                        join PeriodDay in context.PeriodDays
            //                        on Period.Id equals PeriodDay.PeriodId
            //                        join WorkbasketTaskUsers in context.WorkbasketTaskUsers
            //                        on WorkbasketTask.Id equals WorkbasketTaskUsers.WorkbasketTaskId
            //                        join DependentTask in context.DependentTasks
            //                        on WorkbasketTask.TaskId equals DependentTask.TaskId into DependentTaskinfo
            //                        from DependentTask in DependentTaskinfo.DefaultIfEmpty()
            //                        join Team in context.Teams
            //                        on WorkbasketTask.TeamId equals Team.Id into teaminfo
            //                        from Team in teaminfo.DefaultIfEmpty()
            //                        join Task in context.Tasks
            //                        on WorkbasketTask.TaskId equals Task.Id into taskinfo
            //                        from Task in taskinfo.DefaultIfEmpty()
            //                        where (WorkbasketTask.TaskId != null) && (WorkbasketTaskUsers.EndDateInt != null) && (Period.PeriodText == PeriodText) && (Period.LocationId == LocationId) && (WorkbasketTask.TenantId == tenantId)
            //                        group WorkbasketTask by new
            //                        {
            //                            WorkbasketTask.TeamId,
            //                            Team.TeamName,
            //                            Task.TaskName,
            //                            WorkbasketTask.TaskId,
            //                            DependentTask.DependentTaskId,
            //                            WorkbasketTaskUsers.EndDateInt
            //                        } into gcs
            //                        select new
            //                        {
            //                            TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,
            //                            TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,
            //                            TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,
            //                            TaskId = (gcs.Key.TaskId == null) ? 0 : gcs.Key.TaskId,
            //                            DependantTaskId = (gcs.Key.DependentTaskId == null) ? gcs.Key.TaskId : gcs.Key.DependentTaskId,
            //                            EndDate = gcs.Max(x => (gcs.Key.EndDateInt == null) ? "01/01/2000" : gcs.Key.EndDateInt.ToString()),
            //                            value = "",
            //                            extra = ""
            //                        }).ToList<dynamic>();


        
           var result= (from DependetWorkbasketTask in context.DependetWorkbasketTasks
                          join WorkbasketTask in context.WorkbasketTasks
                          on DependetWorkbasketTask.WorkbasketTaskId equals WorkbasketTask.Id
                          join Period in context.Periods
                          on WorkbasketTask.PeriodId equals Period.Id
                          join PeriodDays in context.PeriodDays
                          on Period.Id equals PeriodDays.PeriodId
                          join Team in context.Teams
                          on WorkbasketTask.TeamId equals Team.Id
                          join WorkbasketTaskUsers in context.WorkbasketTaskUsers
                          on DependetWorkbasketTask.DependsOnWorkbasketTaskId equals WorkbasketTaskUsers.Id
                          where (Period.LocationId == 203) && (Period.Id == 110) && (WorkbasketTask.TenantId == 57)
                          group DependetWorkbasketTask by new
                          {
                              WorkbasketTaskUsers.EndDateInt,
                              DependetWorkbasketTask.WorkbasketTaskId,
                              DependetWorkbasketTask.DependsOnWorkbasketTaskId,
                              WorkbasketTask.TaskName,
                              Team.TeamName
                          } into gcs
                          select new
                          {
                              //TeamId = (gcs.Key.TeamId == null) ? 0 : gcs.Key.TeamId,
                              TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,
                              TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,
                              WorkbasketTaskId = (gcs.Key.WorkbasketTaskId == null) ? 0 : gcs.Key.WorkbasketTaskId,
                              DependsOnWorkbasketTaskId = gcs.Key.DependsOnWorkbasketTaskId,
                              EndDate = gcs.Max(x => (gcs.Key.EndDateInt == null) ? "01/01/2000" : gcs.Key.EndDateInt.ToString()),
                              value = "",
                              extra = ""
                          }).ToList<dynamic>();


            //IEnumerable<dynamic> DependsOnWorkbasketTaskIdList;
            //DependsOnWorkbasketTaskIdList = result.Select(t => t.DependsOnWorkbasketTaskId);
           

            var result2 = (from WorkbasketTask in context.WorkbasketTasks
                           join DependetWorkbasketTask in context.DependetWorkbasketTasks
                           on WorkbasketTask.Id equals DependetWorkbasketTask.WorkbasketTaskId into DependetWorkbasketTaskinfo
                           from DependetWorkbasketTask in DependetWorkbasketTaskinfo.DefaultIfEmpty()
                           join Period in context.Periods
                           on WorkbasketTask.PeriodId equals Period.Id into Periodinfo
                           from Period in Periodinfo.DefaultIfEmpty()
                           join PeriodDays in context.PeriodDays
                           on Period.Id equals PeriodDays.PeriodId into PeriodDaysinfo
                           from PeriodDays in PeriodDaysinfo.DefaultIfEmpty()
                           join Team in context.Teams
                           on WorkbasketTask.TeamId equals Team.Id into Teaminfo
                           from Team in Teaminfo.DefaultIfEmpty()
                           join WorkbasketTaskUsers in context.WorkbasketTaskUsers
                           on WorkbasketTask.Id equals WorkbasketTaskUsers.Id into WorkbasketTaskUsersinfo
                           from WorkbasketTaskUsers in WorkbasketTaskUsersinfo.DefaultIfEmpty()
                               ////join dtasklist in DependsOnWorkbasketTaskIdList
                               ////on dtasklist equals WorkbasketTask.Id into dtasklistinfo
                              // //from dtasklist in dtasklistinfo.DefaultIfEmpty()
                               ////// where (DependsOnWorkbasketTaskIdList.Contains(WorkbasketTask.Id.ToString())) //&& (Period.LocationId == 203) && (Period.Id == 110) && (WorkbasketTask.TenantId == 57)
                           //join list1 in result
                           //on WorkbasketTask.Id equals list1.DependsOnWorkbasketTaskId
                           group WorkbasketTask by new
                           {
                               WorkbasketTaskUsers.EndDateInt,
                               WorkbasketTask.Id,
                               DependetWorkbasketTask.DependsOnWorkbasketTaskId,
                               WorkbasketTask.TaskName,
                               Team.TeamName
                           } into gcs
                           select new
                           {
                               TeamName = (gcs.Key.TeamName == null) ? "" : gcs.Key.TeamName,
                               TaskName = (gcs.Key.TaskName == null) ? "" : gcs.Key.TaskName,
                               WorkbasketTaskId = (gcs.Key.Id == null) ? 0 : gcs.Key.Id,
                               DependsOnWorkbasketTaskId = (gcs.Key.DependsOnWorkbasketTaskId == null) ? gcs.Key.Id : gcs.Key.DependsOnWorkbasketTaskId,
                               EndDate = gcs.Max(x => (gcs.Key.EndDateInt == null) ? "01/01/2000" : gcs.Key.EndDateInt.ToString()),
                               value = "",
                               extra = ""
                           }).ToList<dynamic>();

            result.ToList().AddRange(result2);
            return result;
        }
